import groovy.json.JsonSlurper

NODE_NAME="integration-staging-${env.BUILD_NUMBER}"
NODE_IP='10.24.60.100'

SCRIPTS_DIR='/home/jenkins/integration'


CEPH_CHART_REPO='https://github.com/openstack/openstack-helm'
DRYDOCK_CHART_REPO='https://github.com/sh8121att/helm_charts'
MAAS_CHART_REPO='https://github.com/sh8121att/helm_charts'

DRYDOCK_IMAGE='quay.io/attcomdev/drydock:master'
ARMADA_IMAGE='quay.io/attcomdev/armada:master'
PROMENADE_IMAGE='quay.io/attcomdev/promenade:master'

def get_hname = {
    cmd = 'echo -n $(hostname)'
    sh(returnStdout: true, script: cmd)
}


try {
    node('integration') {
        dir(SCRIPTS_DIR) {
            
            sh ('docker run -v $(pwd):/target -t genesis-client2 bash /gdestroy')
            sleep 5
            
            sh ('docker run -v $(pwd):/target -t genesis-client2 bash /glaunch')

            withCredentials([usernamePassword(credentialsId: 'jenkins-token',
                usernameVariable: 'JENKINS_USER',
                passwordVariable: 'JENKINS_TOKEN')]) {

                sh "bash create-node ${NODE_NAME} ${NODE_IP}"
            }
        }
    }

    node(NODE_NAME) {
        sh 'echo Node is ready!'
    }
    
    node('integration') {
        dir(SCRIPTS_DIR) {
            // todo: these should probably go into repos
            sh "scp -o 'StrictHostKeyChecking=no' integration.yaml ubuntu@${NODE_IP}:"
            sh "scp -o 'StrictHostKeyChecking=no' promenade.yaml.sub ubuntu@${NODE_IP}:"
        }
    }
    
    node(NODE_NAME) {
        stage ("Run Integration") {
            checkout poll: false,
                scm: [$class: 'GitSCM',
                branches: [[name: '$GERRIT_REFSPEC']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                    url: 'https://review.gerrithub.io/att-comdev/ucp-integration']]]

            CEPH_CLUSTER_NET = '10.24.60.0/24'
            CEPH_PUBLIC_NET = '10.24.60.0/24'

            NODE_NET_IFACE = 'eth0' // ens3 for VMs

            GENESIS_NODE_IP = '10.24.60.100'
            GENESIS_NODE_NAME = get_hname()

            MASTER_NODE_IP = '10.23.50.11'
            MASTER_NODE_NAME = 'controller01'

            sh "sudo sh -c 'echo ${GENESIS_NODE_IP} ${GENESIS_NODE_NAME} >> /etc/hosts'"

            withEnv(["CEPH_CLUSTER_NET=${CEPH_CLUSTER_NET}",
                     "CEPH_PUBLIC_NET=${CEPH_PUBLIC_NET}",
                     "NODE_NET_IFACE=${NODE_NET_IFACE}",
                     "GENESIS_NODE_IP=${GENESIS_NODE_IP}",
                     "MASTER_NODE_IP=${MASTER_NODE_IP}",
                     "GENESIS_NODE_NAME=${GENESIS_NODE_NAME}",
                     "MASTER_NODE_NAME=${MASTER_NODE_NAME}",
                     "PROMENADE_IMAGE=${PROMENADE_IMAGE}",
                     "ARMADA_IMAGE=${ARMADA_IMAGE}",
                     "CEPH_CHART_REPO=${CEPH_CHART_REPO}",
                     "DRYDOCK_CHART_REPO=${DRYDOCK_CHART_REPO}",
                     "MAAS_CHART_REPO=${MAAS_CHART_REPO}",
                     "DRYDOCK_IMAGE=${DRYDOCK_IMAGE}"]) {

                dir("${WORKSPACE}/manifests/basic_ucp") {
                    timeout (30) {
                        sh 'cp ~/promenade.yaml.sub .'
                        sh 'cat promenade.yaml.sub'

                        sh 'sudo -E bash deploy_ucp.sh'
                    }
                }
            }
        } // stage
    } // node
    
    
    
    node(NODE_NAME) {
        // todo: figure out properly when genesis is ready
        sleep 240
    
        // todo: this should probably be part of repos
        sh 'cp ~/integration.yaml manifests/basic_ucp/'
        sh 'cat manifests/basic_ucp/integration.yaml'
    
        def get_keystone_token = {
            
            docker_env = "-e 'OS_AUTH_URL=http://keystone-api.ucp.svc.cluster.local:80/v3'" + 
                " -e 'OS_PROJECT_DOMAIN_NAME=default'" + 
                " -e 'OS_USER_DOMAIN_NAME=default'" + 
                " -e 'OS_PROJECT_NAME=service'" + 
                " -e 'OS_REGION_NAME=RegionOne'" + 
                " -e 'OS_USERNAME=drydock'" + 
                " -e 'OS_PASSWORD=password'" + 
                " -e 'OS_IDENTITY_API_VERSION=3'"
        
            docker_opts = "--rm --net=host"
            keystone_cmd = "openstack token issue -f shell | grep ^id | cut -d'=' -f2 | tr -d '\"'"
        
            docker_cmd = "sudo docker run ${docker_opts} ${docker_env} kolla/ubuntu-source-keystone:3.0.3 ${keystone_cmd}"
        
            return sh(returnStdout: true, script: docker_cmd).trim()
        }
        
        
        def run_drydock_cmd = { token, cmd ->
         
            drydock_env = "-e 'DD_TOKEN=${token}'" +
                " -e 'DD_URL=http://drydock-api.ucp.svc.cluster.local:9000'" +
                " -e LC_ALL=C.UTF-8" +
                " -e LANG=C.UTF-8"
            
            drydock_opts = "-v \$(pwd):/target --rm -t --net=host --entrypoint \"drydock\""
            drydock_cmd = "sudo docker run ${drydock_opts} ${drydock_env} ${DRYDOCK_IMAGE}"
        
            response = sh(returnStdout: true, script: "${drydock_cmd} ${cmd}").trim()
            // print response
            return response
        }
        
        def get_drydock_task = { token, task ->
            json = run_drydock_cmd(token, "task show --task-id=${task}")
        
            // fixing broken json
            json = json.replaceAll('\'','"')
            json = json.replaceAll('None','"None"')
         
            return new JsonSlurper().parseText(json)
        }
        
        def get_drydock_task_status = { token, task ->
            return get_drydock_task(token, task).status
        }
        def get_drydock_task_result = { token, task ->
            return get_drydock_task(token, task).result
        }
        
        def wait_drydock_task = { token, task, interval -> 
            timeout (60) {
                while (true) {
                    sleep interval
                    if (get_drydock_task_status(token, task) == 'complete') {
                        if (get_drydock_task_result(token, task) != 'success') {
                            sh "exit 1"
                        }
                        break
                    }
                }
            }
        }
    
        token = get_keystone_token() 
        design = run_drydock_cmd(token, "design create")
    
        run_drydock_cmd(token, "part --design-id=${design} create -f /target/manifests/basic_ucp/integration.yaml")
        run_drydock_cmd(token, "part --design-id=${design} create -f /target/manifests/basic_ucp/configs/complete-bundle.yaml")
        
        
        // verify_site
        task = run_drydock_cmd(token, "task create --design-id=${design} -a verify_site")
        wait_drydock_task(token, task, 2)
    
    
        // prepare_site
        task = run_drydock_cmd(token, "task create --design-id=${design} -a prepare_site")
        wait_drydock_task(token, task, 5)
        
        // prepare_node
        task = run_drydock_cmd(token, "task create --design-id=${design} -a prepare_node")
        wait_drydock_task(token, task, 30)
        
        // deploy_node
        task = run_drydock_cmd(token, "task create --design-id=${design} -a deploy_node")
        wait_drydock_task(token, task, 30)
        
    }

} finally {
    node('integration') {
        dir(SCRIPTS_DIR) {
            // leave node running for manual troublehooting 
            // sh ('docker run -v $(pwd):/target -t genesis-client2 bash /gdestroy')
            
            withCredentials([usernamePassword(credentialsId: 'jenkins-token',
                usernameVariable: 'JENKINS_USER',
                passwordVariable: 'JENKINS_TOKEN')]) {

                sh "java -jar /home/jenkins/integration/jenkins-cli.jar -s ${env.JENKINS_URL} -auth ${env.JENKINS_USER}:${JENKINS_TOKEN} delete-node $NODE_NAME"
            }
        }
    }
}

