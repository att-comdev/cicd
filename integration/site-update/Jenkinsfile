import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions;

import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput


JENKINS_SLAVE_BUILDER = 'genesis-builder'

PROM_BUILD_NODE_NAME = "prom-build"
PROM_BUILD_NODE_IP = '10.24.20.99'
GENESIS_NODE_NAME = "genesis"
GENESIS_NODE_IP = '10.24.20.100'
VMX_NODE_NAME = "vmx"
VMX_NODE_IP = '10.24.20.101'


PROMENADE_IMAGE='artifacts-aic.atlantafoundry.com/att-comdev/promenade@sha256:1a91b067951dc33cb339c1e9332ed9f1d620ecab4c4323df1927bed7651de778'
PEGLEG_IMAGE='artifacts-aic.atlantafoundry.com/att-comdev/pegleg:610c4a841639176d050da40429e3ba9204488a9b'

MANIFEST_PREFIX='region/atl-lab1'

SONOBUOY_CFG="${MANIFEST_PREFIX}/test/sonobuoy.yaml"

ARTF_BASE="clcp-integration/${JOB_BASE_NAME}"

DECKHAND_URL='http://deckhand-int.ucp.svc.cluster.local:9000/api/v1.0'


def prom_build_prepare = {
    stage("Build Prepare") {
        gerrithub.clone("att-comdev/treasuremap", '${GERRIT_PATCHSET_REVISION}')
        checkout poll: false,
            scm: [$class: 'GitSCM',
            branches: [[name: 'refs/changes/81/81/2']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[$class: 'RelativeTargetDirectory',
                relativeTargetDir: 'clcp-integration']],
            submoduleCfg: [],
            userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                url: 'ssh://jenkins-attcomdev@10.24.20.18:29418/clcp-integration',
                    credentialsId:'jenkins-stage-master']]]
        sh "cp ${WORKSPACE}/clcp-integration/secrets/artifactory_docker_key.yaml ${WORKSPACE}/deployment_files/site/atl-lab1/secrets/passphrases/"

    }
}

//// artf utils

def artf = Artifactory.server 'artifactory'

def artf_spec = { pattern, target ->
    spec = ['files': [['pattern': pattern,
                       'target': target,
                       'flat': true]]]
    return new JsonOutput().toJson(spec)
}

def artf_publish = { pattern, target ->
    info = artf.upload(artf_spec(pattern, target))
    artf.publishBuildInfo(info)
}

def artf_download = { pattern, target ->
    artf.download(artf_spec(pattern, target))
}



def pegleg_site_collect = {
    stage('pegleg Site Collect') {
        sh "mkdir ${WORKSPACE}/atl-lab1_yaml-${BUILD_NUMBER}"
        sh "sudo docker run --rm -t -v \$(pwd):/target ${PEGLEG_IMAGE} pegleg site -p /target/deployment_files collect atl-lab1 -s /target/atl-lab1_yaml-${BUILD_NUMBER}"
    }
}

def site_config_publish = {
    stage('Site Config Publish') {
        sh "tar czf site-config.tar.gz-${BUILD_NUMBER} atl-lab1_yaml"
        artf_publish('site-config.tar.gz-${BUILD_NUMBER}', "${ARTF_BASE}/configs/")
    }
}

// def stable_site_config_publish = {
//     stage('Stable Site Config Publish') {
//         artf_publish('site-config.tar.gz', "${ARTF_BASE}/stable/configs/")
//     }
// }

//// deckhand utils
def deckhand_load = {
    stage('Deckhand Load') {
        artf_download("${ARTF_BASE}/configs/site-config.tar.gz-${BUILD_NUMBER}", "")
        sh "tar xzf site-config.tar.gz-${BUILD_NUMBER}"

        dir ("shipyard/tools") {
                sh "./deckhand_load_yaml.sh atl_lab1 ${WORKSPACE}/atl-lab1_yaml-${BUILD_NUMBER}"
        }
    }
}


////Site Update

def site_update = {
    stage ('Shipyard Site Update') {

        dir ("shipyard/tools") {
                sh "bash update_site.sh"
        }
    }
}


def sonobuoy_run = {
    if (SONOBUOY_ENABLED.toBoolean()) {
        stage('Sonobuoy E2E (v0.9.0)') {
            sh 'mkdir -p /tmp/sonobuoy' // test results

            sh "cat ${SONOBUOY_CFG} |sudo kubectl apply -f -"

            timeout (12) {
                cmd = 'sudo kubectl get pods -n heptio-sonobuoy |grep 1/1'
                while (sh(returnStatus: true, script: cmd)) sleep 30
            }

            timeout (120) {
                cmd = 'sudo kubectl get pods -n heptio-sonobuoy |grep 1/1'
                while (!sh(returnStatus: true, script: cmd)) sleep 300
            }
        }

        stage('Sonobuoy Publish') {

            artf_publish('/tmp/sonobuoy/*.tar.gz', "${ARTF_BASE}/sonobuoy/")

            sh 'mkdir -p results'
            sh 'tar xf /tmp/sonobuoy/*.tar.gz -C results'

            junit 'results/plugins/e2e/results/junit_01.xml'
        }
    }
}
def debug_report = {
    stage('Debug Report'){
        sh "rm debug-genesis.tgz"
        sh "sudo bash /usr/local/bin/debug-report.sh"
        artf_publish('debug-genesis.tgz', "${ARTF_BASE}/logs/")
    }
}


//// main flow
node(PROM_BUILD_NODE_NAME) {
    prom_build_prepare()
    pegleg_site_collect()
    site_config_publish()
}

node(GENESIS_NODE_NAME) {

    try {
        setup_interfaces()
    
        prom_deploy()

    // upload Drydock site YAMLs into Deckhand
        deckhand_load()

    // Deploy_site
        site_deploy()

    // e2e kubernetes conformance tests (optional)
        sonobuoy_run()
    } finally{
        debug_report()
    }
}
