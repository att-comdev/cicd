currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_PROJECT}-${GERRIT_EVENT_TYPE}"

vm2{
    stage('Project Checkout'){
        cleanWs()
        //To be removed once all projects are controlling their own dependencies
        //bootstrap was not loading as expected
        //removing docker.io from the list of installed packages since it is
        //causing the VM to stall and jobs stay at that stage for >15hrs
        sh '''sudo apt-get install -y \
              git make gcc python tox \
              build-essential \
              python3-minimal \
              python3-setuptools \
              python-pip \
              python-dev \
              python-flake8 \
              python3-pip \
              libffi-dev \
              libssl-dev'''
        vm2.setproxy()
        if(env.GERRIT_NEWREV){
            if(!GERRIT_HOST.contains('review')){
                gerrit.cloneToBranch("${INTERNAL_GERRIT_SSH}/${GERRIT_PROJECT}",
                                     GERRIT_NEWREV,
                                     "jenkins",
                                     INTERNAL_GERRIT_KEY)
            } else {
                gerrit.cloneToBranch("https://"+GERRIT_HOST+"/"+GERRIT_PROJECT, GERRIT_NEWREV, "jenkins")
                dir("${WORKSPACE}/jenkins"){
                    gerrit.rebase()
                }
            }
        } else {
            if(!GERRIT_HOST.contains('review')){
                gerrit.cloneToBranch("${INTERNAL_GERRIT_SSH}/${GERRIT_PROJECT}",
                                     GERRIT_PATCHSET_REVISION,
                                     "jenkins",
                                     INTERNAL_GERRIT_KEY)
            } else {
                gerrit.cloneToBranch("https://"+GERRIT_HOST+"/"+GERRIT_PROJECT, GERRIT_PATCHSET_REVISION, "jenkins")
                dir("${WORKSPACE}/jenkins"){
                    gerrit.rebase()
                }
            }
        }
    }
    dir("${WORKSPACE}/jenkins"){
        stage('Code-Review'){
            def status = sh(returnStatus: true, script: "sudo -H make tests")
            if (status != 0) {
                currentBuild.result = 'FAILED'
                notify.msg("Code Review failed for ${GERRIT_PROJECT} ${GERRIT_CHANGE_NUMBER}!")
            }else{
                notify.msg("Code Review successful for ${GERRIT_PROJECT} ${GERRIT_CHANGE_NUMBER}")
            }
        }
    }
}
