currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_PROJECT}-${GERRIT_EVENT_TYPE}"

vm2{
    stage('Project Checkout'){
        cleanWs()
        //To be removed once all projects are controlling their own dependencies
        //bootstrap was not loading as expected
        sh '''sudo apt-get install -y \
              git make docker.io gcc python tox \
              build-essential \
              python3-minimal \
              python3-setuptools \
              python-pip \
              python-dev \
              python-flake8 \
              python3-pip \
              libffi-dev \
              libssl-dev'''
        if(env.GERRIT_NEWREV){
            if(JENKINS_ENV == "JENKINS_C"){
                checkout poll: false,
                scm: [$class: 'GitSCM',
                    branches: [[name: GERRIT_NEWREV]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory',
                                  relativeTargetDir: GERRIT_PROJECT ]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                    url: INTERNAL_GERRIT_SSH+"/${GERRIT_PROJECT}",
                    credentialsId:'jenkins-gerrit-mtn5-key']]]
            } else {
                gerrit.cloneToBranch("https://"+GERRIT_HOST+"/"+GERRIT_PROJECT, GERRIT_NEWREV, "jenkins")
            }
        } else {
            if(JENKINS_ENV == "JENKINS_C"){
                     checkout poll: false,
                scm: [$class: 'GitSCM',
                    branches: [[name: GERIT_PATCHSET_REVISION]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory',
                        relativeTargetDir: GERRIT_PROJECT]],
                        submoduleCfg: [],
                        userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                        url: INTERNAL_GERRIT_SSH+"/${GERRIT_PROJECT}",
                        credentialsId:'jenkins-gerrit-mtn5-key']]]
            } else {
                gerrit.cloneToBranch("https://"+GERRIT_HOST+"/"+GERRIT_PROJECT, GERRIT_PATCHSET_REVISION, "jenkins")
            }
            dir("${WORKSPACE}/jenkins"){
                gerrit.rebase()
            }
        }
    }
    dir("${WORKSPACE}/jenkins"){
        stage('Code-Review'){
            def status = sh(returnStatus: true, script: "sudo -H make tests")
            if (status != 0) {
                currentBuild.result = 'FAILED'
                notify.msg("Code Review failed for ${GERRIT_PROJECT} ${GERRIT_CHANGE_NUMBER}!")
            }else{
                notify.msg("Code Review successful for ${GERRIT_PROJECT} ${GERRIT_CHANGE_NUMBER}")
            }
        }
    }
}
