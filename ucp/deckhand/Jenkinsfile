
JENKINS_VM_LAUNCH = 'local-vm-launch'

NODE_NAME="deckhand-${env.BUILD_NUMBER}"
NODE_TMPL = "deckhand/deckhand.yaml"


def funcs

try {
    node(JENKINS_VM_LAUNCH) {
        checkout poll: false,
                scm: [$class: 'GitSCM',
                branches: [[name: '$CICD_GERRIT_REFSPEC']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                    url: 'https://review.gerrithub.io/att-comdev/cicd']]]

        funcs = load "${WORKSPACE}/common/funcs.groovy"
        funcs.jenkins_slave_launch(NODE_NAME, "${env.HOME}/${NODE_TMPL}")
    }

    timeout (14) {
        node(NODE_NAME) {
            // catch if VM creation fails/hangs
            sh 'echo "Welcome $(hostname)"'
        }
    }

    node(NODE_NAME) {
        checkout poll: false,
            scm: [$class: 'GitSCM',
            branches: [[name: '$GERRIT_REFSPEC']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                url: 'https://review.gerrithub.io/att-comdev/deckhand']]]

        stage('Test Functional') {
            sh 'tox -e functional'
        }

        stage('Results Publish') {
            publishHTML (target: [
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'results',
                reportFiles: 'index.html',
                reportName: "Gabbi Functional"
            ])
        }
    }

} finally {
    node(JENKINS_VM_LAUNCH) {
        funcs.jenkins_slave_destroy(NODE_NAME)
    }
}

