
PROM_VERSION = "0.1.0-${env.BUILD_NUMBER}"
PROM_IMAGE = "ucp/promenade:${PROM_VERSION}"

ARTF_URL = env.ARTF_DOCKER_URL
ARTF_PROM_IMAGE = "${ARTF_URL}/ucp/promenade:${PROM_VERSION}"

GIT_URL = 'https://review.gerrithub.io/att-comdev/promenade'



stage('Provision Nodes'){

   def get_iface = {
       cmd = 'echo -n $(ip route | grep \"^default\" | head -1 | awk \'{print $5}\')'
       sh(returnStdout: true, script: cmd)
   }

   def get_hname = {
       cmd = 'echo -n $(hostname)'
       sh(returnStdout: true, script: cmd)
   }

   def get_ip = {
      iface ->
         def cmd = {"ifconfig ${iface} | grep 'inet addr:' | cut -d: -f2 | awk '{ print \$1}'"}
         sh(returnStdout: true, script: cmd(iface)).trim()
   }

   parallel(
   "stream 1" : {
      node ('prom-node-genesis') {
         G_IFACE = get_iface()
         G_HNAME = get_hname()
         G_IP = get_ip(G_IFACE)
      }
   },
   "stream 2" : {
      node ('prom-node-master-1') {
         M1_IFACE = get_iface()
         M1_HNAME = get_hname()
         M1_IP = get_ip(M1_IFACE)
      }
   },
   "stream 3" : {
      node ('prom-node-master-2') {
         M2_IFACE = get_iface()
         M2_HNAME = get_hname()
         M2_IP = get_ip(M2_IFACE)
      }
   },
   "stream 4" : {
      node ('prom-node-worker') {
         W_IFACE = get_iface()
         W_HNAME = get_hname()
         W_IP = get_ip(W_IFACE)
      }
   },
   "stream 5": {
      node ('prom-build-host') {
         sh 'echo Parallel building with my friends!'
     }
   })
}


stage('Promenade Build'){
   node('prom-build-host'){
      checkout poll: false,
         scm: [$class: 'GitSCM',
         branches: [[name: '$GERRIT_REFSPEC']],
         doGenerateSubmoduleConfigurations: false,
         extensions: [],
         submoduleCfg: [],
         userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                              url: GIT_URL]]]

      sh("sudo docker build -t ${PROM_IMAGE} .")
      sh "sudo docker tag ${PROM_IMAGE} ${ARTF_PROM_IMAGE}"
   }
}

stage('Promenade Publish'){
   node('prom-build-host'){
      withCredentials([usernamePassword(credentialsId: 'ArtifactoryEnterprise',
            usernameVariable: 'ARTIFACTORY_USER',
            passwordVariable: 'ARTIFACTORY_PASSWORD')]) {

         dopts = "--username \$ARTIFACTORY_USER --password \$ARTIFACTORY_PASSWORD"
         sh "sudo docker login ${dopts} ${ARTF_URL}/docker"
         sh "sudo docker push ${ARTF_PROM_IMAGE}"
      }
   }
}

stage('Promenade Config'){
   node('prom-build-host'){

      dir("${WORKSPACE}/tools") {

         sh ('cat promenade-config.yaml')

         def csub = { a, b ->
            sh ("sed -i 's|${a}|${b}|g' promenade-config.yaml")
         }

         csub('quay.io/attcomdev/promenade:latest', "${ARTF_PROM_IMAGE}")

         csub('GENESIS', G_IP)
         csub('MASTER_1', M1_IP)
         csub('MASTER_2', M2_IP)
         csub('WORKER', W_IP)

         csub('G_IFACE', G_IFACE)
         csub('M1_IFACE', M1_IFACE)
         csub('M2_IFACE', M2_IFACE)
         csub('W_IFACE', W_IFACE)

         csub('G_HOSTNAME', G_HNAME)
         csub('M1_HOSTNAME', M1_HNAME)
         csub('M2_HOSTNAME', M2_HNAME)
         csub('W_HOSTNAME', W_HNAME)

         sh ('cat promenade-config.yaml')

         def prom_cmd = 'promenade -v generate -c /tools/promenade-config.yaml -o /tools/generated_configs'
         def result = sh(returnStatus: true,
            script: "sudo docker run --rm -v \$(pwd):/tools ${PROM_IMAGE} ${prom_cmd}")
         if(result != 0){
            error('Failed to generate Promenade config')
         }

         sh ('sudo tar -cvf configs.tar generated_configs')
         archiveArtifacts artifacts: 'configs.tar'

         // copy configs to all nodes
         def scp_copy = { ip ->
            opts = '-i /home/ubuntu/jenkins-slave-keypair.pem -o StrictHostKeyChecking=no'
            sh ("scp ${opts} configs.tar ${ip}:\$HOME")
         }
         scp_copy(G_IP)
         scp_copy(M1_IP)
         scp_copy(M2_IP)
         scp_copy(W_IP)
      }

   }
}

node('prom-node-genesis') {
   stage('Genesis Setup') {

      sh ('tar -xvf /home/ubuntu/configs.tar')

      dir("${WORKSPACE}/generated_configs") {
         sh ('sudo bash up.sh $(hostname).yaml')
      }
   }

   stage('Genesis Validate') {
      dir("${WORKSPACE}/generated_configs") {
         // waits for k8s API to be ready
         // launches a pod and verifies it comes up
         // not yet checking specific components
         sh ('sudo bash validate-bootstrap.sh')
      }
   }
}

stage ('Masters Join') {
   parallel(
   "stream 1": {
      node('prom-node-master-1') {
         sh ('tar -xvf /home/ubuntu/configs.tar')

         dir("${WORKSPACE}/generated_configs") {
            sh ('sudo bash up.sh $(hostname).yaml')
         }
      }
   },
   "stream 2": {
      node('prom-node-master-2') {
         sh ('tar -xvf /home/ubuntu/configs.tar')

         dir("${WORKSPACE}/generated_configs") {
            sh ('sudo bash up.sh $(hostname).yaml')
         }
      }
   })
}

stage ('Worker Join') {
   node('prom-node-worker') {
      sh ('tar -xvf /home/ubuntu/configs.tar')

      dir("${WORKSPACE}/generated_configs") {
         sh ('sudo bash up.sh $(hostname).yaml')
      }
   }
}

stage('Cluster Validate') {
   node('prom-node-genesis') {
      dir("${WORKSPACE}/generated_configs") {
         // similar to bootstrap but creates 4 pods instead
         sh ('sudo bash validate-cluster.sh')
      }
      sh ('kubectl get pods --all-namespaces')
   }
}

