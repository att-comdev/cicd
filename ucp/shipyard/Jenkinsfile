
JENKINS_VM_LAUNCH='local-vm-launch'

NODE_NAME="genesis-single-${env.BUILD_NUMBER}"
NODE_TMPL="integration/genesis-single.yaml"

CEPH_CHART_REPO='https://git.openstack.org/openstack/openstack-helm'

DRYDOCK_CHART_REPO='https://github.com/sh8121att/helm_charts'
DRYDOCK_CHART_BRANCH='975de88007b0a2753c430f2339d8d7553c34584d'

MAAS_CHART_REPO='https://github.com/sh8121att/helm_charts'

DRYDOCK_IMAGE='quay.io/attcomdev/drydock:master'
ARMADA_IMAGE='quay.io/attcomdev/armada:master'
PROMENADE_IMAGE='quay.io/attcomdev/promenade:v0.2.2'

DECKHAND_IMAGE = 'quay.io/attcomdev/deckhand:latest'
DECKHAND_CHART_REPO = 'https://review.gerrithub.io/att-comdev/aic-helm'


def funcs

try {
    node(JENKINS_VM_LAUNCH) {
        checkout poll: false,
                scm: [$class: 'GitSCM',
                branches: [[name: 'master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                    url: 'https://review.gerrithub.io/att-comdev/cicd']]]

        funcs = load "${WORKSPACE}/common/funcs.groovy"
        funcs.jenkins_slave_launch(NODE_NAME, "${env.HOME}/${NODE_TMPL}")
    }
    

    node(NODE_NAME) {
        stage ("Genesis Deploy") {
            checkout poll: false,
                scm: [$class: 'GitSCM',
                branches: [[name: '$GERRIT_REFSPEC']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                    url: 'https://review.gerrithub.io/att-comdev/ucp-integration']]]


            def get_ip = {
               iface ->
                  def cmd = {"ifconfig ${iface} | grep 'inet addr:' | cut -d: -f2 | awk '{ print \$1}'"}
                  sh(returnStdout: true, script: cmd(iface)).trim()
            }

            def get_hname = {
                return sh(returnStdout: true, script: "echo -n \$(hostname)")
            }
            
            CEPH_CLUSTER_NET = '10.0.0.0/24'
            CEPH_PUBLIC_NET = '10.0.0.0/24'

            NODE_NET_IFACE = 'ens3' // ens3 for VMs

            GENESIS_NODE_IP = get_ip('ens3')
            GENESIS_NODE_NAME = get_hname()

            sh "sudo sh -c 'echo ${GENESIS_NODE_IP} ${GENESIS_NODE_NAME} >> /etc/hosts'"

            withEnv(["CEPH_CLUSTER_NET=${CEPH_CLUSTER_NET}",
                     "CEPH_PUBLIC_NET=${CEPH_PUBLIC_NET}",
                     "NODE_NET_IFACE=${NODE_NET_IFACE}",
                     "GENESIS_NODE_IP=${GENESIS_NODE_IP}",
                     "MASTER_NODE_IP=10.10.10.10",
                     "GENESIS_NODE_NAME=${GENESIS_NODE_NAME}",
                     "MASTER_NODE_NAME=anything",
                     "PROMENADE_IMAGE=${PROMENADE_IMAGE}",
                     "ARMADA_IMAGE=${ARMADA_IMAGE}",
                     "CEPH_CHART_REPO=${CEPH_CHART_REPO}",
                     "DRYDOCK_CHART_REPO=${DRYDOCK_CHART_REPO}",
                     "DRYDOCK_CHART_BRANCH=${DRYDOCK_CHART_BRANCH}",
                     "MAAS_CHART_REPO=${MAAS_CHART_REPO}",
                     "DECKHAND_IMAGE=${DECKHAND_IMAGE}",
                     "DECKHAND_CHART_REPO=${DECKHAND_CHART_REPO}",
                     "DRYDOCK_IMAGE=${DRYDOCK_IMAGE}"]) {

                dir("${WORKSPACE}/manifests/basic_ucp") {
                    timeout (30) {
                        sh 'sudo -E bash deploy_ucp.sh'
                        sh 'kubectl get pods --all-namespaces -o wide'
                    }
                }
            }
        } // stage
    } // node

} finally {
    node(JENKINS_VM_LAUNCH) {
        funcs.jenkins_slave_destroy(NODE_NAME)
    }
}

