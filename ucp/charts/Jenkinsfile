VM_HOST = 'master'
NODE_NAME="charts-${env.BUILD_NUMBER}"
NODE_TMPL = "openstack-helm/openstack-helm.yaml"
ARTF_URL = env.ARTF_WEB_URL
CURRENT_VERSION = "0.1.0.${env.GERRIT_CHANGE_NUMBER}"
PS_ARTF_REPO = "charts/ucp/ps/"+CURRENT_VERSION
ARTF_REPO = "charts/ucp/"+CURRENT_VERSION
def funcs

try{
    stage('Spawn Chart Node'){
        node(VM_HOST) {
            checkout poll: false,
            scm: [$class: 'GitSCM',
                  branches: [[name: '*/master']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [],
                  submoduleCfg: [],
                  userRemoteConfigs: [[url: 'https://review.gerrithub.io/att-comdev/cicd']]]

                funcs = load "${WORKSPACE}/common/funcs.groovy"
                funcs.jenkins_slave_launch(NODE_NAME, "${env.HOME}/${NODE_TMPL}")
        }
    }
    stage('Nodes Wait'){
        timeout (10) {
            node (NODE_NAME) {
                echo "Verifying that Jenkins node comes up."
            }
        }
    }
    node(NODE_NAME) {
        stage('Checkout') {
                checkout poll: false,
                scm: [$class: 'GitSCM',
                    branches: [[name: '$GERRIT_REFSPEC']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                        url: 'https://git.openstack.org/openstack/openstack-helm']]]
        }
        stage('OSH Charts') {
            sh "Make all"
        }
    }
} finally {
    stage('Delete Jenkins Node'){
       node(JENKINS_VM_LAUNCH) {
           funcs.jenkins_slave_destroy(NODE_NAME)
        }
    }
}

