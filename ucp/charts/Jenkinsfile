JENKINS_VM_LAUNCH = 'chart-vm-launch'
NODE_NAME="charts-${env.BUILD_NUMBER}"
NODE_TMPL = "openstack-helm/openstack-helm.yaml"
ARTF_URL = env.ARTF_WEB_URL
CURRENT_VERSION = "0.1.0.${env.GERRIT_CHANGE_NUMBER}"
PS_ARTF_REPO = "charts/ucp/ps/"+CURRENT_VERSION
ARTF_REPO = "charts/ucp/"+CURRENT_VERSION
def funcs

try{
    stage('Spawn Chart Node'){
        node(JENKINS_VM_LAUNCH) {
            checkout poll: false,
            scm: [$class: 'GitSCM',
                  branches: [[name: '*/master']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [],
                  submoduleCfg: [],
                  userRemoteConfigs: [[url: 'https://review.gerrithub.io/att-comdev/cicd']]]

                funcs = load "${WORKSPACE}/common/funcs.groovy"
                funcs.jenkins_slave_launch(NODE_NAME, "${env.HOME}/${NODE_TMPL}")
        }
    }
    stage('Nodes Wait'){
        timeout (10) {
            node (NODE_NAME) {
                echo "Verifying that Jenkins node comes up."
            }
        }
    }
    node(NODE_NAME) {
        ansiColor('xterm') {
            stage('Checkout') {
                checkout poll: false,
                scm: [$class: 'GitSCM',
                    branches: [[name: '$GERRIT_REFSPEC']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                        url: 'https://git.openstack.org/openstack/openstack-helm']]]
            }
            stage('OSH Charts') {
                try {
                        sh "Make all"
                    }
                    def server = Artifactory.server 'artifactory'
                    if ( "${GERRIT_EVENT_TYPE}" == 'change-merged' || "$GERRIT_EVENT_TYPE" =='change-merged' ){
                        withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
                            usernameVariable: 'ARTIFACTORY_USER',
                            passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                            def uploadSpec = """{"files": [{"pattern": "*-0.1.0.tgz",
                                                            "target": "$ARTF_REPO/"
                                                }]}"""
                            server.upload(uploadSpec)
                        }
                    } else {
                        withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
                            usernameVariable: 'ARTIFACTORY_USER',
                            passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                            def uploadSpec = """{"files": [{"pattern": "*-0.1.0.tgz",
                                                            "target": "$PS_ARTF_REPO/"
                                                }]}"""
                            server.upload(uploadSpec)
                        }
                    }
                } finally {
                    stage('Publish Logs'){
                        node(NODE_NAME){
                            try {
                                sh 'mkdir -p logs'
                                sh 'tar -cf logs-basic-$BUILD_NUMBER.tgz logs'
                                nexusArtifactUploader artifacts: [[ artifactId: 'org.openstack.helm',
                                                                    classifier: '',
                                                                    file: 'logs-basic-$BUILD_NUMBER.tgz',
                                                                    type: 'x-gtar']],
                                                    credentialsId: 'nexus3',
                                                    groupId: 'openstack-helm',
                                                    nexusUrl: '$NEXUS3_URL',
                                                    nexusVersion: 'nexus3',
                                                    protocol: 'http',
                                                    repository: 'att-comdev-jenkins-logs',
                                                    version: '$BUILD_NUMBER'
                            } catch (Exception e) {
                            // ignore artifactory errors for now
                            }
                        }
                    }
                }
            }
        }
    }
} finally {
    stage('Delete Jenkins Node'){
       node(JENKINS_VM_LAUNCH) {
           funcs.jenkins_slave_destroy(NODE_NAME)
        }
    }
}