PROJECT_NAME = GERRIT_PROJECT.tokenize('/').last()
NODE_NAME = "charts-${PROJECT_NAME}-${BUILD_NUMBER}"
NODE_TMPL = "charts/ubuntu.m1.medium.yaml"
CURRENT_VERSION = "0.1.0.${GERRIT_CHANGE_NUMBER}"
currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"

//bash script start:
def build_charts = '''

    helm_install(){

        sudo apt-get install -y --no-install-recommends git make curl ca-certificates
        TMP_DIR="$(mktemp -d)"
        URL="https://artifacts-aic.atlantafoundry.com/artifactory/googleapis-helm/helm-v2.7.2-linux-amd64.tar.gz"
        curl -sSL ${URL} | tar -zxv --strip-components=1 -C ${TMP_DIR}
        sudo mv -v ${TMP_DIR}/helm /usr/local/bin/helm
    }

    helm_serve(){
        helm init --client-only
        if [ -z "$(curl -s 127.0.0.1:8879 | grep 'Helm Repository')" ]; then
            helm serve & > /dev/null
            while [ -z "$(curl -s 127.0.0.1:8879 | grep 'Helm Repository')" ]; do
                sleep 1
                echo "Waiting for Helm Repository"
            done
        fi

        if helm repo list | grep -q "^stable" ; then
            helm repo remove stable
        fi

        helm repo add local http://localhost:8879/charts
    }

    cleanup(){
        rm -rf build && mkdir build
    }

    prepare_env(){
        git clone -q --depth 1 https://git.openstack.org/openstack/openstack-helm.git
        cd openstack-helm
        helm_install
        helm_serve
        make helm-toolkit
    }

    helm_pkg(){
        #Some projects fail to create charts with make or don't have Makefile,
        #I want to create and upload their charts anyway:
        for i in $(ls charts | grep -v '.tgz'); do
            helm dep up charts/${i}
            helm package charts/${i}
        done
    }

    make_charts(){
        echo '############### Building Charts ######################'
        set -xe
        cd ${WDIR}
        if [ -f Makefile ]; then
            make charts
        else
            helm_pkg
        fi
        echo '#################### Done! ###########################'

    }

    set -e # script will fail on any error
    WDIR=`pwd`
    cleanup && cd build
    prepare_env
    make_charts
    '''
/* end of bash script. */

node("att-comdev-charts"){
    stage('Project Checkout'){
        cleanWs()
        if(env.GERRIT_NEWREV){
            gerrithub.cloneToBranch(GERRIT_PROJECT, env.GERRIT_NEWREV, "jenkins")
        } else {
            gerrithub.cloneToBranch(GERRIT_PROJECT, GERRIT_REFSPEC, "jenkins")
            dir("${WORKSPACE}/jenkins"){
                gerrithub.rebase()
            }
        }
        dir("${WORKSPACE}/jenkins"){
            def file_location=""
            //Remove after divingbell is updated
            if("${JOB_BASE_NAME}" == "divingbell"){
                file_location = "${JOB_BASE_NAME}/Chart.yaml"
            } else {
                file_location = "charts/${JOB_BASE_NAME}/Chart.yaml"
            }
            GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
            def chartVersion = readYaml file: file_location
            def chartOverride = readYaml file: file_location, text: "version: 0.9.${BUILD_NUMBER}-"+GIT_COMMIT
            sh "sudo rm -rf ${file_location}"
            writeYaml file: file_location, data: chartOverride
        }
    }
    dir("${WORKSPACE}/jenkins"){
        stage('Make and Publish Charts'){
            def status = sh(returnStatus: true, script: build_charts)
            if (status != 0) {
                currentBuild.result = 'FAILED'
                notify.msg("Charts build failed for ${GERRIT_CHANGE_NUMBER}!")
            }else{
                notify.msg("Charts were built for ${GERRIT_CHANGE_NUMBER}")
            }
            if(status == 0){
                if ( GERRIT_EVENT_TYPE == 'change-merged' ){
                    ARTF_REPO="charts/att-comdev/${JOB_BASE_NAME}/"
                } else {
                    ARTF_REPO="charts/att-comdev/patchsets/${JOB_BASE_NAME}/"
                }

                sh "find . -iname 'helm-toolkit*.tgz' -delete"

                def server = Artifactory.server 'artifactory'
                def uploadSpec = """{"files": [{"pattern":"*${JOB_BASE_NAME}*0.9.${BUILD_NUMBER}*.tgz","target":"${ARTF_REPO}"}]}"""
                server.upload(uploadSpec)
                if ( GERRIT_EVENT_TYPE == 'change-merged' ){
                    publish.setProperty ('jenkins-artifactory', '${ARTF_API_URL}/clcp-manifests', "${RELEASE_CURRENT_KEY}=${ARTF_WEB_URL}/${ARTF_REPO}${JOB_BASE_NAME}-0.9.${BUILD_NUMBER}-${GIT_COMMIT}.tgz")
                    publish.setProperty ('jenkins-artifactory', '${ARTF_API_URL}/clcp-manifests', "${RELEASE_STATUS_KEY}=NoStatus")
                }
                notify.msg("Charts from ${GERRIT_PROJECT} pushed to ${ARTF_REPO}")
            }
        }
    }
}