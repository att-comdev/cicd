currentBuild.displayName = "#${BUILD_NUMBER} master"
GIT_COMMIT=""

vm(flavor: 'm1.xxlarge') {
    stage('Setup environment'){
        vm2.setproxy()
    }

    stage('Install Helm'){
        osh.cloneOSH()
        sh 'sudo apt-get update'
        sh 'sudo apt-get install -y make curl'

        osh.updateProxy()
        dir("${WORKSPACE}/openstack-helm-infra") {
            HELM_TOOLKIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
            sh 'make dev-deploy setup-host'
            sh 'make dev-deploy k8s'
        }
    }

    stage('Project Checkout'){
        if ("${GERRIT_EVENT_TYPE}" == "patchset-created"){
            gerrit.cloneToBranch("https://review.gerrithub.io/att-comdev/charts",
                                 GERRIT_PATCHSET_REVISION,
                                 GERRIT_PROJECT)
        } else {
            gerrit.cloneToBranch("https://review.gerrithub.io/att-comdev/charts",
                                 GERRIT_NEWREV,
                                 GERRIT_PROJECT)
        }
        dir("${WORKSPACE}/${GERRIT_PROJECT}"){
            //gerrit.rebase()
            GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
            file_location = "${JOB_BASE_NAME}/Chart.yaml"
            def chartVersion = readYaml file: file_location
            def chartOverride = readYaml file: file_location, text: "version: 0.9.${BUILD_NUMBER}-"+GIT_COMMIT
            sh "sudo rm -rf ${file_location}"
            writeYaml file: file_location, data: chartOverride
        }
    }

    stage('Build & Package'){
        dir("${WORKSPACE}/${GERRIT_PROJECT}"){
            sh 'helm repo add stable https://kubernetes-charts.storage.googleapis.com/'
            sh 'helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/'
            sh "cp ${WORKSPACE}/openstack-helm-infra/Makefile ${WORKSPACE}/${GERRIT_PROJECT}/Makefile"
            def status = sh(returnStatus: true, script: "make all")
            if (status != 0) {
                currentBuild.result = 'FAILED'
                error "Charts build failed for ${GIT_COMMIT}!"
            }else{
                print "Charts were built for ${GIT_COMMIT}"
            }
        }
        stage('Publish'){
            if ( GERRIT_EVENT_TYPE == 'change-merged' ){
                ARTF_REPO="charts/att-comdev/${JOB_BASE_NAME}/"
            } else {
                ARTF_REPO="charts/att-comdev/patchsets/${JOB_BASE_NAME}/"
            }

            artifactory.upload("${JOB_BASE_NAME}*.tgz", "${ARTF_REPO}/${JOB_BASE_NAME}/")
            print "Chart for ${GIT_COMMIT}.${HELM_TOOLKIT_COMMIT} pushed to ${ARTF_REPO}/JOB_BASE_NAME/"

         }
    }
    stage('Deploy chart'){
        withEnv(['OS_REGION_NAME=',
                 'OS_USERNAME=',
                 'OS_PASSWORD=',
                 'OS_PROJECT_NAME=',
                 'OS_PROJECT_DOMAIN_NAME=',
                 'OS_USER_DOMAIN_NAME=',
                 'OS_AUTH_URL=',
                 "OSH_EXTRA_HELM_ARGS=--values=${WORKSPACE}/openstack-helm/tools/overrides/releases/ocata/loci.yaml"]) {

            dir("${WORKSPACE}/openstack-helm"){
                // artifactory has dependency on rados
                // jenkins has dependency on keystone
                def deploy_steps = ['Clients'    : '020-setup-client.sh',
                                    'Ingress'    : '030-ingress.sh',
                                    'Ceph'       : '040-ceph.sh',
                                    'Ceph NS'    : '045-ceph-ns-activate.sh',
                                    'MariaDB'    : '050-mariadb.sh',
                                    'RabbitMQ'   : '060-rabbitmq.sh',
                                    'Memcached'  : '070-memcached.sh',
                                    'Keystone'   : '080-keystone.sh',
                                    'Rados GW'   : '110-ceph-radosgateway.sh']
                deploy_steps.each { key, value ->
                    print "Installing $key..."
                    sh "./tools/deployment/developer/ceph/${value}"
                }
            }

            dir("${WORKSPACE}/${GERRIT_PROJECT}"){
                sh "helm install --name ${JOB_BASE_NAME} ${JOB_BASE_NAME}*.tgz"
            }
        }
    }
}
