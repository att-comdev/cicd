import att.comdev.cicd.config.conf

currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"

ARTF_REPO="att-comdev-helm-local/charts"
CHARTS_URL = "https://review.gerrithub.io/att-comdev/charts"
HELM_REPO = conf.HELM_REPO
GIT_COMMIT = ""
HELM_TOOLKIT_COMMIT = ""
CHARTS_HOME = ""

FLAVOR = 'm1.xlarge'

vm(flavor: FLAVOR) {
    stage('Setup environment'){
        vm2.setproxy()
    }

    stage('Deploy Kubernetes AIO'){
        CHARTS_HOME = "${WORKSPACE}/charts"
        HELM_TOOLKIT_COMMIT = osh.deployK8sAIO()

        // allow s3 admin user and bucket creation
        def file_location = "${WORKSPACE}/openstack-helm-infra/ceph-rgw/values.yaml"
        def chartOverride = readYaml file: file_location
        chartOverride.conf.rgw_s3.enabled = true
        sh "sudo rm -rf ${file_location}"
        writeYaml file: file_location, data: chartOverride
    }

    stage('Project Checkout'){
        if (JOB_BASE_NAME == "openstack-helm-infra"){
            gerrit.cloneProject(CHARTS_URL,
                                GERRIT_BRANCH,
                                "refs/heads/${GERRIT_BRANCH}",
                                CHARTS_HOME)
        } else if (JOB_BASE_NAME != "openstack-helm-infra" &&
                   (GERRIT_EVENT_TYPE == "patchset-created" ||
                    GERRIT_EVENT_TYPE == "comment-added")){
            gerrit.cloneToBranch(CHARTS_URL,
                                 GERRIT_PATCHSET_REVISION,
                                 CHARTS_HOME)
        } else {
            gerrit.cloneToBranch(CHARTS_URL,
                                 GERRIT_NEWREV,
                                 CHARTS_HOME)
        }
        dir(CHARTS_HOME){
            GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        }
    }

    dir(CHARTS_HOME){
        stage('Build & Package'){
            HELM_REPO.each { entry -> sh "helm repo add $entry.key $entry.value" }

            // build all charts for openstack-helm-infra
            def cmd = (JOB_BASE_NAME == "openstack-helm-infra") ? "make all" : "make ${JOB_BASE_NAME}"
            def status = sh(returnStatus: true, script: cmd)
            if (status != 0) {
                currentBuild.result = 'FAILED'
                error "Charts build failed for ${GIT_COMMIT}!"
            }else{
                print "Charts were built for ${GIT_COMMIT}"
            }
        }

        stage('Rename tarballs'){
            def cmd = 'rename "s/[0-9].[0-9].[0-9]/'+GIT_COMMIT+'.'+HELM_TOOLKIT_COMMIT+'/g" *.tgz'
            echo (cmd)
            sh(returnStatus:false, script: cmd)
        }

        stage('Deploy Openstack Infra'){
            // unset Openstack infra OS_* defaults
            // disable network policy until charts in att-comdev/charts support it
            withEnv(['OS_REGION_NAME=',
                     'OS_USERNAME=',
                     'OS_PASSWORD=',
                     'OS_PROJECT_NAME=',
                     'OS_PROJECT_DOMAIN_NAME=',
                     'OS_USER_DOMAIN_NAME=',
                     'OS_AUTH_URL=',
                     "OSH_EXTRA_HELM_ARGS=--values=${WORKSPACE}/openstack-helm/tools/overrides/releases/ocata/loci.yaml --set manifests.network_policy=false"]) {
                osh.installOSHLite()
            }
        }

        stage('Deploy Chart(s)'){
            // Deploy the built chart(s)
            charts = sh(returnStdout: true, script: "ls *${GIT_COMMIT}*.tgz").trim()
            print "charts is ${charts}"
            for (chart in charts.split()) {
                chart_name = chart.split("-${GIT_COMMIT}")[0]

                // deploy in openstack namespace having keystone
                sh "helm install --name ${chart_name} --namespace openstack ${chart_name}*.tgz"

                // wait 30 min for pods to come up
                sh "${WORKSPACE}/openstack-helm/tools/deployment/common/wait-for-pods.sh openstack 1800"

                sh "helm status ${chart_name}"

                // delete chart to free up resources prior to installing another chart
                sh "helm delete --purge ${chart_name}"

                // wait 5 min for pods to terminate
                sh "${WORKSPACE}/openstack-helm/tools/deployment/common/wait-for-pods.sh openstack 300"
            }
        }

        stage('Publish'){
            if("${GERRIT_EVENT_TYPE}" != "change-merged"){
                ARTF_REPO="${ARTF_REPO}/test"
            }
            publish.putArtifacts("*${GIT_COMMIT}.*.tgz", "${ARTF_REPO}/")
        }
    }
}
