PROJECT_NAME = GERRIT_PROJECT.tokenize('/').last()
NODE_NAME = "charts-${PROJECT_NAME}-${BUILD_NUMBER}"
NODE_TMPL = "charts/ubuntu.m1.medium.yaml"
CURRENT_VERSION = "0.1.0.${GERRIT_CHANGE_NUMBER}"
currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"

//bash script start:
def build_charts = '''

    record_fail(){
        echo -e "\n project $1 failed: " | tee -a ${failed_log}
        cat ${job_log} | tee -a ${failed_log}
    }

    make_charts(){
        echo '############### Building Charts ######################'
        cd ${WDIR}
        make charts &> ${job_log} || record_fail
        echo '#################### Done! ###########################'

    }

    WDIR=`pwd`
    job_log=${WDIR}/job.log
    failed_log=${WDIR}/failed.log
    make_charts

    if [ -f $failed_log ]; then
        cat $failed_log
        exit 1
    fi
    '''
/* end of bash script. */

vm(NODE_NAME,NODE_TMPL){
    stage('Project Checkout'){
        gerrithub.clone(GERRIT_PROJECT,GERRIT_REFSPEC)
    }
    stage('Get helm'){
        sh '''
            TMP_DIR="$(mktemp -d)"
            HELM_VERSION=${HELM_VERSION:-"v2.7.2"}
            URL="https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz"
            curl -sSL ${URL} | tar -zxv --strip-components=1 -C ${TMP_DIR}
            sudo mv -v ${TMP_DIR}/helm /usr/local/bin/helm
        '''
        }
    stage('Make Charts'){
        def status = sh(returnStatus: true, script: build_charts)
        if (status != 0) {
            currentBuild.result = 'FAILED'
            slack.msg("Charts build failed for ${GERRIT_CHANGE_NUMBER}!")
        }else{
            slack.msg("Charts were built for ${GERRIT_CHANGE_NUMBER}")
        }
    }
    stage('Publish'){
        if ( GERRIT_EVENT_TYPE == 'change-merged' ){
            ARTF_REPO="ucp/charts/${PROJECT_NAME}/"
        } else {
            ARTF_REPO="ucp/charts/ps/${GERRIT_CHANGE_NUMBER}/"
        }

        // we don't need helm-toolkit.tgz here.
        sh "find . -iname 'helm-toolkit*.tgz' -delete"

        def server = Artifactory.server 'artifactory'
        def uploadSpec = """{"files": [{"pattern":"*.tgz","target":"${ARTF_REPO}"}]}"""
        server.upload(uploadSpec)
        slack.msg("Charts from ${GERRIT_PROJECT} pushed to ${ARTF_REPO}")
    }
}
