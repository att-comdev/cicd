currentBuild.displayName = "#${BUILD_NUMBER} master"
GIT_COMMIT=""
HELM_TOOLKIT_COMMIT=""
ARTF_REPO="att-comdev-helm-local/patchsets"
CHARTS_URL="https://review.gerrithub.io/att-comdev/charts"

vm(flavor: 'm1.xxlarge') {
    stage('Setup environment'){
        vm2.setproxy()
    }

    stage('Install Helm'){
        HELM_TOOLKIT_COMMIT = osh.installHelm()

        // workarounds till upstream openstack-helm is fixed to allow user creation

        // temp fix to create s3_admin user
        file_location = "openstack-helm-infra/ceph-rgw/values.yaml"
        def chartOverride = readYaml file: file_location
        chartOverride.conf.rgw_s3.enabled = true
        sh "sudo rm -rf ${file_location}"
        writeYaml file: file_location, data: chartOverride
        sh "cat ${file_location}"

        // temp fix for user creation
        // checkout commit older than following ps enforcing network policy for openstack-helm
        // https://github.com/openstack/openstack-helm/commit/29f32a07acde592dbd5194392338376a55d7e4ef
        dir("${WORKSPACE}/openstack-helm"){
            sh 'git fetch https://git.openstack.org/openstack/openstack-helm refs/changes/81/610481/11 && git checkout FETCH_HEAD'
        }
    }

    stage('Project Checkout'){
        if (JOB_BASE_NAME == "openstack-helm-infra"){
            gerrit.cloneToBranch(CHARTS_URL,
                                  GERRIT_BRANCH,
                                 "refs/heads/${GERRIT_BRANCH}",
                                 "jenkins")
        } else if (JOB_BASE_NAME != "openstack-helm-infra" &&
                   (GERRIT_EVENT_TYPE == "patchset-created" ||
                    GERRIT_EVENT_TYPE == "comment-added")){
            gerrit.cloneToBranch(CHARTS_URL,
                                 GERRIT_PATCHSET_REVISION,
                                 "jenkins")
        } else {
            gerrit.cloneToBranch(CHARTS_URL,
                                 GERRIT_NEWREV,
                                 "jenkins")
        }
        dir("${WORKSPACE}/jenkins"){
            GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        }
    }

    stage('Build & Package'){
        dir("${WORKSPACE}/jenkins"){
            sh 'helm repo add stable https://kubernetes-charts.storage.googleapis.com/'
            sh 'helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/'
            sh "cp ${WORKSPACE}/openstack-helm-infra/Makefile ${WORKSPACE}/jenkins/Makefile"
            def cmd = (JOB_BASE_NAME == "openstack-helm-infra") ? "make all" : "make ${JOB_BASE_NAME}"
            def status = sh(returnStatus: true, script: cmd)
            if (status != 0) {
                currentBuild.result = 'FAILED'
                error "Charts build failed for ${GIT_COMMIT}!"
            }else{
                print "Charts were built for ${GIT_COMMIT}"
            }
        }
    }

    stage('Rename tarballs'){
        dir("${WORKSPACE}/jenkins"){
            def cmd = 'rename "s/[0-9].[0-9].[0-9]/'+GIT_COMMIT+'.'+HELM_TOOLKIT_COMMIT+'/g" *.tgz'
            echo (cmd)
            sh(returnStatus:false, script: cmd)
        }
    }

    stage('Publish'){
        dir("${WORKSPACE}/jenkins"){
            charts = sh(returnStdout: true, script: "ls *${GIT_COMMIT}*.tgz").trim()
            print "charts is ${charts}"
            for (chart in charts.split()) {
                chart_name = chart.split("-${GIT_COMMIT}")[0]
                artifactory.upload("*${chart_name}-${GIT_COMMIT}*.tgz", "${ARTF_REPO}/${chart_name}/")
                print "Chart for $chart_name-${GIT_COMMIT}.${HELM_TOOLKIT_COMMIT} pushed to ${ARTF_REPO}/${chart_name}/"
            }
        }
    }

    stage('Deploy chart'){
        withEnv(['OS_REGION_NAME=',
                 'OS_USERNAME=',
                 'OS_PASSWORD=',
                 'OS_PROJECT_NAME=',
                 'OS_PROJECT_DOMAIN_NAME=',
                 'OS_USER_DOMAIN_NAME=',
                 'OS_AUTH_URL=',
                 "OSH_EXTRA_HELM_ARGS=--values=${WORKSPACE}/openstack-helm/tools/overrides/releases/ocata/loci.yaml"]) {

            dir("${WORKSPACE}/openstack-helm"){
                // artifactory has dependency on rados
                // jenkins has dependency on keystone
                def deploy_steps = ['Clients'    : '020-setup-client.sh',
                                    'Ingress'    : '030-ingress.sh',
                                    'Ceph'       : '040-ceph.sh',
                                    'Ceph NS'    : '045-ceph-ns-activate.sh',
                                    'MariaDB'    : '050-mariadb.sh',
                                    'RabbitMQ'   : '060-rabbitmq.sh',
                                    'Memcached'  : '070-memcached.sh',
                                    'Keystone'   : '080-keystone.sh',
                                    'Rados GW'   : '110-ceph-radosgateway.sh']
                deploy_steps.each { key, value ->
                    print "Installing $key..."
                    sh "./tools/deployment/developer/ceph/${value}"
                }
            }

            dir("${WORKSPACE}/jenkins"){
                charts = sh(returnStdout: true, script: "ls *${GIT_COMMIT}*.tgz").trim()
                print "charts is ${charts}"
                for (chart in charts.split()) {
                    chart_name = chart.split("-${GIT_COMMIT}")[0]

                    // deploy in openstack namespace running keystone service
                    sh "helm install --name ${chart_name} --namespace openstack ${chart_name}*.tgz"

                    // wait for pods
                    sh "${WORKSPACE}/openstack-helm/tools/deployment/common/wait-for-pods.sh openstack"

                    sh "helm status ${chart_name}"
                }
            }
        }
    }
}
