currentBuild.displayName = "#${BUILD_NUMBER}-${GERRIT_EVENT_TYPE}"
UTILS_COMMIT=""

vm(flavor: "m1.xlarge"){
    sh ('hostname')
    stage('Setup environment'){
        vm2.setproxy()
    }

    stage('Infra Helm Checkout'){

        if ("${GERRIT_PROJECT}" == "${INFRA_PROJECT}" && "${GERRIT_EVENT_TYPE}" == "change-merged"){
            sh 'echo Openstack-helm-infra ${GERRIT_NEWREV} just merged'
            gerrit.cloneToBranch("https://git.openstack.org/${INFRA_PROJECT}", "${GERRIT_NEWREV}","openstack-helm-infra")
            dir("${WORKSPACE}/openstack-helm-infra"){
                HELM_TOOLKIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short=12 HEAD').trim()
            }
        }else {
            sh 'mkdir -p openstack-helm-infra'
            dir("${WORKSPACE}/openstack-helm-infra") {
                git branch: "master", url: "https://git.openstack.org/${INFRA_PROJECT}"
                sh "git checkout ${OPENSTACK_HELM_INFRA_COMMIT}"
                HELM_TOOLKIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short=12 HEAD').trim()
            }
        }
    }
    stage('Install K8s-Helm'){
        sh 'sudo apt-get update'
        sh 'sudo apt-get install -y make curl'
        osh.updateProxy()

        dir("${WORKSPACE}/openstack-helm-infra") {
            sh 'make dev-deploy setup-host'
            sh 'make dev-deploy k8s'
        }
    }

    stage('Utils Checkout'){
        if ("${GERRIT_PROJECT}" == "${UTILS_PROJECT}" && "${GERRIT_EVENT_TYPE}" != "change-merged") {
            sh 'echo Airship-utils commit SHA: ${GERRIT_PATCHSET_REVISION}'
            gerrit.cloneToBranch("https://git.openstack.org/${UTILS_PROJECT}", "${GERRIT_PATCHSET_REVISION}", "${JOB_BASE_NAME}")
        }else if("${GERRIT_PROJECT}" == "${UTILS_PROJECT}" && "${GERRIT_EVENT_TYPE}" == "change-merged"){
            sh 'echo Airship-utils commit SHA: ${GERRIT_NEWREV}'
            gerrit.cloneToBranch("https://git.openstack.org/${UTILS_PROJECT}", "${GERRIT_NEWREV}", "${JOB_BASE_NAME}")
        }else{
            gerrit.cloneProject("https://git.openstack.org/${UTILS_PROJECT}", "master", "","${JOB_BASE_NAME}")
        }
        dir("${WORKSPACE}/${JOB_BASE_NAME}"){
            UTILS_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short=12 HEAD').trim()
            sh "echo Chart version: ${UTILS_COMMIT}.${HELM_TOOLKIT_COMMIT}"
        }
    }

    dir("${WORKSPACE}/${JOB_BASE_NAME}"){
        stage('Build & Package'){
            charts = sh(returnStdout: true, script: "ls charts/.").trim()
            echo("charts is ${charts}")
            for (chart in charts.split()) {
                status_build = sh(returnStatus: true, script: "helm dep up charts/${chart} && helm package charts/${chart}")
                if (status_build != 0) {
                    currentBuild.result = 'FAILED'
                    notify.msg("Charts build failed for airship-utils SHA: ${UTILS_COMMIT} " +
                            "and Helm toolkit SHA: ${HELM_TOOLKIT_COMMIT}")
                }else{
                    notify.msg("Charts were built for airship-utils SHA: ${UTILS_COMMIT} " +
                            "and Helm toolkit SHA: ${HELM_TOOLKIT_COMMIT}")
                }
            }
        }

        stage('Rename tarballs') {

            sh("rename s/0.1.0/${UTILS_COMMIT}.${HELM_TOOLKIT_COMMIT}/g ./*")
        }

        stage('Install Charts') {
            hostname = sh(returnStdout: true, script: 'hostname').trim()
            sh "kubectl label node ${hostname} ucp-control-plane=enabled"
            for (chart in charts.split()) {
                sh "helm install --name ${chart} ${chart}*.tgz"
                sh "sleep 15m"
                sh "helm status ${chart}"
                status_install = sh(returnStatus: true, script: "helm status ${chart} | grep -o Running")
                if (status_install != 0) {
                    currentBuild.result = 'FAILED'
                    notify.msg("Charts install failed for airship-utils SHA: ${UTILS_COMMIT} " +
                            "and Helm toolkit SHA: ${HELM_TOOLKIT_COMMIT}")
                } else {
                    notify.msg("Charts were installed for airship-utils SHA: ${UTILS_COMMIT} " +
                            "and Helm toolkit SHA: ${HELM_TOOLKIT_COMMIT}")
                }
                sh "helm del --purge ${chart}"
                sh "sleep 10"
            }
        }
        stage('Publish'){
            ARTF_REPO="airship-helm-local/airship"
            if("${GERRIT_EVENT_TYPE}" != "change-merged"){
                ARTF_REPO="${ARTF_REPO}/test"
            }

            publish.putArtifacts("*${UTILS_COMMIT}.${HELM_TOOLKIT_COMMIT}.tgz", "${ARTF_REPO}/utils/")
            notify.msg("charts for *${UTILS_COMMIT}.${HELM_TOOLKIT_COMMIT}.tgz pushed to ${ARTF_REPO}/utils")
        }
    }
}