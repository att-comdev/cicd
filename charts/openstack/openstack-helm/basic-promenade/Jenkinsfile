
JENKINS_VM_LAUNCH = 'local-vm-launch'

PROM_NODE_BASE = "osh-promenade-${BUILD_NUMBER}"
PROM_NODE_TMPL = 'promenade/osh-promenade.yaml'

PROM_VERSION = "0.1.0-${BUILD_NUMBER}"
PROM_IMAGE = "${ARTF_DOCKER_URL}/attcomdev/promenade"

PROM_BUNDLE = "promenade-bundle.tgz"
ARTF_PROM_BUNDLE = "openstack/osh-promenade/${PROM_VERSION}/${PROM_BUNDLE}"



// node info { node : [hostname, ip] }
PROM_NODES = [build:[], genesis:[], master1:[], master2:[], worker:[]]


// wrapper for main flow
def vms(body) {

    try {
        stage('Nodes Launch') {
            node(JENKINS_VM_LAUNCH) {
                PROM_NODES.each { key, value ->
                    vm.jenkins_vm_launch("${PROM_NODE_BASE}-${key}",
                                         "${env.HOME}/${PROM_NODE_TMPL}")
                }
            }
        }

        body()

    } catch (error) {
        slack.msg("Pipeline failed: ${error}")
        error(error)

    } finally {
        stage('Nodes Destroy') {
            node(JENKINS_VM_LAUNCH) {
                PROM_NODES.each { key, value ->
                    vm.jenkins_vm_destroy("${PROM_NODE_BASE}-${key}")
                }
            }
        }
    }
}


//// main flow

vms {

    stage('Nodes Wait'){

        def get_hname = {
            sh(returnStdout: true, script: 'echo -n $(hostname)')
        }

        def get_ip = { iface ->
            cmd = "ifconfig ${iface} | grep 'inet addr:' | cut -d: -f2 | awk '{ print \$1}'"
            sh(returnStdout: true, script: cmd).trim()
        }

        timeout (10) {
            PROM_NODES.each { key, value ->
                node ("${PROM_NODE_BASE}-${key}") {
                    PROM_NODES."${key}" = [get_hname(), get_ip('ens3')]
                }
            }
            print " *** Prom node info ***\n${PROM_NODES}"
        }
    }

    stage('Promenade Fetch'){
        node("${PROM_NODE_BASE}-build"){
            gerrithub.clone('att-comdev/promenade', 'refs/changes/63/393563/2')

            sh "sudo apt-get install -y docker.io curl"
            sh "sudo docker pull ${PROM_IMAGE}"
        }
    }

    //// artf utils

    artf = Artifactory.server 'artifactory'

    def artf_spec = { pattern, target ->
        return """
            {"files": [{
                "pattern": "${pattern}",
                "target": "${target}",
                "flat": "true"
            }]}
        """
    }

    stage('Promenade Config'){
       node("${PROM_NODE_BASE}-build"){

           def config = """
              CALICO_IP_AUTODETECTION_METHOD='interface=ens3'
              GENESIS_HOSTNAME=${PROM_NODES.genesis[0]}
              GENESIS_IP=${PROM_NODES.genesis[1]}
              MASTER1_HOSTNAME=${PROM_NODES.master1[0]}
              MASTER1_IP=${PROM_NODES.master1[1]}
              MASTER2_HOSTNAME=${PROM_NODES.master2[0]}
              MASTER2_IP=${PROM_NODES.master2[1]}
              WORKER_HOSTNAME=${PROM_NODES.worker[0]}
              WORKER_IP=${PROM_NODES.worker[1]}
           """

           sh "echo '${config}' > tools/gate/config-env"
           sh "sudo bash tools/gate/build.sh ${PROM_IMAGE}"

           spec = artf_spec("tools/gate/${PROM_BUNDLE}", ARTF_PROM_BUNDLE)
           artf.publishBuildInfo(artf.upload(spec))
       }
    }


    def prom_up = { hname ->

        spec = artf_spec(ARTF_PROM_BUNDLE, "")
        artf.download(spec)

        sh ("tar -xvf ${PROM_BUNDLE}")

        jn = "join-${hname}.sh"
        vn = "validate-${hname}.sh"

        if (hname == "genesis") {
            jn = "genesis.sh"
        }

        timeout (10) {
            dir("${WORKSPACE}/promenade-bundle") {
               sh ("sudo bash ${jn}")
               sh ("sudo bash ${vn}")
            }
        }
    }


    stage('Genesis Up'){
        node("${PROM_NODE_BASE}-genesis") {
            prom_up("genesis")
        }
    }

    stage('Master1 Join'){
        node("${PROM_NODE_BASE}-master1") {
            prom_up(PROM_NODES.master1[0])
        }
    }

    stage('Master2 Join'){
        node("${PROM_NODE_BASE}-master2") {
            prom_up(PROM_NODES.master2[0])
        }
    }

    stage('Worker Join'){
        node("${PROM_NODE_BASE}-worker") {
            prom_up(PROM_NODES.worker[0])
        }
    }

    stage('Cluster Validate'){
        node("${PROM_NODE_BASE}-genesis") {
            timeout (30) {
                dir("${WORKSPACE}/promenade-bundle") {
                   sh ('sudo bash validate-cluster.sh')
                   sh ('sudo bash final-validation.sh')
                }
            }
            sh 'sudo kubectl get pods --all-namespaces -o wide'
        }
    }

    node("${PROM_NODE_BASE}-genesis") {
        stage ('Helm Setup') {
            sh 'sudo apt-get install -y python-pip'

            sh 'wget https://storage.googleapis.com/kubernetes-helm/helm-v2.5.1-linux-amd64.tar.gz'

            sh 'tar xzf helm-v2.5.1-linux-amd64.tar.gz'
            sh 'sudo mv linux-amd64/helm /usr/local/bin/helm'

            withEnv(['KUBECONFIG=/etc/kubernetes/admin/kubeconfig.yaml']) {
                sh 'helm init && sleep 30'
                timeout (4) {
                     while (sh(returnStatus: true, script: 'helm list')) sleep 30
                }

                sh 'helm serve &'
                sh 'sleep 7'
                sh 'helm repo add local http://localhost:8879/charts'
            }
        }

        git 'https://git.openstack.org/openstack/openstack-helm'

        sh "sed -i -e 's|172.17.0.1/16|10.0.0.0/24|g' tools/deployment/developer/04-ceph.sh"
        sh "sed -i -e 's|172.17.0.1/16|10.0.0.0/24|g' tools/deployment/developer/05-ceph-ns-activate.sh"


        //// deploy osh

        def scripts = ['00-install-packages.sh',
                       '02-setup-client.sh',
                       '03-ingress.sh',
                       '04-ceph.sh',
                       '05-ceph-ns-activate.sh',
                       '06-mariadb.sh',
                       '07-rabbitmq.sh',
                       '08-memcached.sh']

        scripts.each {
            timeout (14) {
                stage("OSH (${it})") {
                    withEnv(['KUBECONFIG=/etc/kubernetes/admin/kubeconfig.yaml']) {
                        sh "tools/deployment/developer/${it}"
                    }
                }
            }
        }

        if (DELAY_DESTROY.toBoolean()) {
            sleep 86400 # should be 24h
        }

    }
}

