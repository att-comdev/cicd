NODE_NAME = "charts-helm-compat-${BUILD_NUMBER}"
NODE_TMPL = "charts/ubuntu.m1.medium.yaml"
currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"
//manual run will need these variables:
if (GERRIT_CHANGE_NUMBER == 'none'){
    GERRIT_CHANGE_NUMBER = "manual run of ${GERRIT_REFSPEC}"
}

def build_charts = '''

    set -e

    #List of projects to work with is a job parameter:
    #PROJECT_LIST="armada deckhand drydock promenade shipyard"
    #See seed.groovy job parameters.

    record_fail(){
        echo -e "\n ERROR: Project ${1} failed! " | tee -a ${failed_log}
        grep -i 'error' ${1}.log >> ${failed_log}
    }


    prepare_env(){
        TMP_DIR="$(mktemp -d)"
        #HELM_VERSION=${HELM_VERSION:-"v2.7.2"}
        #URL="https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz"
        URL="https://artifacts-aic.atlantafoundry.com/artifactory/googleapis-helm/helm-v2.7.2-linux-amd64.tar.gz"
        curl -sSL ${URL} | tar -zxv --strip-components=1 -C ${TMP_DIR}
        sudo mv -v ${TMP_DIR}/helm /usr/local/bin/helm
        helm init --client-only

        if [ -z "$(curl -s 127.0.0.1:8879 | grep 'Helm Repository')" ]; then
            helm serve & > /dev/null
            while [ -z "$(curl -s 127.0.0.1:8879 | grep 'Helm Repository')" ]; do
                sleep 1
                echo "Waiting for Helm Repository"
            done
        fi

        if helm repo list | grep -q "^stable" ; then
            helm repo remove stable
        fi

        helm repo add local http://localhost:8879/charts
        helm plugin install https://github.com/technosophos/helm-template ||:
        git clone -q --depth 1 https://git.openstack.org/openstack/openstack-helm.git
        cd openstack-helm
        if [ ! ${GERRIT_REFSPEC} = "master" ]; then
            git fetch https://git.openstack.org/openstack/openstack-helm.git ${GERRIT_REFSPEC}
            git checkout FETCH_HEAD
        fi
        make helm-toolkit
    }

    clone_projects(){
        cd ${WDIR}/build
        for project in ${PROJECT_LIST}; do
            git clone -q --depth 1 https://review.gerrithub.io/att-comdev/${project}
        done
    }

    make_charts(){
        set -xe
        for project in $PROJECT_LIST; do
            cd ${WDIR}/build/${project}
            #Assume we have Makefile in every project we test.
            make charts 2>&1 | tee ${project}.log || record_fail ${project}
        done
    }

    BUILD_DIR='build'
    WDIR=`pwd`
    failed_log=${WDIR}/build/failed.log

    #----- MAIN -----#
    mkdir ${BUILD_DIR}
    cd ${BUILD_DIR}
    #helm installation process is muted:
    prepare_env
    clone_projects
    make_charts
    echo "Done!"

    if [ -f ${failed_log} ]; then
        cat ${failed_log}
        exit 1
    fi
    '''

vm(NODE_NAME,NODE_TMPL){
    stage('Make Charts'){
        def status = sh(returnStatus: true, script: build_charts)
        if (status != 0) {
            currentBuild.result = 'FAILED'
            def warning_msg = "WARNING: Check failed for ${GERRIT_CHANGE_NUMBER}!\n"
            def error_msg = readFile "${WORKSPACE}/build/failed.log"
            def urls_msg  = "\n${GERRIT_CHANGE_URL} \n${BUILD_URL}"
            slack.msg(warning_msg + error_msg + urls_msg)
            //also we'll notify #jenkins channel
            slack.msg(warning_msg + error_msg + urls_msg, '#jenkins')
        }else{
            slack.msg("${GERRIT_CHANGE_NUMBER} is OK")
        }
    }
}
