PROJECT_NAME = GERRIT_PROJECT.tokenize('/').last()
NODE_NAME = "charts-${PROJECT_NAME}-${BUILD_NUMBER}"
NODE_TMPL = "charts/ubuntu.m1.medium.yaml"
IMAGE_TAG="${GERRIT_PATCHSET_REVISION}"
CURRENT_VERSION = "0.1.0.${GERRIT_CHANGE_NUMBER}"
currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"
HELM_VERSION="2.7.2"

//bash script start:
def build_charts = '''

    helm_install(){
        sudo apt-get install -y --no-install-recommends git make curl ca-certificates
        TMP_DIR="$(mktemp -d)"
        URL="https://artifacts-aic.atlantafoundry.com/artifactory/googleapis-helm/helm-v2.7.2-linux-amd64.tar.gz"
        curl -sSL ${URL} | tar -zxv --strip-components=1 -C ${TMP_DIR}
        sudo mv -v ${TMP_DIR}/helm /usr/local/bin/helm
    }

    helm_serve(){
        helm init --client-only
        if [ -z "$(curl -s 127.0.0.1:8879 | grep 'Helm Repository')" ]; then
            helm serve & > /dev/null
            while [ -z "$(curl -s 127.0.0.1:8879 | grep 'Helm Repository')" ]; do
                sleep 1
                echo "Waiting for Helm Repository"
            done
        fi

        if helm repo list | grep -q "^stable" ; then
            helm repo remove stable
        fi

        helm repo add local http://localhost:8879/charts
        #helm plugin install https://github.com/technosophos/helm-template
    }

    record_fail(){
        echo -e "\n project $1 failed: " | tee -a ${failed_log}
        cat ${job_log} | tee -a ${failed_log}
        #Fail logged, continue building charts manually:
        helm_pkg
    }

    cleanup(){
        rm -rf build && mkdir build
    }

    helm_pkg(){
        #Some projects fail to create charts with make or don't have Makefile,
        #I want to create and upload their charts anyway:
        for i in $(ls charts | grep -v '.tgz'); do
            helm dep up charts/${i}
            helm package charts/${i}
        done
    }

    make_charts(){
        echo '############### Building Charts ######################'
        set -xe
        cd ${WDIR}
        helm_install
        helm_serve
        make helm-toolkit
        if [ -f Makefile ]; then
            make keystone &> ${job_log} || record_fail
        else
            helm_pkg &>> ${job_log} || record_fail
        fi
        echo '#################### Done! ###########################'

    }

    set -e # script will fail on any error
    WDIR=`pwd`
    job_log=${WDIR}/job.log
    failed_log=${WDIR}/failed.log
    cleanup && cd build
    make_charts

    if [ -f $failed_log ]; then
        cat $failed_log
        exit 1
    fi
    '''
/* end of bash script. */

vm(NODE_NAME,NODE_TMPL){
    stage('Project Checkout'){
        git "https://github.com/att-comdev/${REPO}"
        GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        def chartVersion = readYaml file: "${JOB_BASE_NAME}/Chart.yaml"
        def chartOverride = readYaml file: "${JOB_BASE_NAME}/Chart.yaml", text: "version: "+chartVersion.version+"-"+GIT_COMMIT
        sh 'sudo rm -rf ${JOB_BASE_NAME}/Chart.yaml'
        writeYaml file: "${JOB_BASE_NAME}/Chart.yaml", data: chartOverride
        //echo (chartOverride.version)
        sh "cat ${JOB_BASE_NAME}/Chart.yaml"
    }
    stage('Build & Package'){
        def status = sh(returnStatus: true, script: build_charts)
        if (status != 0) {
            currentBuild.result = 'FAILED'
            slack.msg("Charts build failed for ${GERRIT_CHANGE_NUMBER}!")
        }else{
            slack.msg("Charts were built for ${GERRIT_CHANGE_NUMBER}")
        }
    }
    stage('Publish'){
        ARTF_REPO="openstack/openstack-helm"

        // we don't need helm-toolkit.tgz here.
        sh "find . -iname 'helm-toolkit*.tgz' -delete"

        def server = Artifactory.server 'artifactory'
        def uploadSpec = """{"files": [{"pattern":"*.tgz","target":"${ARTF_REPO}/${JOB_BASE_NAME}/"}]}"""
        server.upload(uploadSpec)
        slack.msg("Charts from ${GERRIT_PROJECT} pushed to ${ARTF_REPO}")
    }
}