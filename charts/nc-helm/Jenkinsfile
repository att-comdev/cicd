currentBuild.displayName = "#${BUILD_NUMBER} master"
GIT_COMMIT=""

vm2("bootstrap.sh", "cicd-ubuntu-16.04-server-cloudimg-amd64", "m1.large","", 'basic', false) {
    sh 'sudo apt-get update'
    sh 'sudo apt-get install -y make curl'
    sh ('hostname')
    stage('Setup environment'){
        vm2.setproxy()
    }
    stage('Install Helm'){
        git 'https://github.com/openstack/openstack-helm-infra'
        HELM_TOOLKIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short=12 HEAD').trim()
        sh "sed -i 's/8.8.8.8/${ARTF_IP}/g' ./tools/images/kubeadm-aio/assets/opt/playbooks/vars.yaml"
        def amap = ['kubernetes_network_default_device': 'docker0','proxy': [ 'http': "${HTTP_PROXY}", 'https': "${HTTP_PROXY}", 'noproxy': "${NO_PROXY}"] ]
         
        sh 'rm -rf ./tools/gate/devel/local-vars.yaml'
        writeYaml file: './tools/gate/devel/local-vars.yaml', data: amap
       
        sh 'make dev-deploy setup-host'
        sh 'make dev-deploy k8s'
    }

    stage('Project Checkout'){
        gerrit.cloneToBranch("${GIT_REPO}", "${GERRIT_PATCHSET_REVISION}",${JOB_BASE_NAME}")
        dir("${WORKSPACE}/${REPO}"){
            GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short=12 HEAD').trim()
        }
    }
    dir("${WORKSPACE}/${REPO}"){
        stage('Build & Package'){
            def status = sh(returnStatus: true, script: "make all")
            if (status != 0) {
                currentBuild.result = 'FAILED'
                notify.msg("Charts build failed for ${GIT_COMMIT}!")
            }else{
                notify.msg("Charts were built for ${GIT_COMMIT}")
            }
        }
        stage('Rename tarballs'){
            def cmd = 'rename "s/0.1.0/'+GIT_COMMIT+'.'+HELM_TOOLKIT_COMMIT+ '/g" *'
            echo (cmd)
            sh(returnStatus:true, script: cmd)
        }
        stage('Publish'){
            ARTF_REPO="helm-charts/test/${JOB_BASE_NAME}/"

            def server = Artifactory.server 'artifactory'
            def uploadSpec = """{"files": [{"pattern":"*.tgz","target":"${ARTF_REPO}"}]}"""
            server.upload(uploadSpec)
            notify.msg("Chart for ${GIT_COMMIT}.${HELM_TOOLKIT_COMMIT} pushed to ${ARTF_REPO}")

            publish.setProperty ('jenkins-artifactory', '${ARTF_WEB_URL}/api/storage/helm-charts/${JOB_BASE_NAME}', "${GIT_COMMIT}.${HELM_TOOLKIT_COMMIT}=DEV")
        }
    }
}
