currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_PROJECT}-${GERRIT_EVENT_TYPE}"

//large VM for running tests Ex: Nova, Neutron
vm2('bootstrap.sh',
         'cicd-ubuntu-16.04-server-cloudimg-amd64',
         'm1.xlarge',
         '',
         'basic',
         false){
    stage('Project Checkout'){
        cleanWs()
        //To be removed once all projects are controlling their own dependencies
        //bootstrap was not loading as expected
        //removing docker.io from the list of installed packages since it is
        //causing the VM to stall and jobs stay at that stage for >15hrs
        sh '''sudo apt-get install -y \
              git make gcc python \
              build-essential \
              python3-minimal \
              python3-setuptools \
              python-pip \
              python-dev \
              python-flake8 \
              python3-pip \
              libffi-dev \
              gettext \
              bandit \
              mongodb \
              libpq-dev \
              libldap2-dev \
              libsasl2-dev \
              libssl-dev'''

        vm2.setproxy()
        //tox > 2.3.1 for running tests Ex: Horizon, Neutron
        sh 'sudo pip install --no-cache-dir tox'
        if(env.GERRIT_NEWREV){
            if(!GERRIT_HOST.contains('review')){
                gerrit.cloneToBranch("${INTERNAL_GERRIT_SSH}/${GERRIT_PROJECT}",
                                     GERRIT_NEWREV,
                                     "jenkins",
                                     INTERNAL_GERRIT_KEY)
            } else {
                gerrit.cloneToBranch("https://"+GERRIT_HOST+"/"+GERRIT_PROJECT, GERRIT_NEWREV, "jenkins")
                dir("${WORKSPACE}/jenkins"){
                    gerrit.rebase()
                }
            }
        } else {
            if(!GERRIT_HOST.contains('review')){
                gerrit.cloneToBranch("${INTERNAL_GERRIT_SSH}/${GERRIT_PROJECT}",
                                     GERRIT_PATCHSET_REVISION,
                                     "jenkins",
                                     INTERNAL_GERRIT_KEY)
            } else {
                gerrit.cloneToBranch("https://"+GERRIT_HOST+"/"+GERRIT_PROJECT, GERRIT_PATCHSET_REVISION, "jenkins")
                dir("${WORKSPACE}/jenkins"){
                    gerrit.rebase()
                }
            }
        }
        // set UPPER_CONSTRAINTS_FILE from mos-requirements
        if(GERRIT_PROJECT.contains('mos-')){
            requirements = 'mos-requirements'
            gerrit.cloneProject("${INTERNAL_GERRIT_SSH}/${requirements}",
                                 GERRIT_BRANCH,
                                 "refs/heads/${GERRIT_BRANCH}",
                                 requirements,
                                 INTERNAL_GERRIT_KEY)
            sh "cp ${WORKSPACE}/${requirements}/upper-constraints.txt ${WORKSPACE}/jenkins/upper-constraints.txt"
            sh "rm -rf ${WORKSPACE}/${requirements}"
        }
    }
    dir("${WORKSPACE}/jenkins"){
        stage('Code-Review'){
            withEnv(["UPPER_CONSTRAINTS_FILE=${WORKSPACE}/jenkins/upper-constraints.txt"]) {
                cmd = (!fileExists('Makefile')) ? "sudo tox -e pep8,py27" : "sudo -H make tests"
                def status = sh(returnStatus: true, script: cmd)
                if (status != 0) {
                    currentBuild.result = 'FAILED'
                    notify.msg("Code Review failed for ${GERRIT_PROJECT} ${GERRIT_CHANGE_NUMBER}!")
                }else{
                    notify.msg("Code Review successful for ${GERRIT_PROJECT} ${GERRIT_CHANGE_NUMBER}")
                    cmd = "cd doc/build/html"
                    status = sh(returnStatus: true, script: cmd)
                    if (status == 0 && GERRIT_PROJECT.contains('aic-aqa-')) {
                        def project_path = GERRIT_PROJECT.split('aic-aqa-')[0]
                        if (GERRIT_EVENT_TYPE == "patchset-created" || GERRIT_EVENT_TYPE == "comment-added") {
                            def doc_path = project_path + "/patched/" + GERRIT_CHANGE_NUMBER
                            publish.deleteArtifacts('aqua-user',
                                                    "${ARTF_URL}/artifactory",
                                                    "aqua-docs",
                                                    doc_path)
                            publish.putArtifacts('*', "aqua-docs/" + doc_path, false)
                        }
                        if (GERRIT_EVENT_TYPE == "patchset-merged") {
                            def doc_path = project_path
                            publish.deleteArtifacts('aqua-user',
                                                    "${ARTF_URL}/artifactory",
                                                    "aqua-docs",
                                                    doc_path)
                            publish.putArtifacts('*', "aqua-docs/" + doc_path, false)
                        }
                        print "Documentation located in artifactory at ${ARTF_URL}/artifactory/" + "aqua-docs/" + doc_path
                    }
                }
            }
        }
    }
}
