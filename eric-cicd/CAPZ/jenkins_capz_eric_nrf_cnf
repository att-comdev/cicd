podTemplate(yaml: """
apiVersion: v1
kind: Pod
metadata:
  labels:
    provider: capz
    cnf: ericsson-nrf
spec:
  securityContext:
    runAsUser: 0
  containers:
  - name: ubuntu-bionic
    image: ubuntu:18.04
    command:
    - cat
    tty: true
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2375
    volumeMounts:
    - name: home
      mountPath: /root
  volumes:
  - name: home
    emptyDir: {}
"""
) {
  node(POD_LABEL) {
    try{
      def az = [:]
      env.JOBNAME = JOB_NAME.toLowerCase()
      container('ubuntu-bionic') {
        stage("Setup Host Container") {
          sh label: '', script: '''apt-get update; apt-get install -y git sudo make curl wget systemd vim jq && \\
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash'''
          withCredentials([azureServicePrincipal('AzureCloud')]) {
            sh label: '', script: '''#!/bin/bash
              az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID;
              az group create --name capi-${JOBNAME}-${BUILD_NUMBER}-rg --location "${AZURE_LOCATION}";

              host=$(az vm create -g capi-${JOBNAME}-${BUILD_NUMBER}-rg \\
                -n capi-host-${JOBNAME}-${BUILD_NUMBER} --image UbuntuLTS \\
                --generate-ssh-keys --query publicIpAddress \\
                --size ${AZURE_HOST_TYPE} -o tsv)
              echo $host >az-host-info
              cp /root/.ssh/id_rsa az-identity; ls -ltr '''
          }
          az.host=readFile('az-host-info').trim()
          az.name='azure-host'
          az.user='azureuser'
          az.allowAnyHosts=true
          az.identity=readFile('az-identity').trim()
          az.logLevel='INFO'

          writeFile file: 'setup.sh', text: 'sudo apt-get update && sudo apt-get install -y git sudo make wget systemd vim && \
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common jq && \
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo apt-key fingerprint 0EBFCD88 && \
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" && \
            export USER=`whoami` && sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io && \
            sudo usermod -aG docker $USER && mkdir -p airship'

          sshScript remote: az, script: "setup.sh"
          sh label: '', script: '''chmod +x ./setup.sh && ./setup.sh'''
        }
        stage("Clone Repo") {
          writeFile file: 'cloneRepo1.sh', text: '''#!/bin/bash
            cd airship && git clone https://opendev.org/airship/airshipctl.git && \
            export PATH=$PATH:/usr/local/go/bin/ && \
            cd airshipctl && git fetch https://review.opendev.org/airship/airshipctl '''+ env.REF_SPEC_MANIFESTS +''' && git checkout FETCH_HEAD && \
            export JOBNAME=$(echo "${JOB_NAME}" | tr '[:upper:]' '[:lower:]') && \
            find manifests/function/k8scontrol-capz/ -name *.yaml -exec \
              sed -i '/vmSize:.*/s//vmSize: '''+ env.AZURE_HOST_TYPE +'''/g' {} \\; && \
            find manifests/function/k8scontrol-capz/ -name *.yaml -exec \
              sed -i '/location:.*/s//location: '''+ env.AZURE_LOCATION.toLowerCase().replaceAll("\\s","") +'''/g' {} \\; && \
            find manifests/function/workers-capz/ -name *.yaml -exec \
              sed -i '/vmSize:.*/s//vmSize: '''+ env.AZURE_HOST_TYPE +'''/g' {} \\; && \
            find manifests/function/workers-capz/ -name *.yaml -exec \
              sed -i '/location:.*/s//location: '''+ env.AZURE_LOCATION.toLowerCase().replaceAll("\\s","") +'''/g' {} \\; && \
            sed -i "/env-vars/s/^# //g" manifests/site/az-test-site/shared/clusterctl/clusterctl.yaml && \
            sed -i "/AZURE_/s/^/#/g" manifests/site/az-test-site/shared/clusterctl/clusterctl.yaml'''
          writeFile file: 'cloneRepo2.sh', text: '''#!/bin/bash
            mkdir scripts && cd scripts && git clone https://opendev.org/airship/airshipctl.git && \
            cd airshipctl && git fetch https://review.opendev.org/airship/airshipctl '''+ env.REF_SPEC_SCRIPTS +''' && \
            git checkout FETCH_HEAD && cp -r tools/deployment/* ../../airship/airshipctl/tools/deployment/ '''
          sshScript remote: az, script: "cloneRepo1.sh"
          sshScript remote: az, script: "cloneRepo2.sh"
          sh label: '', script: '''chmod +x ./cloneRepo1.sh && ./cloneRepo1.sh'''
          sh label: '', script: '''chmod +x ./cloneRepo2.sh && ./cloneRepo2.sh'''
        }
        stage("Install Kind & Kubectl") {
          writeFile file: 'installKind.sh', text: '''#!/bin/bash
            cd airship/airshipctl \
            && ./tools/deployment/provider_common/01_install_kind.sh'''
          sshScript remote: az, script: "installKind.sh"
          sh label: '', script: '''chmod +x ./installKind.sh && ./installKind.sh'''

          writeFile file: 'installKubectl.sh', text: '''#!/bin/bash
            cd airship/airshipctl && ./tools/deployment/01_install_kubectl.sh && \
            kubectl version --client'''
          sshScript remote: az, script: "installKubectl.sh"
          sh label: '', script: '''chmod +x ./installKubectl.sh && ./installKubectl.sh'''
        }
        withCredentials([azureServicePrincipal('AzureCloud')]) {
          stage("Install AirshipCtl") {
            writeFile file: 'env.sh', text: 'export AZURE_ENVIRONMENT="AzurePublicCloud" && \
               export AZURE_SUBSCRIPTION_ID='+ env.AZURE_SUBSCRIPTION_ID +' && \
               export AZURE_TENANT_ID='+ env.AZURE_TENANT_ID +' && \
               export AZURE_CLIENT_ID='+ env.AZURE_CLIENT_ID +' && \
               export AZURE_CLIENT_SECRET='+ env.AZURE_CLIENT_SECRET +' && \
               export AZURE_SUBSCRIPTION_ID_B64="$(echo "${AZURE_SUBSCRIPTION_ID}" | base64 | tr -d \'\\n\')" && \
               export AZURE_TENANT_ID_B64="$(echo "${AZURE_TENANT_ID}" | base64 | tr -d \'\\n\')" && \
               export AZURE_CLIENT_ID_B64="$(echo "${AZURE_CLIENT_ID}" | base64 | tr -d \'\\n\')" && \
               export AZURE_CLIENT_SECRET_B64="$(echo "${AZURE_CLIENT_SECRET}" | base64 | tr -d \'\\n\')"'
            sshPut remote: az, from: 'env.sh', into: 'airship'

            writeFile file: 'installAirshipCtl.sh', text: '''#!/bin/bash
            pwd && cd airship && chmod +x env.sh && source env.sh && \
            cd airshipctl && \
            sed -i '/value.*/s//value\": \"'''+ env.AZURE_SUBSCRIPTION_ID +'''\" }/g' \
              manifests/site/az-test-site/ephemeral/controlplane/subscription_id.json && \
            sudo -E ./tools/deployment/21_systemwide_executable.sh'''
            sshScript remote: az, script: "installAirshipCtl.sh"
          }
          stage("Deploy Ephemeral Cluster") {
            writeFile file: 'deployEphemeral.sh', text: '''#!/bin/bash
            cd airship && source env.sh && cd airshipctl && sudo -E \
            AIRSHIP_SRC=`pwd`/../ KIND_CONFIG=./tools/deployment/templates/kind-cluster-with-extramounts \
            ./tools/deployment/provider_common/25_deploy_kind_ephemeral_node.sh && sudo -E \
            TEST_SITE=az-test-site PROVIDER_MANIFEST=azure_manifest AIRSHIP_SRC=`pwd`/../ \
            ./tools/deployment/provider_common/26_cluster_init_ephemeral_node.sh'''
            sshScript remote: az, script: "deployEphemeral.sh"
          }
          stage("Deploy Control Plane") {
            writeFile file: 'deployControlPlane.sh', text: '''#!/bin/bash
            cd airship && source env.sh && cd airshipctl && sudo -E \
            CONTROLPLANE_COUNT=1 TEST_SITE=az-test-site AIRSHIP_SRC=`pwd`/../ \
            ./tools/deployment/provider_common/30_deploy_controlplane.sh'''
            sshScript remote: az, script: "deployControlPlane.sh"
          }
          stage("Move Cluster to Target") {
            writeFile file: 'moveCluster.sh', text: '''#!/bin/bash
            cd airship && source env.sh && cd airshipctl && sudo -E \
            KUBECONFIG=/tmp/target-cluster.kubeconfig ./tools/deployment/provider_common/32_cluster_init_target_node.sh && \
            sudo -E ./tools/deployment/provider_common/33_cluster_move_target_node.sh && \
            echo "kubectl get clusters --kubeconfig $HOME/.airship/kubeconfig " && \
            sudo kubectl get clusters --kubeconfig $HOME/.airship/kubeconfig && \
            echo "kubectl get clusters --kubeconfig /tmp/target-cluster.kubeconfig" && \
            sudo kubectl get clusters --kubeconfig /tmp/target-cluster.kubeconfig && \
            echo "kubectl get machines --kubeconfig $HOME/.airship/kubeconfig " && \
            sudo kubectl get machines --kubeconfig $HOME/.airship/kubeconfig && \
            echo "kubectl get machines --kubeconfig /tmp/target-cluster.kubeconfig " && \
            sudo kubectl get machines --kubeconfig /tmp/target-cluster.kubeconfig'''
            sshScript remote: az, script: "moveCluster.sh"
          }
          stage("Deploy Worker Node") {
            writeFile file: 'deployWorker.sh', text: '''#!/bin/bash
            export KUBECONFIG=/tmp/target-cluster.kubeconfig
            wait_for_machine() {
                itr="0"
                kubectl get machines -l $1
                while [[ $(kubectl get machines -l $1 -o \
                  'jsonpath={..status.phase}') != "Running" ]] \
                  && [[ $itr -lt \"$2\" ]]; \
                  do echo "waiting for machine: $1 to be ready - ($itr/$2)" && \
                  sleep $3 && itr=$((itr+1)); done
                kubectl get machines -l $1
            }
            cd airship && source env.sh && cd airshipctl && sudo -E \
            WORKERS_COUNT=1 TEST_SITE=az-test-site AIRSHIP_SRC=`pwd`/../ \
            ./tools/deployment/provider_common/34_deploy_worker_node.sh && \
            wait_for_machine "cluster.x-k8s.io/control-plane!=" 30 60 && \
            kubectl get clusters && kubectl get machines && \
            kubectl get pods -A '''
            sshScript remote: az, script: "deployWorker.sh"
          }
          stage("Deploy Workload - Ericsson NRF") {
            writeFile file: 'updateNrfRepo.sh', text: '''#!/bin/bash
              source env.sh && git clone ''' + env.MANIFEST_GIT_URL + ''' && \

              regInfo='"'"$(echo "${AZURE_CLIENT_ID}:${AZURE_CLIENT_SECRET}" | base64 | tr -d \'\\n\')"'"' && \
              authToken='"auth": '$regInfo && \
              authSearchStr='"auth":.*' && \
              sed -i -e "s|$authSearchStr|$authToken|g" demo/azure/ericsson-5g/function/chart-collator/config.json && \
              sed -i -e "s|$authSearchStr|$authToken|g" demo/azure/ericsson-5g/workload/5g-ccrc-nrf/common/config.json '''
            sh label: '', script: '''chmod +x ./updateNrfRepo.sh && ./updateNrfRepo.sh'''
            sshPut remote: az, from: 'demo/azure/ericsson-5g', into: 'airship/airshipctl/manifests/site/az-test-site/', override: true

            writeFile file: 'deploy5GNRF.sh', text: '''#!/bin/bash
              cd airship && source env.sh && cd airshipctl && \
              sudo chown -R root:root ./manifests/site/az-test-site/ericsson-5g && \
              sudo find . -name *.pem -exec chmod 644 {} \\; && \
              sudo chmod +x ./manifests/site/az-test-site/ericsson-5g/deploy-ericsson-5g-nrf.sh && \
              sudo -E TEST_SITE=az-test-site AIRSHIP_SRC=`pwd`/../ \
              REG_URL=''' + env.CONTAINER_REG_URL + '''  \
              ./manifests/site/az-test-site/ericsson-5g/deploy-ericsson-5g-nrf.sh'''
            sshScript remote: az, script: "deploy5GNRF.sh"
          }
          stage('Validate - Ericsson NRF') {
            writeFile file: 'validateNRF.sh', text: '''#!/bin/bash
              sudo chmod +x ./airship/airshipctl/manifests/site/az-test-site/ericsson-5g/validate-ericsson-5g-nrf.sh && \
              sudo -E ./airship/airshipctl/manifests/site/az-test-site/ericsson-5g/validate-ericsson-5g-nrf.sh'''
            sshScript remote: az, script: "validateNRF.sh"
          }
          stage("Release resources") {
            writeFile file: 'releaseResources.sh', text: '''#!/bin/bash
              az group delete -n azure-workload -y && \
              az group delete -n capi-${JOBNAME}-${BUILD_NUMBER}-rg -y'''
            sh label: '', script: 'chmod +x releaseResources.sh && ./releaseResources.sh'
          }
        }
      }
    }catch (err) {
      echo "Failed: ${err}"
      currentBuild.result = 'FAILURE'
    }
  }
}
