def trigger = {
    podTemplate(yaml: """
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
        provider: capd
    spec:
      containers:
      - name: ubuntu-bionic
        image: ubuntu:18.04
        command:
        - cat
        tty: true
    """
    ) {
        node(POD_LABEL) {
            def remote = [:]
            container('ubuntu-bionic') {
                withCredentials([usernamePassword(credentialsId: 'TARGET_CREDENTIALS', usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
                    remote.name = 'hostVM'
                    remote.host = "${targetVM}"
                    remote.user = "${USER}"
                    remote.password = "${PASSWORD}"
                    remote.allowAnyHosts = true
                }
                stage("Setting up Host VM") {
                    sh "hostname"
                    writeFile file: 'setup.sh', text: 'sudo apt-get update;sudo apt-get install -y make git curl sudo wget'
                    sshScript remote: remote, script: "setup.sh"
                }
                stage("Clone manifest") {
                    writeFile file: 'clonemanifest.sh', text: '\
                        sudo rm -rf /home/zuul/src/opendev.org/airship && \
                        mkdir -p /home/zuul/src/opendev.org/airship/ && \
                        cd /home/zuul/src/opendev.org/airship/ && \
                        git clone https://opendev.org/airship/airshipctl.git && \
                        cd airshipctl/ && \
                        git fetch https://review.opendev.org/airship/airshipctl refs/changes/71/737871/15 && git checkout FETCH_HEAD'
                    sshScript remote: remote, script: "clonemanifest.sh"
                }
                stage("Clone scripts") {
                    writeFile file: 'clonescripts.sh', text: '\
                        sudo rm -rf /home/airship/capd && \
                        mkdir -p /home/airship/capd && \
                        cp -r /home/zuul/src/opendev.org/airship/airshipctl/ /home/airship/capd && \
                        cd /home/airship/capd/airshipctl/ && \
                        git fetch https://review.opendev.org/airship/airshipctl refs/changes/82/738682/60 && git checkout FETCH_HEAD'
                    sshScript remote: remote, script: "clonescripts.sh"
                }
                stage("Install Kind") {
                    writeFile file: 'Installkind.sh', text: 'cd /home/airship/capd/airshipctl/; ./tools/deployment/docker/00_install_kind.sh'
                    sshScript remote: remote, script: "Installkind.sh"
                }
                stage("Install Kubectl") {
                    writeFile file: 'Installkubectl.sh', text: 'cd /home/airship/capd/airshipctl/; ./tools/deployment/01_install_kubectl.sh'
                    sshScript remote: remote, script: "Installkubectl.sh"
                }
                stage("Install GO") {
                    writeFile file: 'Installgo.sh', text: 'cd /home/airship/capd/airshipctl/; ./tools/deployment/docker/02_install_go.sh'
                    sshScript remote: remote, script: "Installgo.sh"
                }
                stage("Install Kustomize") {
                    writeFile file: 'Installkustomize.sh', text: 'cd /home/airship/capd/airshipctl/; ./tools/deployment/docker/03_install_kustomize_docker.sh | cat'
                    sshScript remote: remote, script: "Installkustomize.sh"
                }
                stage("Deploy Kind cluster") {
                    writeFile file: 'deploykindcluster.sh', text: 'cd /home/airship/capd/airshipctl/; ./tools/deployment/docker/11_build_kind_cluster.sh'
                    sshScript remote: remote, script: "deploykindcluster.sh"
                }
                stage("Configure") {
                    writeFile file: 'configure.sh', text: 'cd /home/airship/capd/airshipctl/; ./tools/deployment/21_systemwide_executable.sh;\
                                                       ./tools/deployment/docker/31_create_configs.sh'
                    sshScript remote: remote, script: "configure.sh"
                }
                stage("Deploy Management Cluster") {
                    writeFile file: 'deploymanagementcluster.sh', text: 'cd /home/airship/capd/airshipctl/; ./tools/deployment/docker/41_initialize_management_cluster.sh'
                    sshScript remote: remote, script: "deploymanagementcluster.sh"
                }
                stage("Deploy Workload Cluster") {
                    writeFile file: 'deployworkloadcluster.sh', text: 'cd /home/airship/capd/airshipctl/; ./tools/deployment/docker/51_deploy_workload_cluster.sh'
                    sshScript remote: remote, script: "deployworkloadcluster.sh"
                }
		stage("Cleanup cluster and remove directories") {
                    def cmdoutput=sshCommand remote: remote, command: """kubectl --kubeconfig /home/airship/.airship/kubeconfig get pods -A; echo "";\\
                    kubectl --kubeconfig /home/airship/.airship/kubeconfig get nodes -A;echo "";\\
                    kubectl --kubeconfig /home/airship/.airship/kubeconfig get machines -A;echo "";\\
                    kind get clusters;echo "";\\
                    kind delete cluster --name capi-docker;echo "";\\
                    kind delete cluster --name dtc;echo "";\\
                    sudo rm -rf /home/zuul/src/opendev.org/airship && sudo rm -rf /home/airship/capd"""
                    println cmdoutput
                }
            }
        }
    }
}

//// main flow
try {
    trigger()
} catch (error) {
    println error
    currentBuild.result = 'FAILURE'
}
