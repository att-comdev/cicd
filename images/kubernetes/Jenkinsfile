NODE_NAME="Kube-build-${env.BUILD_NUMBER}"
NODE_TMPL = "kube-node/ubuntu.m1.large.yaml"
currentBuild.displayName = "#${BUILD_NUMBER} ${RELEASE_BRANCH}"

vm(NODE_NAME,NODE_TMPL) {
    stage('Build Image') {
        checkout poll: false,
        scm: [$class: 'GitSCM',
             branches: [[name: "${RELEASE_BRANCH}"]],
             doGenerateSubmoduleConfigurations: false,
             extensions: [[$class: 'CleanBeforeCheckout']],
             submoduleCfg: [],
             userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
             url: "https://github.com/kubernetes/kubernetes.git"]]]

        def stage_status = sh(returnStatus: true, script: "sudo make quick-release" )

        if (stage_status != 0) {
            currentBuild.result = 'FAILED'
            slack.msg("${RELEASE_BRANCH}: Build failed!")
        }

    }
    stage('Upload') {
        withCredentials([usernamePassword(
            credentialsId: 'jenkins-artifactory',
            usernameVariable: 'ARTIFACTORY_USER',
            passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'
                sh "sudo docker login ${opts} ${env.ARTF_DOCKER_URL}"
            def build_status = sh(returnStatus: true, script: '''
                #!/bin/bash
                set -xe
                sudo docker images
                ''' )

            if (build_status != 0) {
                currentBuild.result = 'FAILED'
                slack.msg("Kubernetes ${RELEASE_BRANCH}: Upload failed!")
            }else{
                slack.msg("Kubernetes: new ${RELEASE_BRANCH} available!")
            }
        }
    }
}

