NODE_NAME="${JOB_BASE_NAME}-${env.BUILD_NUMBER}"
NODE_TMPL = "kube-node/ubuntu.m1.large.yaml"
currentBuild.displayName = "#${BUILD_NUMBER} ${RELEASE_BRANCH}"

vm(NODE_NAME,NODE_TMPL) {

    stage('Prepare the node'){
        sh '''#!/bin/bash -xe

        SWAPFILE=/swap.sw
        sudo dd if=/dev/zero of=${SWAPFILE} bs=1024M count=8

        sudo chown 600 /swap.sw
        sudo mkswap ${SWAPFILE} && sudo swapon ${SWAPFILE}
        '''
    }

    stage('Build Release') {
        checkout poll: false,
        scm: [$class: 'GitSCM',
             branches: [[name: "${RELEASE_BRANCH}"]],
             doGenerateSubmoduleConfigurations: false,
             extensions: [[$class: 'CleanBeforeCheckout']],
             submoduleCfg: [],
             userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
             url: "https://github.com/kubernetes/kubernetes.git"]]]

        def stage_status = sh(returnStatus: true, script: "sudo -E build/run.sh make" )

        if (stage_status != 0) {
            currentBuild.result = 'FAILED'
            slack.msg("${RELEASE_BRANCH}: Build failed!")
        }

    }

    stage('building images') {
    sh '''#!/bin/bash

        #I want to be sure we'll have correct tags in docker:
        if [ -z ${RELEASE_BRANCH} ] || [ -z ${BUILD_NUMBER} ]; then
            echo "ERROR: no RELEASE_BRANCH or BUILD_NUMBER var, check the code."
            echo "==============env==================="
            env
            exit 1
        fi

        cd _output/release-images/amd64
        for i in `ls *.tar | cut -f1 -d'.'`; do
        sudo -E docker import ${i}.tar ${i}:${RELEASE_BRANCH}-build${BUILD_NUMBER}
    '''
    }

    stage('Upload') {
        withCredentials([usernamePassword(
            credentialsId: 'jenkins-artifactory',
            usernameVariable: 'ARTIFACTORY_USER',
            passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'
                sh "sudo docker login ${opts} ${env.ARTF_DOCKER_URL}"
            def build_status = sh(returnStatus: true, script: '''
                #!/bin/bash
                set -xe
                sudo docker images
                ''' )

            if (build_status != 0) {
                currentBuild.result = 'FAILED'
                slack.msg("Kubernetes ${RELEASE_BRANCH}: Upload failed!")
            }else{
                slack.msg("Kubernetes: new ${RELEASE_BRANCH} available!")
            }
        }
    }
}

