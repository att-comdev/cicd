
JENKINS_VM_LAUNCH = 'local-vm-launch'

PROM_NODE_BASE = "promenade-${BUILD_NUMBER}"
PROM_NODE_TMPL = "promenade/promenade.yaml"

IMAGE_TAG = "${GERRIT_PATCHSET_REVISION}"
DOCKER_REGISTRY="${ARTF_DOCKER_URL}"
IMAGE_PREFIX="att-comdev"

PROM_BUNDLE = "promenade-bundle.tgz"
ARTF_PROM_BUNDLE = "ucp/promenade/${IMAGE_TAG}/${PROM_BUNDLE}"

IMAGE_LATEST = "${IMAGE_PREFIX}/${JOB_BASE_NAME}:latest"
QUAY_IMAGE_LATEST="attcomdev/${JOB_BASE_NAME}:latest"
IMAGE="${DOCKER_REGISTRY}/${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}"

// node info { node : [hostname, ip] }
PROM_NODES = [build:[], genesis:[], master1:[], master2:[], worker:[]]

// wrapper for main flow
def vms(body) {

    try {
        stage('Nodes Launch') {
            node(JENKINS_VM_LAUNCH) {
                PROM_NODES.each { key, value ->
                    vm.jenkins_vm_launch("${PROM_NODE_BASE}-${key}",
                                         "${env.HOME}/${PROM_NODE_TMPL}")
                }
            }
        }

        body()

    } catch (error) {
        notify.msg("Pipeline failed: ${error}")
        error(error)

    } finally {
        stage('Nodes Destroy') {
            node(JENKINS_VM_LAUNCH) {
                PROM_NODES.each { key, value ->
                    vm.jenkins_vm_destroy("${PROM_NODE_BASE}-${key}")
                }
            }
        }
    }
}


//// main flow

vms {

    stage('Nodes Wait'){

        def get_hname = {
            sh(returnStdout: true, script: 'echo -n $(hostname)')
        }

        def get_ip = { iface ->
            cmd = "ifconfig ${iface} | grep 'inet addr:' | cut -d: -f2 | awk '{ print \$1}'"
            sh(returnStdout: true, script: cmd).trim()
        }

        timeout (10) {
            PROM_NODES.each { key, value ->
                node ("${PROM_NODE_BASE}-${key}") {
                    PROM_NODES."${key}" = [get_hname(), get_ip('ens3')]
                }
            }
            print " *** Prom node info ***\n${PROM_NODES}"
        }
    }

    stage('Promenade Build'){
        node("${PROM_NODE_BASE}-build"){
             if(env.GERRIT_NEWREV){
                echo ("${GERRIT_NEWREV} is being used to override refspec: ${GERRIT_REFSPEC}")
                IMAGE_TAG=env.GERRIT_NEWREV
                IMAGE="${DOCKER_REGISTRY}/${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}"
            }
            if(GERRIT_EVENT_TYPE != 'change-merged') {
                checkout poll: false,
                scm: [$class: 'GitSCM',
                branches: [[name: IMAGE_TAG]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'LocalBranch',
                            localBranch: 'jenkins'],
                            [$class: 'RelativeTargetDirectory',
                            relativeTargetDir: ""]],
                            submoduleCfg: [],
                            userRemoteConfigs: [[refspec: '${GERRIT_REFSPEC}',
                                                 url: "https://review.gerrithub.io/att-comdev/${JOB_BASE_NAME}"]]]
                sh '''git config user.email "attcomdev.jenkins@gmail.com"
                    git config user.name "Jenkins"
                    git pull --rebase origin master'''
            } else {
                checkout poll: false,
                scm: [$class: 'GitSCM',
                branches: [[name: IMAGE_TAG]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: 'LocalBranch',
                            localBranch: 'jenkins'],
                            [$class: 'RelativeTargetDirectory',
                            relativeTargetDir: ""]],
                            submoduleCfg: [],
                            userRemoteConfigs: [[refspec: '${GERRIT_REFSPEC}',
                                                 url: "https://review.gerrithub.io/att-comdev/${JOB_BASE_NAME}"]]]
            }

            currentBuild.displayName = "${GERRIT_EVENT_TYPE}-${env.BUILD_NUMBER}"

            sh "sudo apt-get install -y docker.io curl"
            sh "sudo docker build -t ${IMAGE} --label org.label-schema.vcs-ref=${IMAGE_TAG} --label org.label-schema.vcs-url=${GERRIT_CHANGE_URL} --label org.label-schema.version=0.1.0-${BUILD_NUMBER} ."
            sh "sudo docker inspect ${IMAGE} | grep promenade"
            publish.artifactory (IMAGE, "${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}")
        }
    }

    //// artf utils

    artf = Artifactory.server 'artifactory'

    def artf_spec = { pattern, target ->
        return """
            {"files": [{
                "pattern": "${pattern}",
                "target": "${target}",
                "flat": "true"
            }]}
        """
    }


    stage('Promenade Config'){
       node("${PROM_NODE_BASE}-build"){

           def config = """
              CALICO_IP_AUTODETECTION_METHOD='interface=ens3'
              GENESIS_HOSTNAME=${PROM_NODES.genesis[0]}
              GENESIS_IP=${PROM_NODES.genesis[1]}
              MASTER1_HOSTNAME=${PROM_NODES.master1[0]}
              MASTER1_IP=${PROM_NODES.master1[1]}
              MASTER2_HOSTNAME=${PROM_NODES.master2[0]}
              MASTER2_IP=${PROM_NODES.master2[1]}
              WORKER_HOSTNAME=${PROM_NODES.worker[0]}
              WORKER_IP=${PROM_NODES.worker[1]}
           """

           sh "echo '${config}' > tools/gate/config-env"
           sh "sudo ./tools/gate/build.sh ${IMAGE}"

           spec = artf_spec("tools/gate/${PROM_BUNDLE}", ARTF_PROM_BUNDLE)
           artf.publishBuildInfo(artf.upload(spec))
       }
    }


    def prom_up = { hname ->

        spec = artf_spec(ARTF_PROM_BUNDLE, "")
        artf.download(spec)

        sh ("tar -xvf ${PROM_BUNDLE}")

        jn = "join-${hname}.sh"
        vn = "validate-${hname}.sh"

        if (hname == "genesis") {
            jn = "genesis.sh"
        }

        timeout (25) {
            dir("${WORKSPACE}/promenade-bundle") {
               sh ("sudo ./${jn}")
               sh ("sudo ./${vn}")
            }
        }
    }
    stage('Genesis Up'){
        node("${PROM_NODE_BASE}-genesis") {
            prom_up("genesis")
        }
    }

    stage('Master1 Join'){
        node("${PROM_NODE_BASE}-master1") {
            prom_up(PROM_NODES.master1[0])
        }
    }

    stage('Master2 Join'){
        node("${PROM_NODE_BASE}-master2") {
            prom_up(PROM_NODES.master2[0])
        }
    }

    stage('Worker Join'){
        node("${PROM_NODE_BASE}-worker") {
            prom_up(PROM_NODES.worker[0])
        }
    }

    stage('Cluster Validate'){
        node("${PROM_NODE_BASE}-genesis") {
            timeout (30) {
                dir("${WORKSPACE}/promenade-bundle") {
                   sh ('sudo ./validate-cluster.sh')
                   sh ('sudo ./final-validation.sh')
                }
            }
            sh 'sudo kubectl get pods --all-namespaces -o wide'
        }
    }
    stage('Image Publish'){
        node("${PROM_NODE_BASE}-build"){
            if (GERRIT_EVENT_TYPE == 'change-merged') {
                publish.artifactory (IMAGE, IMAGE_LATEST)
                publish.quay (IMAGE, QUAY_IMAGE_LATEST)
            }
        }
    }
}
