import com.att.nccicd.config.conf as config
conf = new config(env).CONF

import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput


IMAGE_PREFIX = "att-comdev"
VERSION = 1.0
GERRIT_CLONE_URL = "ssh://" + conf.SSH_REPO_USER + "@" + conf.GERRIT_URL
REFSPEC = "refs/changes/*:refs/changes/*"
ARTF_PATH = "minimirror/gpgkey-private"
def REVISION = "MANUAL"
def build_releases = []

IMAGE_LATEST = "${ARTF_DOCKER_URL}/${IMAGE_PREFIX}/mini-mirror:latest"
IMAGE_DOCKER_LATEST = "${ARTF_DOCKER_URL}/${IMAGE_PREFIX}/mini-mirror:latest"

if (env.GERRIT_EVENT_TYPE) {
    currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"
} else {
    currentBuild.displayName = "#${BUILD_NUMBER}"
}

if (env.GERRIT_PATCHSET_REVISION) {
    REVISION = "$GERRIT_PATCHSET_REVISION"
}

IMAGE_DOCKER = "${ARTF_DOCKER_URL}/${IMAGE_PREFIX}/mini-mirror:${REVISION}-docker-ubuntu"

assert BUILD_TYPE
if (BUILD_TYPE == "xenial") {
    build_releases << "xenial"
} else if (BUILD_TYPE == "bionic") {
    build_releases << "bionic"
} else if (BUILD_TYPE == "all") {
    build_releases = ["xenial", "bionic"]
}

def label = "worker-${UUID.randomUUID().toString()}"
try {
    podTemplate(label: label,yaml: """
                apiVersion: v1
                kind: Pod
                spec:
                  securityContext:
                    runAsUser: 0
                  nodeSelector:
                    dind-node: enabled
                """, containers: [
                    containerTemplate(name: "ubuntu",
                                      image: "${ARTF_DOCKER_URL}/ubuntu_copy/18.04/nc-ubuntu-18.04@sha256:a08437dd42b2d095cef653d485414fe351401c55b480f16908d5911e4ba75c0f",
                                      command: "cat",
                                      ttyEnabled: true)],
                    volumes: [hostPathVolume(hostPath: '/var/run/dindproxy/docker.sock', mountPath: '/var/run/docker.sock')]) {
        node(label){
            container("ubuntu") {

                stage('Setup environment') {
                    sh "apt-get install sudo make docker.io curl wget -y"
                }
                stage("checkout") {
                    if (env.GERRIT_PROJECT) {
                        if ("${GERRIT_PROJECT}" == "${MINIMIRROR_PROJECT}" && env.GERRIT_NEWREV){
                            echo ("${GERRIT_NEWREV} is being used to override refspec: ${GERRIT_REFSPEC}")
                            gerrit.cloneToBranch("https://opendev.org/openstack/openstack-helm-images",  "${GERRIT_NEWREV}", "${JOB_BASE_NAME}")
                        } else if ("${GERRIT_PROJECT}" == "${MINIMIRROR_PROJECT}" && GERRIT_EVENT_TYPE != 'change-merged') {
                            gerrit.cloneToBranch("https://opendev.org/openstack/openstack-helm-images", "${GERRIT_PATCHSET_REVISION}", "${JOB_BASE_NAME}")
                        }
                    } else {
                        sh "mkdir -p  ${JOB_BASE_NAME}"
                        dir("${WORKSPACE}/${JOB_BASE_NAME}") {
                            git "https://opendev.org/openstack/openstack-helm-images"
                            sh "git checkout master"
                        }
                    }
                    dir ("minimirror/mini-mirror") {
                        if (env.GERRIT_PROJECT && "${GERRIT_PROJECT}" != "${MINIMIRROR_PROJECT}"){
                            if (GERRIT_EVENT_TYPE == 'change-merged') {
                              gerrit.cloneProject(GERRIT_CLONE_URL + "/" + conf.GLOBAL_REPO, GERRIT_NEWREV, REFSPEC, conf.GLOBAL_REPO, conf.JENKINS_GERRIT_MTN5_CRED_ID)
                            } else {
                              gerrit.cloneProject(GERRIT_CLONE_URL + "/" + conf.GLOBAL_REPO, GERRIT_REFSPEC, REFSPEC, conf.GLOBAL_REPO, conf.JENKINS_GERRIT_MTN5_CRED_ID)
                            }
                        } else {
                            gerrit.cloneProject(GERRIT_CLONE_URL + "/" + conf.GLOBAL_REPO, CLCP_MANIFESTS, REFSPEC, conf.GLOBAL_REPO, conf.JENKINS_GERRIT_MTN5_CRED_ID)
                        }
                        sh "wget -e use_proxy=no https://${ARTF_WEB_URL}/artifactory/${ARTF_PATH}"

                        if (env.GERRIT_PATCHSET_REVISION) {
                            build_releases = []
                            files = gerrit.getChangedFiles(conf.GLOBAL_REPO, "${GERRIT_PATCHSET_REVISION}")
                            files.each {
                                if ( $it ==~ /xenial/ ) {
                                    build_releases << "xenial"
                                    break
                                }
                            }
                            files.each {
                                if ( $it ==~ /bionic/ ) {
                                    build_releases << "bionic"
                                    break
                                }
                            }
                        }
                    }
                }
                stage('Build') {
                    dir ("minimirror/mini-mirror") {
                    withCredentials([string(
                        credentialsId: 'mini-mirror-pass', variable: 'MINI_PASS')]) {
                    build_releases.each { UBUNTU_REL_NAME ->
                        def env = [
                            "NO_PROXY=${NO_PROXY}",
                            "no_proxy=${NO_PROXY}",
                            "REGISTRY_URI=${ARTF_DOCKER_URL}/att-comdev/",
                            "VERSION=${REVISION}",
                            "DISTRO=ubuntu_xenial",
                            "HTTP_PROXY=${HTTP_PROXY}",
                            "HTTPS_PROXY=${HTTP_PROXY}",
                            "APTLY_CONFIG_PATH=/aic-clcp-manifests/tools/mini-mirror/${UBUNTU_REL_NAME}/etc/aptly.conf",
                            "MIRROR_SOURCE_DIR=/aic-clcp-manifests/tools/mini-mirror/${UBUNTU_REL_NAME}",
                            "RELEASE_SIGN_KEY_PATH=/gpgkey-private",
                            "RELEASE_SIGN_KEY_PASSPHRASE=${MINI_PASS}"
                        ]
                            withEnv(env) {
                                sh "bash -xe build.sh"
                            }
                            sh "docker images"
                    }
                    }
                }
                }
                stage('Image Publish') {
                    build_releases.each { UBUNTU_REL_NAME ->
                        if (env.GERRIT_PATCHSET_REVISION) {
                            IMAGE = "${ARTF_DOCKER_URL}/${IMAGE_PREFIX}/mini-mirror:${GERRIT_PATCHSET_REVISION}-ubuntu_xenial"
                            publish.artifactory (IMAGE, "${IMAGE_PREFIX}/${JOB_BASE_NAME}:${GERRIT_PATCHSET_REVISION}-ubuntu-${UBUNTU_REL_NAME}.${BUILD_ID}")
                            if (GERRIT_EVENT_TYPE == 'change-merged') {
                                publish.artifactory (IMAGE, IMAGE_LATEST)
                            }
                        } else {
                            IMAGE = "${ARTF_DOCKER_URL}/${IMAGE_PREFIX}/mini-mirror:MANUAL-ubuntu_xenial"
                            publish.artifactory (IMAGE, "${IMAGE_PREFIX}/${JOB_BASE_NAME}:MANUAL-ubuntu-${UBUNTU_REL_NAME}.${BUILD_ID}")
                        }
                    }
                }
            }
        }
    }
    // catch both errors and exceptions
} catch (Throwable err) {
    currentBuild.result = 'FAILURE'
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        email.sendMail(recipientProviders: [developers(), requestor()],
                       to: env.EMAIL_LIST)
    }
    throw err
}
