
JENKINS_VM_LAUNCH = 'local-vm-launch'

PROM_NODE_BASE = "armada-${BUILD_NUMBER}"
PROM_NODE_TMPL = "promenade/promenade.yaml"
ARMADA_VERSION = "0.1.0-${GERRIT_CHANGE_NUMBER}"
ARMADA_PS = "${GERRIT_CHANGE_NUMBER}.${GERRIT_PATCHSET_NUMBER}"
PROJECT_REF ="${GERRIT_REFSPEC}"

ARTF_URL = env.ARTF_DOCKER_URL
ARTF_ARMADA_IMAGE="${ARTF_URL}/ucp-patchset/armada:${ARMADA_VERSION}"
PROM_BUNDLE = "promenade-bundle-${BUILD_NUMBER}.tgz"
ARTF_PROM_BUNDLE = "ucp/armada-bundle/${ARMADA_VERSION}/${PROM_BUNDLE}"
ARTF_ARMADA_MANIFEST = "clcp-integration/region/atl-lab1/armada/openstack-helm.yaml"
PROMENADE_IMAGE="${ARTF_URL}/ucp/promenade:latest"
ARMADA_IMAGE="${ARTF_URL}/ucp/armada:${ARMADA_VERSION}"
ARMADA_IMAGE_LATEST="${ARTF_URL}/ucp/armada:latest"

// node info { node : [hostname, ip] }
PROM_NODES = [ build:[], genesis:[], master1:[], master2:[], worker:[]]

currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"
// wrapper for main flow
def vms(body) {

    try {
        stage('Nodes Launch') {
            node(JENKINS_VM_LAUNCH) {
                PROM_NODES.each { key, value ->
                    vm.jenkins_vm_launch("${PROM_NODE_BASE}-${key}",
                                         "${env.HOME}/${PROM_NODE_TMPL}")
                }
            }
        }

        body()

    } catch (error) {
        slack.msg("Pipeline failed: ${error}")
        error(error)

    } finally {
        node(JENKINS_VM_LAUNCH) {
            stage("Publish Jenkins Logs"){
                try{
                    sh "curl -s -o ./${GERRIT_CHANGE_NUMBER}-${GERRIT_PATCHSET_NUMBER}.log ${BUILD_URL}consoleText"
                    nexusArtifactUploader artifacts: [[ artifactId: 'armada',
                                                        classifier: '',
                                                        file: GERRIT_CHANGE_NUMBER+'-'+GERRIT_PATCHSET_NUMBER+'.log']],
                                                        credentialsId: 'nexus3',
                                                        groupId: 'att-comdev',
                                                        nexusUrl: '$NEXUS3_URL',
                                                        nexusVersion: 'nexus3',
                                                        protocol: 'http',
                                                        repository: 'att-comdev-jenkins-logs',
                                                        version: '$BUILD_NUMBER'
                } catch (Exception e){
                    //TODO slack notify of failure to upload Jenkins logs to cicd team.
                }
            }
            stage('Nodes Destroy') {
                PROM_NODES.each { key, value ->
                    vm.jenkins_vm_destroy("${PROM_NODE_BASE}-${key}")
                }
            }
        }
    }
}

vms {
    stage('Nodes Wait'){
        def get_hname = {
            sh(returnStdout: true, script: 'echo -n $(hostname)')
        }

        def get_ip = { iface ->
            cmd = "ifconfig ${iface} | grep 'inet addr:' | cut -d: -f2 | awk '{ print \$1}'"
            sh(returnStdout: true, script: cmd).trim()
        }

        timeout (15) {
            PROM_NODES.each { key, value ->
                node ("${PROM_NODE_BASE}-${key}") {
                    PROM_NODES."${key}" = [get_hname(), get_ip('ens3')]
                }
            }
            print " *** Prom node info ***\n${PROM_NODES}"
        }
    }

    stage('Promenade Build'){
        node("${PROM_NODE_BASE}-build"){
            gerrithub.clone("att-comdev/promenade", "*/master")
            if(env.GERRIT_NEWREV){
                echo ("${GERRIT_NEWREV} is being used to override refspec: ${GERRIT_REFSPEC}")
                PROJECT_REF=env.GERRIT_NEWREV
            }
            checkout poll: false,
                scm: [$class: 'GitSCM',
                branches: [[name: "${PROJECT_REF}"]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'RelativeTargetDirectory',
                              relativeTargetDir: "armada"]],
                submoduleCfg: [],
                userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                    url: 'https://review.gerrithub.io/att-comdev/armada']]]

            sh "sudo apt-get install -y docker.io curl"

            sh "sudo docker pull ${PROMENADE_IMAGE}"

            dir(env.WORKSPACE+"/armada"){
                sh "sudo docker build -t ${ARTF_ARMADA_IMAGE} ."
                sh 'sudo docker images | grep armada'
            }
            withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
                    usernameVariable: 'ARTIFACTORY_USER',
                    passwordVariable: 'ARTIFACTORY_PASSWORD')]) {

                    opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'

                    sh "sudo docker login ${opts} ${ARTF_URL}"
                    sh "sudo docker push ${ARTF_ARMADA_IMAGE}"
            }
        }
    }

    artf = Artifactory.server 'artifactory'

    def artf_spec = { pattern, target ->
        return """
            {"files": [{
                "pattern": "${pattern}",
                "target": "${target}",
                "flat": "true"
            }]}
        """
    }

    stage('Promenade Config'){
       node("${PROM_NODE_BASE}-build"){

           def config = """
              IMAGE_ARMADA=${ARTF_ARMADA_IMAGE}
              CALICO_IP_AUTODETECTION_METHOD='interface=ens3'
              GENESIS_HOSTNAME=${PROM_NODES.genesis[0]}
              GENESIS_IP=${PROM_NODES.genesis[1]}
              MASTER1_HOSTNAME=${PROM_NODES.master1[0]}
              MASTER1_IP=${PROM_NODES.master1[1]}
              MASTER2_HOSTNAME=${PROM_NODES.master2[0]}
              MASTER2_IP=${PROM_NODES.master2[1]}
              WORKER_HOSTNAME=${PROM_NODES.worker[0]}
              WORKER_IP=${PROM_NODES.worker[1]}
           """
           sh "echo '${config}' > tools/gate/config-env"

           timeout(30) {
               sh "sudo bash tools/gate/build.sh ${PROMENADE_IMAGE}"
           }

           spec = artf_spec("tools/gate/${PROM_BUNDLE}", ARTF_PROM_BUNDLE)
           artf.publishBuildInfo(artf.upload(spec))
       }
    }

    def prom_up = { hname ->

        spec = artf_spec(ARTF_PROM_BUNDLE, "")
        artf.download(spec)

        sh ("tar -xvf ${PROM_BUNDLE}")

        jn = "join-${hname}.sh"
        vn = "validate-${hname}.sh"

        if (hname == "genesis") {
            jn = "genesis.sh"
        }

        timeout (30) {
            dir("${WORKSPACE}/promenade-bundle") {
               sh ("sudo bash ${jn}")
               sh ("sudo bash ${vn}")
            }
        }
    }

    stage('Genesis Up'){
        node("${PROM_NODE_BASE}-genesis") {
            prom_up("genesis")
        }
    }
    stage('Master1 Join'){
        node("${PROM_NODE_BASE}-master1") {
            prom_up(PROM_NODES.master1[0])
        }
    }

    stage('Master2 Join'){
        node("${PROM_NODE_BASE}-master2") {
            prom_up(PROM_NODES.master2[0])
        }
    }

    stage('Worker Join'){
        node("${PROM_NODE_BASE}-worker") {
            prom_up(PROM_NODES.worker[0])
        }
    }

    stage('Cluster Validate'){
        node("${PROM_NODE_BASE}-genesis") {
            timeout (30) {
                dir("${WORKSPACE}/promenade-bundle") {
                   sh ('sudo bash validate-cluster.sh')
                   sh ('sudo bash final-validation.sh')
                }
            }
            sh 'sudo kubectl get pods --all-namespaces -o wide'
        }
    }
    stage('Publish'){
        node("${PROM_NODE_BASE}-build"){
            withCredentials([usernamePassword(credentialsId: 'jenkins-quay',
                usernameVariable: 'QUAY_USER',
                passwordVariable: 'QUAY_PASSWORD')]) {

                opts = '-u $QUAY_USER -p $QUAY_PASSWORD'
                sh "sudo docker login ${opts} quay.io"
                sh "sudo docker tag ${ARTF_ARMADA_IMAGE} ${QUAY_URL}/attcomdev/armada:${ARMADA_PS}"

                sh "sudo docker push ${QUAY_URL}/attcomdev/armada:${ARMADA_PS}"

                if (GERRIT_EVENT_TYPE == 'change-merged') {
                    sh "sudo docker tag ${QUAY_URL}/attcomdev/armada:${ARMADA_PS} ${QUAY_URL}/attcomdev/armada:latest"
                    sh "sudo docker push ${QUAY_URL}/attcomdev/armada:latest"
                }
            }
            withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
                    usernameVariable: 'ARTIFACTORY_USER',
                    passwordVariable: 'ARTIFACTORY_PASSWORD')]) {

                    opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'

                    sh "sudo docker login ${opts} ${ARTF_URL}"
                    sh "sudo docker tag ${ARTF_ARMADA_IMAGE} ${ARMADA_IMAGE}"
                    sh "sudo docker push ${ARMADA_IMAGE}"
                if (GERRIT_EVENT_TYPE == 'change-merged') {
                    sh "sudo docker tag ${ARTF_ARMADA_IMAGE} ${ARMADA_IMAGE_LATEST}"
                    sh "sudo docker push ${ARMADA_IMAGE_LATEST}"
                }
            }
        }
    }
}