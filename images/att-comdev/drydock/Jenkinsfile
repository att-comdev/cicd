JENKINS_VM_LAUNCH='local-vm-launch'
NODE_NAME="${JOB_BASE_NAME}-${BUILD_NUMBER}"
NODE_TMPL="drydock/drydock.yaml"

IMAGE_TAG="${GERRIT_PATCHSET_REVISION}"
DOCKER_REGISTRY="${ARTF_DOCKER_URL}"
IMAGE_PREFIX="att-comdev"
IMAGE_NAME="${JOB_BASE_NAME}"
IMAGE_LATEST = "${IMAGE_PREFIX}/${JOB_BASE_NAME}:latest"
QUAY_IMAGE_LATEST="attcomdev/${JOB_BASE_NAME}:latest"

IMAGE="${DOCKER_REGISTRY}/${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}"

vm(NODE_NAME, NODE_TMPL) {
    stage('Checkout'){
        if(env.GERRIT_NEWREV){
            echo ("${GERRIT_NEWREV} is being used to override refspec: ${GERRIT_REFSPEC}")
            IMAGE_TAG=env.GERRIT_NEWREV
            IMAGE="${DOCKER_REGISTRY}/${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}"
        }
        if(GERRIT_EVENT_TYPE != 'change-merged') {
            checkout poll: false,
            scm: [$class: 'GitSCM',
              branches: [[name: "${IMAGE_TAG}"]],
              doGenerateSubmoduleConfigurations: false,
              extensions: [[$class: 'LocalBranch',
                            localBranch: 'jenkins'],
                           [$class: 'RelativeTargetDirectory',
                            relativeTargetDir: ""]],
                            submoduleCfg: [],
                            userRemoteConfigs: [[refspec: '${GERRIT_REFSPEC}',
                                                 url: "https://review.gerrithub.io/att-comdev/${JOB_BASE_NAME}"]]]
              sh '''git config user.email "attcomdev.jenkins@gmail.com"
                    git config user.name "Jenkins"
                    git pull --rebase origin master'''
            //gerrithub.cloneToBranch("${IMAGE_PREFIX}/${JOB_BASE_NAME}", IMAGE_TAG,"")
        } else {
            gerrithub.clone("${IMAGE_PREFIX}/${JOB_BASE_NAME}", IMAGE_TAG)
        }

        currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"
    }
    stage('Docker Build') {
        timeout(20){
            sh 'sudo apt-get install make'
            sh "sudo make images IMAGE_PREFIX=att-comdev IMAGE_NAME=${JOB_BASE_NAME} DOCKER_REGISTRY=${ARTF_DOCKER_URL} LABEL='org.label-schema.vcs-ref=${IMAGE_TAG} --label org.label-schema.vcs-url=${GERRIT_CHANGE_URL} --label org.label-schema.version=0.1.0-${BUILD_NUMBER}' IMAGE_TAG=${IMAGE_TAG}"
        }
    }
    stage('Test Coverage') {
        sh 'sudo apt-get install make'
        sh "sudo make coverage_test DOCKER_REGISTRY=${ARTF_DOCKER_URL} IMAGE_PREFIX=att-comdev IMAGE_NAME=${JOB_BASE_NAME} IMAGE_TAG=${IMAGE_TAG}"
    }
    stage('Docker Run') {
        sh "sudo make run_images DOCKER_REGISTRY=${ARTF_DOCKER_URL} IMAGE_PREFIX=att-comdev IMAGE_NAME=${JOB_BASE_NAME} IMAGE_TAG=${IMAGE_TAG}"
    }
    stage('Validate Container') {
        sh "sudo docker inspect ${DOCKER_REGISTRY}/${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}"
    }
    stage('Image Publish'){
        publish.artifactory (IMAGE, "${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}")
        if (GERRIT_EVENT_TYPE == 'change-merged') {
            publish.artifactory (IMAGE, IMAGE_LATEST)
            publish.quay (IMAGE, QUAY_IMAGE_LATEST)
        }
    }
}
