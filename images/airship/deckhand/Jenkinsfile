JENKINS_VM_LAUNCH='local-vm-launch'
NODE_NAME="${JOB_BASE_NAME}-${BUILD_NUMBER}"
NODE_TMPL="deckhand/deckhand.yaml"

IMAGE_TAG="${GERRIT_PATCHSET_REVISION}"
DOCKER_REGISTRY="${ARTF_DOCKER_URL}"
IMAGE_PREFIX="att-comdev"
IMAGE_LATEST = "${IMAGE_PREFIX}/${JOB_BASE_NAME}:latest"
QUAY_IMAGE_LATEST="attcomdev/${JOB_BASE_NAME}:latest"

currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"

vm(NODE_NAME, NODE_TMPL) {
    stage('Checkout'){
        if(env.GERRIT_NEWREV){
            echo ("${GERRIT_NEWREV} is being used to override refspec: ${GERRIT_REFSPEC}")
            IMAGE_TAG="${GERRIT_NEWREV}"
        }
        IMAGE="${DOCKER_REGISTRY}/${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}.${BUILD_NUMBER}"
        gerrit.cloneToBranch("https://git.openstack.org/openstack/airship-${JOB_BASE_NAME}", IMAGE_TAG,"")
        if(GERRIT_EVENT_TYPE != 'change-merged') {
            sh '''git config user.email "airship.jenkins@gmail.com"
                  git config user.name "Jenkins"
                  git pull --rebase origin master'''
        }
        currentBuild.displayName = "#${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"
    }
    stage('Docker Build and Run ') {
        timeout(20){
            sh "sudo make images IMAGE_PREFIX=att-comdev IMAGE_NAME=${JOB_BASE_NAME} DOCKER_REGISTRY=${ARTF_DOCKER_URL} LABEL='org.label-schema.vcs-ref=${IMAGE_TAG} --label org.label-schema.vcs-url=${GERRIT_CHANGE_URL} --label org.label-schema.version=0.1.0-${BUILD_NUMBER}' IMAGE_TAG=${IMAGE_TAG}.${BUILD_NUMBER}"
        }
    }
    stage ('Functional Tests'){
        sh 'sudo apt-get -y install tox ara'
        timeout(10){
            withEnv(["DECKHAND_IMAGE=${IMAGE}",
                     "DECKHAND_TEST_DIR=deckhand/tests/functional/gabbits",
                     "DECKHAND_API_THREADS=4"]) {
                sh 'tox -e functional'
            }
        }
    }
    stage('Image Publish'){
        publish.artifactory (IMAGE, "${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}.${BUILD_NUMBER}")
        if (GERRIT_EVENT_TYPE == 'change-merged') {
            publish.artifactory (IMAGE, IMAGE_LATEST)
            publish.quay (IMAGE, QUAY_IMAGE_LATEST)
        }
    }
}
