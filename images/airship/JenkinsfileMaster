currentBuild.displayName = "#${BUILD_NUMBER}-${GERRIT_EVENT_TYPE}"
IMAGE_TAG="${GERRIT_PATCHSET_REVISION}"
IMAGE_PREFIX="airship"
IMAGE_LATEST = "${IMAGE_PREFIX}/${JOB_BASE_NAME}:latest"
PIP_TRUSTED_HOST="foo.com"
PIP_INDEX_URL="https://pypi.org/simple"
QUAY_IMAGE_LATEST="${IMAGE_PREFIX}/${JOB_BASE_NAME}:latest"
IMAGE="${ARTF_DOCKER_URL}/${IMAGE_PREFIX}/${JOB_BASE_NAME}"
PYTHON_BASE_IMAGES = [ "pegleg" : "att-comdev/python:3.6" ,
                       "promenade" : "att-comdev/python:3.6" ]

UBUNTU_BASE_IMAGES = [ "airflow" : "att-comdev/ubuntu:xenial",
                       "armada" : "att-comdev/ubuntu:xenial",
                       "deckhand" : "att-comdev/ubuntu:xenial",
                       "drydock" : "att-comdev/ubuntu:xenial",
                       "maas-region-controller" : "att-comdev/ubuntu:xenial",
                       "maas-rack-controller" : "att-comdev/ubuntu:xenial",
                       "shipyard" : "att-comdev/ubuntu:xenial",
                       "sstream-cache" : "att-comdev/ubuntu:xenial" ]
SEMANTIC_RELEASE_VERSION = "0.1.0"

vm(flavor: "m1.large") {

    stage('Build & Checkout'){
        vm2.setproxy()
        if (GERRIT_EVENT_TYPE == 'change-merged') {
            echo ("${GERRIT_NEWREV} is being used to override refspec: ${GERRIT_REFSPEC}")
            IMAGE_TAG="${GERRIT_NEWREV}"
        }
        gerrit.cloneToBranch("${GIT_REPO}", IMAGE_TAG,"")

        if(GERRIT_EVENT_TYPE != 'change-merged') {
            gerrit.rebase()
        }

        // Either one of those images is used as a base image
        UBUNTU_BASE_IMAGE = UBUNTU_BASE_IMAGES."${JOB_BASE_NAME}"
        PYTHON_BASE_IMAGE = PYTHON_BASE_IMAGES."${JOB_BASE_NAME}"
        echo ("Base images: UBUNTU ${UBUNTU_BASE_IMAGE} PYTHON: ${PYTHON_BASE_IMAGE} ")

        withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
                                          usernameVariable: 'ARTIFACTORY_USER',
                                          passwordVariable: 'ARTIFACTORY_PASSWORD')]) {

            opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'
            sh "docker login ${opts} ${ARTF_SECURE_DOCKER_URL}"
        }

        // Let's try to add meta data in the image for future tracing
        def base_sha256 = null
        if (UBUNTU_BASE_IMAGE != null) {
            sh "docker pull ${ARTF_DOCKER_URL}/${UBUNTU_BASE_IMAGE}"
            sh "docker tag ${ARTF_DOCKER_URL}/${UBUNTU_BASE_IMAGE} ${UBUNTU_BASE_IMAGE}"
            def cmd="docker inspect --format='{{index .RepoDigests 0}}' ${UBUNTU_BASE_IMAGE}"
            base_sha256 = sh(returnStdout: true, script: cmd).trim()
        }
        if (PYTHON_BASE_IMAGE != null) {
            sh "docker pull ${ARTF_DOCKER_URL}/${PYTHON_BASE_IMAGE}"
            sh "docker tag ${ARTF_DOCKER_URL}/${PYTHON_BASE_IMAGE} ${PYTHON_BASE_IMAGE}"
            def cmd="docker inspect --format='{{index .RepoDigests 0}}' ${PYTHON_BASE_IMAGE}"
            base_sha256 = sh(returnStdout: true, script: cmd).trim()
        }

        // Note 1: code is kind of flaky here. The Makefile invokes docker
        // with --label $(LABEL) hence we ommit here the --label at the beginning of the
        // string.
        def LABELS = "'org.label-schema.vcs-ref=${IMAGE_TAG}\
          --label org.label-schema.vcs-url=${GERRIT_CHANGE_URL}\
          --label org.label-schema.base-image=${base_sha256}\
          --label org.label-schema.version=${SEMANTIC_RELEASE_VERSION}.${BUILD_NUMBER}"

        if (env.GERRIT_EVENT_TYPE == 'change-merged') {
           LABELS += " --label org.label-schema.vcs-event=${GERRIT_EVENT_TYPE}'"
        } else {
           LABELS += "'"
        }

        // Note 1: docker-ce is supposed to be installed on the build machine.
        // Note 2: all the airship components must support the make images target
        sh "sudo apt-get update -y"
        sh "sudo apt-get install -y make"

        // Note 1: Either PYTHON_BASE_IMAGE or UBUNTU_BASE_IMAGE is null
        // Note 2: IMAGE_NAME is also a key parameter of the Makefile which prevent
        //         all the images supported by the Makefile from being rebuild.
        //         Hence we need on JenkinsJob per image
        sh "sudo make images SSTREAM_IMAGE=https://${ARTF_WEB_URL}/simplestream USE_PROXY=true PROXY=${HTTP_PROXY} IMAGE_PREFIX=${IMAGE_PREFIX} \
                             PYTHON_BASE_IMAGE=${PYTHON_BASE_IMAGE} UBUNTU_BASE_IMAGE=${UBUNTU_BASE_IMAGE} IMAGE_NAME=${JOB_BASE_NAME} \
                             DOCKER_REGISTRY=${ARTF_DOCKER_URL} LABEL=${LABELS} IMAGE_TAG=${IMAGE_TAG} \
                             PIP_TRUSTED_HOST=${PIP_TRUSTED_HOST} PIP_INDEX_URL=${PIP_INDEX_URL}"

    }
    stage('Publish'){
        publish.artifactory("${IMAGE}:${IMAGE_TAG}","test/${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}")
        if (GERRIT_EVENT_TYPE == 'change-merged') {
            //Only going to store images on merged into this directory
            publish.artifactory("${IMAGE}:${IMAGE_TAG}","${IMAGE_PREFIX}/${JOB_BASE_NAME}:${IMAGE_TAG}.${BUILD_TIMESTAMP}")
            publish.artifactory ("${IMAGE}:${IMAGE_TAG}", IMAGE_LATEST)
        }
    }
}
