import groovy.json.*

// Proxy settings:
PROXY="http_proxy=${HTTP_PROXY} https_proxy=${HTTPS_PROXY}"


  def git_clone(gerrit_project, gerrit_prject, gerrit_refspec){
    print "here"
    def project_name=gerrit_project
    def local_path=gerrit_project
    def refspec=gerrit_refspec
    def gerrit_url="${INTERNAL_GERRIT_URL}"
    print "here12"
    sh "rm -rf $local_path"
print "here2"
    sh "git clone $gerrit_url/$project_name $local_path"
print "here3"
    sh "pushd $local_path"
    if ( refspec ==~ "refs.*?" ){
        sh "git fetch $gerrit_url/$project_name $refspec"
        sh "git checkout FETCH_HEAD"
}
    else{
        sh "git checkout $refspec"
}

    sh "popd"
}

def use_venv(){
    if ( env.USE_VENV == "true" )
        sh "virtualenv venv"
        sh "source venv/bin/activate"

    def filePath = 'requirements.txt'
    def file = new File(filePath)

        if (file.exists()){
          sh "pip install -r requirements.txt"
}
    else{
        print "Building package out of venv"
}
}

def build_package() {
    sh "export ${PROXY} && use_venv"
    sh "unset http_proxy https_proxy"
    sh "cd ${GERRIT_PROJECT}"
    sh "python setup.py sdist"

}

vm2() {

stage('Generate pip packages for openstack clients'){
//JOB PARAMETERS:

GERRIT_PROJECT=env.GERRIT_PROJECT
GERRIT_BRANCH=env.GERRIT_BRANCH
GERRIT_EVENT_TYPE=env.GERRIT_EVENT_TYPE
GERRIT_REFSPEC=env.GERRIT_REFSPEC

     git_clone(GERRIT_PROJECT, GERRIT_PROJECT, GERRIT_REFSPEC)
     build_package
}
}

