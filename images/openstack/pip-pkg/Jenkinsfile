import groovy.json.*

JENKINS_VM_LAUNCH='local-vm-launch'
NODE_NAME="${JOB_BASE_NAME}-${BUILD_NUMBER}"
NODE_TMPL="docker/ubuntu.m1.medium.yaml"

// Proxy settings:
PROXY="http_proxy=http://one.proxy.att.com:8888/ https_proxy=http://one.proxy.att.com:8888/"

 def assert_var_empty(name){
    def name=name
    if ( name == null && "GERRIT_BRANCH" != "proposed"){
        print 'Variable $name is empty or not set.'
        print 'Exiting now.'
        exit 1
}
}


  def git_clone(gerrit_project, gerrit_prject, gerrit_refspec){
    def project_name=gerrit_project
    def local_path=gerrit_project
    def refspec=gerrit_refspec
    def gerrit_url='ssh://jenkins@gerrit.mtn5.cci.att.com:29418'

    if ( refspec == null){
        echo "Empty refspec given"
        exit 1
}

    sh "rm -rf $local_path"

    sh "git clone $gerrit_url/$project_name $local_path"

    sh "pushd $local_path"
    if ( refspec ==~ "refs.*?" ){
        sh "git fetch $gerrit_url/$project_name $refspec"
        sh "git checkout FETCH_HEAD"
}
    else{
        sh "git checkout $refspec"
}

    sh "popd"
}

def use_venv(){
    if ( env.USE_VENV == "true" )
        sh "virtualenv venv"
        sh "source venv/bin/activate"

    def filePath = 'requirements.txt'
    def file = new File(filePath)

        if (file.exists()){
          sh "pip install -r requirements.txt"
}
    else{
        print "Building package out of venv"
}
}

def build_package() {
    sh "export ${PROXY} && use_venv"
    sh "unset http_proxy https_proxy"
    sh "cd ${GERRIT_PROJECT}"
    sh "python setup.py sdist"

}

vm(NODE_NAME, NODE_TMPL) {

//JOB PARAMETERS:
assert_var_empty GERRIT_PROJECT
assert_var_empty GERRIT_REFSPEC
assert_var_empty GERRIT_BRANCH
assert_var_empty GERRIT_EVENT_TYPE

GERRIT_PROJECT=env.GERRIT_PROJECT
GERRIT_BRANCH=env.GERRIT_BRANCH
GERRIT_EVENT_TYPE=env.GERRIT_EVENT_TYPE
GERRIT_REFSPEC=env.GERRIT_REFSPEC
COMPONENT_NAME=sh "`echo env.GERRIT_PROJECT | sed "s/mos-//"`"

     sh "git_clone $GERRIT_PROJECT $GERRIT_PROJECT $GERRIT_REFSPEC"
     build_package
}
