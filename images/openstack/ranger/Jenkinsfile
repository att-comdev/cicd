import com.att.nccicd.config.conf as ncconfig

ncconf = new ncconfig(env).CONF

IMAGE_PREFIX="openstack"
IMAGE_TAG = "${IMAGE_PREFIX}/${JOB_BASE_NAME}"
IMAGE_URL = "${ARTF_DOCKER_URL}/${IMAGE_TAG}"
IMAGE_LATEST = "${IMAGE_PREFIX}/${JOB_BASE_NAME}:latest"
IMAGE_COMMIT = "${IMAGE_PREFIX}/${JOB_BASE_NAME}:${GERRIT_PATCHSET_REVISION}.${BUILD_TIMESTAMP}"
IMAGE_PATCHSET = "${IMAGE_PREFIX}/test/${JOB_BASE_NAME}:${GERRIT_PATCHSET_REVISION}.${BUILD_TIMESTAMP}"
UPSTREAM_URL = "https://review.opendev.org"
RANGER_USER=ncconf.RANGER_USER
RANGER_AGENT_USER=ncconf.RANGER_AGENT_USER

currentBuild.displayName = "${JOB_BASE_NAME} build #${BUILD_NUMBER} ${GERRIT_EVENT_TYPE}"

def label = "worker-${UUID.randomUUID().toString()}"

try {
    podTemplate(label: label,yaml: """
               apiVersion: v1
               kind: Pod
               spec:
                 securityContext:
                   runAsUser: 0
                 nodeSelector:
                   jenkins-node: enabled
               """, containers: [
                   containerTemplate(name: "ubuntu",
                                     image: "${ARTF_DOCKER_URL}/ubuntu_copy/18.04/nc-ubuntu-18.04@sha256:a08437dd42b2d095cef653d485414fe351401c55b480f16908d5911e4ba75c0f",
                                     command: "cat",
                                     ttyEnabled: true)],
                   volumes: [hostPathVolume(hostPath: '/var/run/dindproxy/docker.sock', mountPath: '/var/run/docker.sock')]) {
        node(label){
            container("ubuntu"){
                stage('Checkout'){
                    sh 'apt-get -y install make docker.io'
                    IMAGE = "${ARTF_DOCKER_URL}/${IMAGE_PREFIX}/${JOB_BASE_NAME}:${GERRIT_PATCHSET_REVISION}"
                    if (GERRIT_EVENT_TYPE == 'replace-latest') {
                        gerrit.clone("${UPSTREAM_URL}/${REPO_NAME}", "master/origin")
                    } else {
                        gerrit.cloneToBranch("${UPSTREAM_URL}/${REPO_NAME}","${GERRIT_PATCHSET_REVISION}","")
                    }

                    if (GERRIT_EVENT_TYPE == 'change-merged') {
                        gerrit.rebase()
                    }
                }

                stage('Docker Build') {
                    timeout(20){
                            sh "make images IMAGE_NAME=${JOB_BASE_NAME} USE_PROXY=true PROXY=${HTTP_PROXY} IMAGE_PREFIX=${IMAGE_PREFIX} DOCKER_REGISTRY=${ARTF_DOCKER_URL} LABEL='org.label-schema.vcs-ref=${GERRIT_PATCHSET_REVISION} --label org.label-schema.vcs-url=${GERRIT_CHANGE_URL} --label org.label-schema.version=0.1.0' IMAGE_TAG=${GERRIT_PATCHSET_REVISION} RANGER_USER=${RANGER_USER} RANGER_AGENT_USER=${RANGER_AGENT_USER}"
                    }
                }

                stage('Docker Run') {
                    timeout(20){
                       sh "docker run ${IMAGE}"
                    }
                }

                stage('Publish'){
                    if (GERRIT_EVENT_TYPE != 'patchset-created') {
                        publish.artifactory ("${IMAGE_URL}:${GERRIT_PATCHSET_REVISION}", IMAGE_LATEST, useSudo=false)
                        publish.artifactory ("${IMAGE_URL}:${GERRIT_PATCHSET_REVISION}", IMAGE_COMMIT, useSudo=false)
                    } else {
                        publish.artifactory ("${IMAGE_URL}:${GERRIT_PATCHSET_REVISION}", IMAGE_PATCHSET, useSudo=false)
                    }
                }
            }
        }
    }
    // catch both errors and exceptions
} catch (Throwable err) {
    currentBuild.result = 'FAILURE'
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        email.sendMail(recipientProviders: [developers(), requestor()],
                       to: env.EMAIL_LIST)
    }
    throw err
}
