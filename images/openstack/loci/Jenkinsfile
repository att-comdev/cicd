
NODE_NAME = "images-loci-${JOB_BASE_NAME}-${BUILD_NUMBER}"
NODE_TMPL = "docker/loci.yaml"

LOCI_REPO = 'https://git.openstack.org/openstack/loci.git'

DIND_IMAGE = "${ARTF_DOCKER_URL}/docker:17.07.0-dind"
NGINX_IMAGE = "${ARTF_DOCKER_URL}/nginx"

LOCAL_WEB_PORT = '8080'
LOCAL_WEB_URL = "http://172.18.0.1:${LOCAL_WEB_PORT}"
NO_PROXY = 'localhost,127.0.0.1,172.18.0.1'

PROJECT = JOB_BASE_NAME
SEMANTIC_RELEASE_VERSION = "0.9.0"

ARTF_REPO = 'openstack'
if (env.GERRIT_EVENT_TYPE == 'patchset-created') {
    ARTF_REPO += '-patchset'
}

if (env.GERRIT_REFSPEC) {
    PROJECT_REF = GERRIT_REFSPEC
    PROJECT_VERSION = GERRIT_CHANGE_ID
    PROJECT_BRANCH = GERRIT_BRANCH
    DISPLAY_PREFIX = GERRIT_EVENT_TYPE
    PROJECT_URL = GERRIT_CHANGE_URL
} else {
    PROJECT_VERSION = ""
    // need to update url
    PROJECT_URL = ""
    PROJECT_BRANCH = PROJECT_REF
    DISPLAY_PREFIX = "manual"
}

PROJECT_CONFIG = [
  'keystone': ['profiles': '"fluent apache ldap"', 'packages': '"pycrypto python-openstackclient"', 'distpackages': ' '],
  'heat':     ['profiles': '"fluent apache"', 'packages': 'pycrypto', 'distpackages': 'curl'],
  'glance':   ['profiles': '"fluent glance ceph"', 'packages': '"pycrypto python-swiftclient"', 'distpackages': ' '],
  'horizon':  ['profiles': '"fluent horizon apache"', 'packages': 'pycrypto', 'distpackages': ' '],
  'cinder':   ['profiles': '"fluent cinder lvm ceph qemu"', 'packages': '"pycrypto python-swiftclient"', 'distpackages': ' '],
  'neutron':  ['profiles': '"fluent neutron linuxbridge openvswitch"', 'packages': 'pycrypto', 'distpackages': ' '],
  'barbican': ['profiles': 'fluent', 'packages': 'pycrypto', 'distpackages': ' '],
  'nova':     ['profiles': '"fluent nova ceph linuxbridge openvswitch configdrive qemu apache"',
               'packages': 'pycrypto', 'distpackages': ' '],

  'mos-keystone': ['profiles': '"fluent apache ldap"', 'packages': '"pycrypto python-openstackclient"', 'distpackages': ' '],
  'mos-heat':     ['profiles': '"fluent apache"', 'packages': 'pycrypto', 'distpackages': 'curl'],
  'mos-glance':   ['profiles': '"fluent glance ceph"', 'packages': '"pycrypto python-swiftclient"', 'distpackages': ' '],
  'mos-horizon':  ['profiles': '"fluent horizon apache"', 'packages': 'pycrypto', 'distpackages': ' '],
  'mos-cinder':   ['profiles': '"fluent cinder lvm ceph qemu"', 'packages': '"pycrypto python-swiftclient"', 'distpackages': ' '],
  'mos-neutron':  ['profiles': '"fluent neutron openvswitch linuxbridge"', 'packages': 'pycrypto', 'distpackages': ' '],
  'mos-nova':     ['profiles': '"fluent nova ceph linuxbridge openvswitch configdrive qemu apache"',
                   'packages': 'pycrypto', 'distpackages': ' '],
  'mos-nova-1804': ['profiles': '"fluent nova ceph linuxbridge openvswitch configdrive qemu apache"',
                    'packages': 'pycrypto', 'distpackages': 'libssl1.0.0'],
  'mos-neutron-sriov': ['profiles': '"fluent neutron linuxbridge openvswitch"',
                        'packages': 'pycrypto', 'distpackages': '"ethtool lshw"']
]

currentBuild.displayName = "#${BUILD_NUMBER} ${DISPLAY_PREFIX} ${PROJECT_BRANCH}"

// handle diffs in stable/<rel>, and <rel>-eol
if (PROJECT_BRANCH.contains('stable/')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('stable/', '')
} else if (PROJECT_BRANCH.contains('-eol')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('-eol', '')
} else if (PROJECT_BRANCH.contains('main/')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('main/', '')
} else if (PROJECT_BRANCH.contains('master/ocata')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('master/', '')
} else if (PROJECT_BRANCH == 'master') {
    if (PROJECT.contains('mos')) {
        PROJECT_RELEASE = 'ocata'
    } else {
        PROJECT_RELEASE = 'rocky'
    }
} else {
    error("Unsupported branch/tag: ${PROJECT_BRANCH}")
}

if (PROJECT.contains('mos')) {
    PROJECT_PREFIX = "loci/mos"
    PROJECT_SUFFIX = PROJECT.split('-')[1]
    PROJECT_REPO = "${INTERNAL_GERRIT_SSH}/mos-${PROJECT_SUFFIX}"
    WHEELS_LATEST = "${ARTF_SECURE_DOCKER_URL}/openstack/${PROJECT_RELEASE}/loci/mos/mos-requirements:e45fe7addc36fb9b7395890d51bea28dff7d773d.2018-06-20_05-28-43"
    IMAGE_BASE = "${ARTF_SECURE_DOCKER_URL}/openstack/${PROJECT_RELEASE}/${PROJECT_PREFIX}"
    DEFAULT_ARGS = " --build-arg FROM=${LOCI_BASE_IMAGE}\
      --build-arg PROJECT=${PROJECT_SUFFIX}\
      --build-arg PROJECT_REF=${PROJECT_REF}\
      --build-arg NO_PROXY=${NO_PROXY}\
      --build-arg http_proxy=${HTTP_PROXY}\
      --build-arg https_proxy=${HTTP_PROXY}\
      --build-arg PROJECT_REPO=${LOCAL_WEB_URL}/repo/${PROJECT}"
} else {
    // openstack community repos by default
    PROJECT_REPO = "https://git.openstack.org/openstack/${PROJECT}"
    PROJECT_PREFIX = "loci/community"
    // project builds assume branch-specific requirements:latest
    // WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstack/$PROJECT_RELEASE/loci/community/requirements:latest"
    // use community release tag images for now
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstackhelm/requirements:$PROJECT_RELEASE"
    IMAGE_BASE = "${ARTF_DOCKER_URL}/${ARTF_REPO}/${PROJECT_RELEASE}/${PROJECT_PREFIX}"
    DEFAULT_ARGS = "--build-arg FROM=${LOCI_BASE_IMAGE}\
      --build-arg PROJECT=${PROJECT}\
      --build-arg PROJECT_REF=${PROJECT_REF}\
      --build-arg NO_PROXY=${NO_PROXY}\
      --build-arg http_proxy=${HTTP_PROXY}\
      --build-arg https_proxy=${HTTP_PROXY}\
      --build-arg PROJECT_REPO=${LOCAL_WEB_URL}/repo/${PROJECT}"
}

if (!PROJECT.contains('requirements')) {
    PROJECT_CONFIG_ARGS = " --build-arg PROFILES=${PROJECT_CONFIG[PROJECT].profiles}\
      --build-arg PIP_PACKAGES=${PROJECT_CONFIG[PROJECT].packages}\
      --build-arg DIST_PACKAGES=${PROJECT_CONFIG[PROJECT].distpackages}"
    WHEELS_ARG = " --build-arg WHEELS=${LOCAL_WEB_URL}/images/wheels.tar"
    if (PROJECT.contains('nova')) {
        EXTRA_BUILD_ARGS = " --build-arg SPICE_REPO=https://gitlab.freedesktop.org/spice/spice-html5.git"
    } else {
        EXTRA_BUILD_ARGS = ""
    }
}

// cmd for running Docker in Docker
DIND = 'sudo docker exec loci-build'

// docker within docker (to get latest docker version on Ubuntu 16.04)
// requires setting {"storage-driver": "overlay2"} option in docker.json
def docker_setup = {
    def opts = '--privileged --name loci-build -e HTTP_PROXY="${HTTP_PROXY}" -e HTTPS_PROXY="${HTTP_PROXY}" '
    def mounts = '-v /var/lib/docker' +
        ' -v $(pwd):/opt/loci'

    sh "sudo docker run -d ${opts} ${mounts} ${DIND_IMAGE}"
    sh "${DIND} sh -cx 'apk update; apk add git'"

    withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
            usernameVariable: 'ARTIFACTORY_USER',
            passwordVariable: 'ARTIFACTORY_PASSWORD')]) {

        opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'
        if (PROJECT.contains('mos')) {
            sh "${DIND} docker login ${opts} ${ARTF_SECURE_DOCKER_URL}"
        } else {
            sh "${DIND} docker login ${opts} ${ARTF_DOCKER_URL}"
        }
    }
}

def version_resolve = {
    // use commit hash when triggered manually
    if (!env.GERRIT_REFSPEC) {

        sh "git clone web/repo/${PROJECT}"

        dir (PROJECT) {
            sh "git fetch ../web/repo/${PROJECT} ${PROJECT_REF}"
            sh "git checkout FETCH_HEAD"
            //Can put back pretty formatting if the commit-id returned is increased to 12
            //make sure that we have no conflicts
            def cmd = "git rev-parse HEAD"
            PROJECT_VERSION = sh(returnStdout: true, script: cmd).trim()
        }
    }
}

// local web server exposing mounted volume /opt/loci/web
// this enables localized use of git/docker artifacts
def nginx_setup = {
    sh "mkdir -p web"

    def opts = '-d -v /opt/loci/web:/usr/share/nginx/html:ro'
    def port = "-p ${LOCAL_WEB_PORT}:80"
    sh "${DIND} docker run ${opts} ${port} ${NGINX_IMAGE}"
}

def repo_clone = {
    sh 'mkdir -p web/repo'

    if (PROJECT.contains('mos')) {
        sh "ssh-keyscan -p ${INTERNAL_GERRIT_PORT} ${INTERNAL_GERRIT_URL} >> ~/.ssh/known_hosts"
    }

    dir ('web/repo') {
        sh "git clone --mirror ${PROJECT_REPO} ${PROJECT}"
        sh "cd ${PROJECT} && git update-server-info"
    }
}

def repo_clone_ssh = {
    withCredentials([sshUserPrivateKey(credentialsId: INTERNAL_GERRIT_KEY,
                                       keyFileVariable: 'SSH_KEY')]) {
        // wrapper for custom git ssh key
        // ssh -i $SSH_KEY $@
        withEnv(["GIT_SSH=/usr/bin/git-ssh-wrapper"]) {
            repo_clone()
        }
    }
}

def repo_mirror = {
    if (PROJECT_REPO.contains('ssh://')) {
        repo_clone_ssh()
    } else {
        repo_clone()
    }
}

def wheels_export = {
    sh "mkdir -p web/images"

    sh "${DIND} docker create --name loci-wheels ${WHEELS_LATEST} bash"
    sh "${DIND} docker export -o /opt/loci/web/images/wheels.tar loci-wheels"
    sh "${DIND} chmod +r /opt/loci/web/images/wheels.tar"
}

def wheels_build = {

    def image_tag = "${IMAGE_BASE}/${PROJECT}:${PROJECT_VERSION}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO} ${DEFAULT_ARGS} --tag ${image_tag}"
    }
    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }
}

def wheels_build_mos = {

    sh "${DIND} docker pull ${LOCI_BASE_IMAGE}"
    def cmd="${DIND} docker inspect --format='{{index .RepoDigests 0}}' ${LOCI_BASE_IMAGE}"
    def base_sha256 = sh(returnStdout: true, script: cmd).trim()

    cmd = "git clone ${LOCI_REPO} && cd loci && git rev-parse HEAD"
    def loci_version = sh(returnStdout: true, script: cmd).trim()

    def labels = " --label org.label-schema.vcs-ref=${PROJECT_VERSION}\
      --label org.label-schema.vcs-url=${PROJECT_URL}\
      --label org.label-schema.loci-ref=${loci_version}\
      --label org.label-schema.base-image=${base_sha256}\
      --label org.label-schema.version=${SEMANTIC_RELEASE_VERSION}.${BUILD_NUMBER}"

    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
       labels += " --label org.label-schema.vcs-event=${GERRIT_EVENT_TYPE}"
    }

    def image_tag = "${IMAGE_BASE}/${PROJECT}:${PROJECT_VERSION}.${BUILD_TIMESTAMP}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO} ${DEFAULT_ARGS} ${labels} --tag ${image_tag}"
    }
    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }
}

def project_build = {

    def image_tag = "${IMAGE_BASE}/${PROJECT}:${PROJECT_VERSION}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO} ${DEFAULT_ARGS} ${EXTRA_BUILD_ARGS} ${PROJECT_CONFIG_ARGS} ${WHEELS_ARG} --tag ${image_tag}"
    }
    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }
}

def project_build_mos = {

    sh "${DIND} docker pull ${LOCI_BASE_IMAGE}"
    def cmd="${DIND} docker inspect --format='{{index .RepoDigests 0}}' ${LOCI_BASE_IMAGE}"
    def base_sha256 = sh(returnStdout: true, script: cmd).trim()

    sh "${DIND} docker pull ${WHEELS_LATEST}"
    cmd="${DIND} docker inspect --format='{{index .RepoDigests 0}}' ${WHEELS_LATEST}"
    def requirements_sha256 = sh(returnStdout: true, script: cmd).trim()

    cmd = "git clone ${LOCI_REPO} && cd loci && git rev-parse HEAD"
    def loci_version = sh(returnStdout: true, script: cmd).trim()

    def labels = " --label org.label-schema.vcs-ref=${PROJECT_VERSION}\
      --label org.label-schema.vcs-url=${PROJECT_URL}\
      --label org.label-schema.loci-ref=${loci_version}\
      --label org.label-schema.base-image=${base_sha256}\
      --label org.label-schema.requirements-image=${requirements_sha256}\
      --label org.label-schema.version=${SEMANTIC_RELEASE_VERSION}.${BUILD_NUMBER}"

    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
       labels += " --label org.label-schema.vcs-event=${GERRIT_EVENT_TYPE}"
    }

    def image_tag = "${IMAGE_BASE}/${PROJECT}:${PROJECT_VERSION}.${BUILD_TIMESTAMP}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO} ${DEFAULT_ARGS} ${EXTRA_BUILD_ARGS} ${PROJECT_CONFIG_ARGS} ${WHEELS_ARG} ${labels} --tag ${image_tag}"
    }
    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }
}

vm2('loci-bootstrap.sh',
         'cicd-ubuntu-16.04-server-cloudimg-amd64',
         'm1.medium',
         '',
         'loci',
         false){

    stage('Docker Setup') {
        docker_setup()
    }

    stage('Local Repo Setup') {
        nginx_setup()
        repo_mirror()
        version_resolve()
    }

    if (PROJECT.contains('requirements')) {
        stage('Build Requirements') {
            if (PROJECT.contains('mos')) {
                wheels_build_mos()
            } else {
                wheels_build()
            }
        }
    } else {
        stage('Wheels Export') {
            wheels_export()
        }
        stage ("Build ${PROJECT.capitalize()}") {
           if (PROJECT.contains('mos')) {
               project_build_mos()
           } else {
               project_build()
           }
        }
    }
}
