
LAUNCH_NODE = 'local-vm-launch'
SLAVE_NODE="images-${JOB_BASE_NAME}-${env.BUILD_NUMBER}"
SLAVE_TMPL = "docker/loci.yaml"

LOCI_REPO = 'https://git.openstack.org/openstack/loci.git'

OPENSTACK_RELEASE = 'newton'
OPENSTACK_COMPONENT_RELEASE = "stable/${OPENSTACK_RELEASE}"
IMAGE_DISTRO = 'ubuntu'

IMAGE_VERSION = "${OPENSTACK_RELEASE}-eol-${IMAGE_DISTRO}"
IMAGE_BASE = "${ARTF_DOCKER_URL}/openstack/newton/loci"
WHEELS_TAG = "${IMAGE_BASE}/loci-requirements:${IMAGE_VERSION}"

PROJECTS = ['keystone', 'heat']


// cmd for running Docker in Docker
DIND = 'sudo docker exec loci-build'

def funcs


def slave_setup() {
    node(LAUNCH_NODE) {
        git 'https://review.gerrithub.io/att-comdev/cicd'

        funcs = load "${WORKSPACE}/common/funcs.groovy"
        funcs.jenkins_slave_launch(SLAVE_NODE, "${env.HOME}/${SLAVE_TMPL}")
    }

    timeout (14) {
        node(SLAVE_NODE) {
            sh 'echo "Welcome $(hostname)"'
        }
    }
}

def slave_cleanup() {
    node(LAUNCH_NODE) {
        funcs.jenkins_slave_destroy(SLAVE_NODE)
    }
}


// docker within docker (to get latest docker version on Ubuntu 16.04)
// requires setting {"storage-driver": "overlay2"} option in docker.json
def docker_setup = {
    def opts = '--privileged --name loci-build'
    def mounts = '-v /var/lib/docker' +
        ' -v $(pwd):/opt/loci'

    sh "sudo docker run -d ${opts} ${mounts} docker:17.07.0-dind"
    sh "${DIND} sh -cx 'apk update; apk add git'"

    def path = "/etc/docker/certs.d/${ARTF_DOCKER_URL}"
    sh "${DIND} mkdir -p ${path}"
    sh "sudo docker cp /usr/local/share/ca-certificates/ca.crt loci-build:${path}"

    withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
            usernameVariable: 'ARTIFACTORY_USER',
            passwordVariable: 'ARTIFACTORY_PASSWORD')]) {

        opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'
        sh "${DIND} docker login ${opts} ${ARTF_DOCKER_URL}"
    }
}


def docker_wheels_build = {
    def args = '--build-arg PROJECT=requirements' +
        " --build-arg PROJECT_REF=stable/${OPENSTACK_RELEASE}"

    sh "${DIND} docker build ${LOCI_REPO} ${args} --tag ${WHEELS_TAG}"
    sh "${DIND} docker push ${WHEELS_TAG}"
}

// localize wheels to support loci use of docker (http) APIs
// url = "http://{}/v2/{}/manifests/{}".format(registry, repo, tag)
def docker_wheels_export = {
    def lw = '/opt/loci/wheels'
    sh "${DIND} mkdir -p ${lw}"

    sh "${DIND} docker create --name loci-wheels ${WHEELS_TAG}"
    sh "${DIND} docker export -o ${lw}/wheels.tar loci-wheels"

    // serve wheels over http
    sh "${DIND} tar -C ${lw} -xvf ${lw}/wheels.tar"
    sh "${DIND} docker run -d -v ${lw}:/usr/share/nginx/html -p 8080:80 nginx"
}


def docker_project_build = { project ->
    def args = "--build-arg PROJECT=${project}" +
        " --build-arg PROJECT_REF=stable/${OPENSTACK_RELEASE}" +
        " --build-arg WHEELS=http://127.0.0.1:8080"

    def tag = "${IMAGE_BASE}/${project}:${IMAGE_VERSION}"
    sh "${DIND} docker build ${LOCI_REPO} ${args} --tag ${tag}"
    sh "${DIND} docker push ${tag}"
}


try{
    stage ('Slave Create') {
        slave_setup()
    }

    node(SLAVE_NODE) {
       stage('Docker Setup') {
           docker_setup()
       }

       stage('Build (wheels)') {
           docker_wheels_build()
           docker_wheels_export()
       }

       PROJECTS.each {
           stage ("Build (${it})") {
               docker_project_build(it)
           }
       }
    }
} finally {
    stage('Slave Remove'){
        slave_cleanup()
    }
}

