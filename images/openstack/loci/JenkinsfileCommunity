
LOCI_REPO = 'https://git.openstack.org/openstack/loci.git'

LOCAL_WEB_PORT = '8080'
LOCAL_WEB_URL = "http://172.18.0.1:${LOCAL_WEB_PORT}"
NO_PROXY = 'localhost,127.0.0.1,172.18.0.1'
KUBERNETES_API_SERVER = '172.17.0.1'

PROJECT = JOB_BASE_NAME

ARTF_REPO = 'openstack'
if (env.GERRIT_EVENT_TYPE == 'patchset-created') {
    ARTF_REPO += '-patchset'
}

if (env.GERRIT_REFSPEC) {
    PROJECT_REF = GERRIT_REFSPEC
    PROJECT_VERSION = GERRIT_PATCHSET_REVISION
    PROJECT_BRANCH = GERRIT_BRANCH
    DISPLAY_PREFIX = GERRIT_EVENT_TYPE
} else {
    PROJECT_VERSION = ""
    PROJECT_BRANCH = PROJECT_REF
    DISPLAY_PREFIX = "manual"
}

currentBuild.displayName = "#${BUILD_NUMBER} ${DISPLAY_PREFIX} ${PROJECT_BRANCH}"

// handle diffs in stable/<rel>, and <rel>-eol
if (PROJECT_BRANCH.contains('stable/')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('stable/', '')
    // use community release tag images for now
    // todo move to branch-specific requirements:latest
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstackhelm/requirements:$PROJECT_RELEASE"
} else if (PROJECT_BRANCH.contains('-eol')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('-eol', '')
    // use community release tag images for now
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstackhelm/requirements:$PROJECT_RELEASE"
} else if (PROJECT_BRANCH == 'master') {
    PROJECT_RELEASE = 'rocky'
    // use requirements:latest for master as community release image is not yet available
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstack/rocky/loci/community/requirements:latest"
} else {
    error("Unsupported branch/tag: ${PROJECT_BRANCH}")
}

// openstack community repos by default
PROJECT_REPO = "https://git.openstack.org/openstack/${PROJECT}"
PROJECT_PREFIX = "loci/community"
IMAGE_BASE = "${ARTF_DOCKER_URL}/${ARTF_REPO}/${PROJECT_RELEASE}/${PROJECT_PREFIX}"
DEFAULT_ARGS = "--build-arg FROM=${LOCI_BASE_IMAGE}\
  --build-arg PROJECT=${PROJECT}\
  --build-arg PROJECT_REF=${PROJECT_REF}\
  --build-arg NO_PROXY=${NO_PROXY}\
  --build-arg http_proxy=${HTTP_PROXY}\
  --build-arg https_proxy=${HTTPS_PROXY}\
  --build-arg PROJECT_REPO=${PROJECT_REPO}"

// cmd for running Docker in Docker
DIND_CONTAINER = "locibuildcont"
DIND = "sudo docker exec ${DIND_CONTAINER}"

def buildLoci(projConfArgs = '', wheelArgs = '') {

    def image_tag = "${IMAGE_BASE}/${PROJECT}:${PROJECT_VERSION}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO} ${DEFAULT_ARGS} ${projConfArgs} ${wheelArgs} --tag ${image_tag}"
    }
    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }
    return image_tag
}

vm2('loci-bootstrap.sh',
         'cicd-ubuntu-16.04-server-cloudimg-amd64',
         'm1.medium',
         '',
         'loci',
         false){

    stage('Docker Setup') {
        loci.runDind(ARTF_DOCKER_URL, "jenkins-artifactory", DIND_CONTAINER)
    }

    stage('Get version') {
        if (!env.GERRIT_REFSPEC) {
            PROJECT_VERSION = gerrit.getVersion(PROJECT_REPO, PROJECT_REF)
        } else {
            print "Skipping for gerrit trigger"
        }
    }

    stage ("Build Project") {
        print "Building ${PROJECT.capitalize()}"
        if (PROJECT.contains('requirements')) {
            REQUIREMENTS_LOCI = buildLoci()
        } else {
            loci.runNginx(DIND_CONTAINER, LOCAL_WEB_PORT)
            loci.exportWheels(DIND_CONTAINER, WHEELS_LATEST)
            WHEELS_ARG = " --build-arg WHEELS=${LOCAL_WEB_URL}/images/wheels.tar"
            IMAGE_LOCI = buildLoci(loci.getDependencies(PROJECT), WHEELS_ARG)
        }
    }
}


// image defaults to be used for deployment
// ps image built from review job to override default

// todo use release specific latest images Ex: ${ARTF_SECURE_DOCKER_URL}/${IMAGE_PATH}/mos-keystone:latest
KEYSTONE_LOCI=(env.KEYSTONE_LOCI != null) ? env.KEYSTONE_LOCI : "${IMAGE_BASE}/mos-keystone@sha256:3ffa48bcc703c00aef085e1e2c1a681efeabdedf274c83f2ad835261425b2083"
HEAT_LOCI=(env.HEAT_LOCI != null) ? env.HEAT_LOCI : "${IMAGE_BASE}/mos-heat@sha256:88fde07287e55ba2594d3a955674dfb98a1c22debf5afe2401953742b46d85c0"
HORIZON_LOCI=(env.HORIZON_LOCI != null) ? env.HORIZON_LOCI : "${IMAGE_BASE}/mos-horizon@sha256:6ca69d546d7d2ccafe334616153ca4399e96b6af292b40014bdf4a09fe2e8976"
GLANCE_LOCI=(env.GLANCE_LOCI != null) ? env.GLANCE_LOCI : "${IMAGE_BASE}/mos-glance@sha256:ddbb29091e5df37e0a5b6802eb9de612a62ea6c3bdb6426217dad8acce2cbd54"
CINDER_LOCI=(env.CINDER_LOCI != null) ? env.CINDER_LOCI : "${IMAGE_BASE}/mos-cinder@sha256:a49e823c9dc97a73d09bdd0ca3ec8299a7c3410a7376cc56b91ab921c0d4d4c7"
NOVA_LOCI=(env.NOVA_LOCI != null) ? env.NOVA_LOCI : "${IMAGE_BASE}/mos-nova@sha256:dd17c2bfa75b1f2bf57ec9dab091828e6701332ede103b1ff475c27829572f86"
NOVA_1804_LOCI=(env.NOVA_1804_LOCI != null) ? env.NOVA_1804_LOCI : "${IMAGE_BASE}/mos-nova-1804@sha256:70c31590b2ca6350e46d171abe7258a6ce8167154f0b008c1d91e4827527bc69"
NEUTRON_LOCI=(env.NEUTRON_LOCI != null) ? env.NEUTRON_LOCI : "${IMAGE_BASE}/mos-neutron@sha256:f827f4a50f4eedbb48af68069f961d40ad49e011da32eb357018c5164e197750"
NEUTRON_SRIOV_LOCI=(env.NEUTRON_SRIOV_LOCI != null) ? env.NEUTRON_SRIOV_LOCI : "${IMAGE_BASE}/mos-neutron-sriov@sha256:7265ec5d4b1f213e407770ce592652787003764da6c335058354700f6bd72e72"

def setupProxy() {
    vm2.setproxy()
   // add no_proxy to environment
    sh """cat << EOF | sudo tee -a /etc/environment
no_proxy=localhost,127.0.0.1,${KUBERNETES_API_SERVER},.svc.cluster.local
EOF"""
    sh "export no_proxy=localhost,127.0.0.1,${KUBERNETES_API_SERVER},.svc.cluster.local"
}

def installDockerCE() {
    sh '''sudo apt-get update && sudo apt-get install -y \\
          apt-transport-https \\
          ca-certificates \\
          curl \\
          software-properties-common'''

    sh 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -'
    sh '''sudo add-apt-repository \\
        "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"'''
    sh '''sudo apt-get update && \\
    sudo apt-get install -y docker-ce'''
    // Allow kubectl to pull images, requires auth config to be on / directory
        withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
                    usernameVariable: 'ARTIFACTORY_USER',
                    passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
            opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'
            sh "sudo docker login ${opts} $ARTF_SECURE_DOCKER_URL"
            sh 'sudo cp -R ~/.docker /'
        }
}

def cloneOSH() {
    sh "mkdir $WORKSPACE/artifacts"
    for (proj in ['openstack-helm', 'openstack-helm-infra']) {
        git_url = "https://git.openstack.org/openstack/${proj}.git"
        branch = "master"
        gerrit.cloneProject(git_url, branch, "", "${WORKSPACE}/${proj}")
        version = gerrit.getVersion(git_url, branch)
        sh "echo ${proj} head is at ${version} | tee -a ${WORKSPACE}/artifacts/OSH_version.txt"
    }
}

def updateProxy() {
    sh "sed -i 's/8.8.8.8/${ARTF_IP}/g' ./openstack-helm-infra/tools/images/kubeadm-aio/assets/opt/playbooks/vars.yaml"
    def amap = ['kubernetes_network_default_device': 'docker0',
                 'gate_fqdn_test': 'true',
                'proxy': [ 'http': "${HTTP_PROXY}", 'https': "${HTTP_PROXY}", 'noproxy': "${NO_PROXY}"] ]
    sh 'rm -rf ./openstack-helm-infra/tools/gate/devel/local-vars.yaml'
    writeYaml file: './openstack-helm-infra/tools/gate/devel/local-vars.yaml', data: amap
}

// todo - revisit the way we override the image values
def imageOverrides() {

def loci_yaml="${WORKSPACE}/openstack-helm/tools/overrides/releases/${PROJECT_RELEASE}/loci.yaml"

// update keystone image
sh """sed -i -e "s|\\(keystone_api:\\).*|\\1 \'$KEYSTONE_LOCI\'|" \
        -e "s|\\(keystone_credential_rotate:\\).*|\\1 \'$KEYSTONE_LOCI\'|" \
        -e "s|\\(keystone_credential_setup:\\).*|\\1 \'$KEYSTONE_LOCI\'|" \
        -e "s|\\(keystone_db_sync:\\).*|\\1 \'$KEYSTONE_LOCI\'|" \
        -e "s|\\(keystone_fernet_rotate:\\).*|\\1 \'$KEYSTONE_LOCI\'|" \
        -e "s|\\(keystone_domain_manage:\\).*|\\1 \'$KEYSTONE_LOCI\'|" \
        -e "s|\\(keystone_fernet_setup:\\).*|\\1 \'$KEYSTONE_LOCI\'|"   $loci_yaml"""

// update heat image
sh """sed -i -e "s|\\( bootstrap:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(db_drop:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(db_init:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(glance_bootstrap:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(heat_api:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(heat_cfn:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(heat_cloudwatch:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(heat_db_sync:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(heat_engine:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(heat_engine_cleaner:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(keystone_bootstrap:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(ks_endpoints:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(ks_service:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\(ks_user:\\).*|\\1 \'$HEAT_LOCI\'|" \
        -e "s|\\( scripted_test:\\).*|\\1 \'$HEAT_LOCI\'|"   $loci_yaml"""

// update heat image
sh """sed -i -e "s|\\(horizon:\\).*|\\1 \'$HORIZON_LOCI\'|" \
        -e "s|\\(horizon_db_sync:\\).*|\\1 \'$HORIZON_LOCI\'|"   $loci_yaml"""

// update glance image
sh """sed -i -e "s|\\(glance_api:\\).*|\\1 \'$GLANCE_LOCI\'|" \
        -e "s|\\(glance_db_sync:\\).*|\\1 \'$GLANCE_LOCI\'|" \
        -e "s|\\(glance_registry:\\).*|\\1 \'$GLANCE_LOCI\'|"   $loci_yaml"""

// update cinder image
sh """sed -i -e "s|\\(cinder_api:\\).*|\\1 \'$CINDER_LOCI\'|" \
        -e "s|\\(cinder_backup:\\).*|\\1 \'$CINDER_LOCI\'|" \
        -e "s|\\(cinder_db_sync:\\).*|\\1 \'$CINDER_LOCI\'|" \
        -e "s|\\(cinder_scheduler:\\).*|\\1 \'$CINDER_LOCI\'|" \
        -e "s|\\(cinder_volume:\\).*|\\1 \'$CINDER_LOCI\'|" \
        -e "s|\\(cinder_volume_usage_audit:\\).*|\\1 \'$CINDER_LOCI\'|"   $loci_yaml"""

// update nova images
sh """sed -i -e "s|\\(nova_api:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_cell_setup:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_compute:\\).*|\\1 \'$NOVA_1804_LOCI\'|" \
        -e "s|\\(nova_compute_ironic:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_compute_ssh:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_conductor:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_consoleauth:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_db_sync:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_novncproxy:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_placement:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_scheduler:\\).*|\\1 \'$NOVA_LOCI\'|" \
        -e "s|\\(nova_spiceproxy:\\).*|\\1 \'$NOVA_LOCI\'|"   $loci_yaml"""

// update neutron images
sh """sed -i -e "s|\\(neutron_db_sync:\\).*|\\1 \'$NEUTRON_LOCI\'|" \
        -e "s|\\(neutron_dhcp:\\).*|\\1 \'$NEUTRON_LOCI\'|" \
        -e "s|\\(neutron_l3:\\).*|\\1 \'$NEUTRON_LOCI\'|" \
        -e "s|\\(neutron_linuxbridge_agent:\\).*|\\1 \'$NEUTRON_LOCI\'|" \
        -e "s|\\(neutron_metadata:\\).*|\\1 \'$NEUTRON_LOCI\'|" \
        -e "s|\\(neutron_openvswitch_agent:\\).*|\\1 \'$NEUTRON_LOCI\'|" \
        -e "s|\\(neutron_server:\\).*|\\1 \'$NEUTRON_LOCI\'|" \
        -e "s|\\(neutron_sriov_agent:\\).*|\\1 \'$NEUTRON_SRIOV_LOCI\'|" \
        -e "s|\\(neutron_sriov_agent_init:\\).*|\\1 \'$NEUTRON_SRIOV_LOCI\'|"   $loci_yaml"""
}

def installOSHAIO() {
    dir ('openstack-helm') {

        // see https://docs.openstack.org/openstack-helm/latest/install/developer/index.html
        def deploy_steps = ['Packages':    './tools/deployment/developer/common/000-install-packages.sh',
                            'Kubernetes':  './tools/deployment/developer/common/010-deploy-k8s.sh',
                            'Clients':     './tools/deployment/developer/common/020-setup-client.sh',
                            'Ingress':     './tools/deployment/developer/common/030-ingress.sh',
                            'Ceph':        './tools/deployment/developer/ceph/040-ceph.sh',
                            'Ceph NS':     './tools/deployment/developer/ceph/045-ceph-ns-activate.sh',
                            'MariaDB':     './tools/deployment/developer/ceph/050-mariadb.sh',
                            'RabbitMQ':    './tools/deployment/developer/ceph/060-rabbitmq.sh',
                            'Memcached':   './tools/deployment/developer/ceph/070-memcached.sh',
                            'Keystone':    './tools/deployment/developer/ceph/080-keystone.sh',
                            'Heat':        './tools/deployment/developer/ceph/090-heat.sh',
                            'Horizon':     './tools/deployment/developer/ceph/100-horizon.sh',
                            'Rados GW':    './tools/deployment/developer/ceph/110-ceph-radosgateway.sh',
                            'Glance':      './tools/deployment/developer/ceph/120-glance.sh',
                            'Cinder':      './tools/deployment/developer/ceph/130-cinder.sh',
                            'Openvswitch': './tools/deployment/developer/ceph/140-openvswitch.sh',
                            'LibVirt':     './tools/deployment/developer/ceph/150-libvirt.sh',
                            'Compute Kit': './tools/deployment/developer/ceph/160-compute-kit.sh',
                            'Gateway':     './tools/deployment/developer/ceph/170-setup-gateway.sh']

        deploy_steps.each { key, value ->
            print "Installing $key..."
            sh "${value}"
        }
    }
}

def runHelmTests() {
    // omitting horizon as helm tests and cli do not exist
    def projmap = ['keystone' : ['image' : "$KEYSTONE_LOCI", 'cli' : 'keystone-manage'],
                   'heat'     : ['image' : "$HEAT_LOCI", 'cli' : 'heat-manage'],
                   'glance'   : ['image' : "$GLANCE_LOCI", 'cli' : 'glance-manage'],
                   'cinder'   : ['image' : "$CINDER_LOCI", 'cli' : 'cinder-manage'],
                   'nova'     : ['image' : "$NOVA_LOCI", 'cli' : 'nova-manage'],
                   'neutron'  : ['image' : "$NEUTRON_LOCI", 'cli' : 'neutron-debug']]
    projmap.each { proj, value ->
        cmd = "sudo docker run --rm --name tempcont${proj} -t ${value.image} ${value.cli} --version"
        openstack_version = sh(returnStdout: true, script: cmd).trim()
        sh """echo "${proj} version is \\
              $openstack_version" | tee -a $WORKSPACE/artifacts/openstack_versions.txt"""

        sh """helm test --debug ${proj} >> $WORKSPACE/artifacts/helm_tests.log || \\
              kubectl logs ${proj}-test --namespace openstack | tee -a $WORKSPACE/artifacts/helm_tests.log"""
    }
}

def parseTestLogs() {
    def testlog = readFile "$WORKSPACE/artifacts/helm_tests.log"
    if (testlog.find("FAILED:")) {
        return 1
    }
    return 0
}

def artifactLogs() {
    cmd = "sudo tar --warning=no-file-changed -czf ${WORKSPACE}/artifacts/${BUILD_TAG}.tar.gz /var/log"
    sh(returnStdout: true, script: cmd)
    archiveArtifacts 'artifacts/*'
}

// deploy OSH only on merged events for ocata or pike release
if (env.GERRIT_EVENT_TYPE == 'change-merged' && (PROJECT_RELEASE == 'ocata' || PROJECT_RELEASE == 'pike')) {

    // OSH AIO requires min 8 cpus cores and 16 GB ram
    vm2( 'bootstrap.sh',
            'cicd-ubuntu-16.04-server-cloudimg-amd64',
            'm1.xlarge',
            'deploy-osh-aio',
            'basic',
            false ) {
        stage('Setup proxy'){
            setupProxy()
        }
        stage('Install docker-ce'){
            installDockerCE()
        }
        stage('Clone OpenstackHelm'){
            cloneOSH()
        }
        stage('Update OSH proxy'){
            updateProxy()
        }
        stage('Override images'){
            // pass ps image as env variable
            LOCI_IMAGE_VAR="${PROJECT_SUFFIX.toUpperCase()}_LOCI"
            echo "$LOCI_IMAGE_VAR"

            withEnv(["${LOCI_IMAGE_VAR}=$IMAGE_LOCI",
                     "IMAGE_BASE=$IMAGE_BASE",
                     "PROJECT_RELEASE=$PROJECT_RELEASE"]) {
                imageOverrides()
            }
        }
        stage('Install OSH AIO'){
            try {
                // todo - check if there is a better way to override multiple values with --set
                withEnv(['OS_REGION_NAME=',
                         'OS_USERNAME=',
                         'OS_PASSWORD=',
                         'OS_PROJECT_NAME=',
                         'OS_PROJECT_DOMAIN_NAME=',
                         'OS_USER_DOMAIN_NAME=',
                         'OS_AUTH_URL=',
                         "OSH_EXTRA_HELM_ARGS=--values=./tools/overrides/releases/${PROJECT_RELEASE}/loci.yaml",
                         'OSH_EXTRA_HELM_ARGS_GLANCE=--set conf.rally_tests.tests.GlanceImages.create_and_delete_image[0].args.container_format=bare,conf.rally_tests.tests.GlanceImages.create_and_delete_image[0].args.disk_format=qcow2,conf.rally_tests.tests.GlanceImages.create_and_delete_image[0].args.image_location=http://mirrors-aic.it.att.com/other_images/ops_simple_images/cirros-0.3.5-x86_64-disk.img,conf.rally_tests.tests.GlanceImages.create_and_list_image[0].args.container_format=bare,conf.rally_tests.tests.GlanceImages.create_and_list_image[0].args.disk_format=qcow2,conf.rally_tests.tests.GlanceImages.create_and_list_image[0].args.image_location=http://mirrors-aic.it.att.com/other_images/ops_simple_images/cirros-0.3.5-x86_64-disk.img,bootstrap.structured.images.cirros.source_url=http://mirrors-aic.it.att.com/other_images/ops_simple_images/']) {

                        installOSHAIO()
                }
            } catch (Exception exception) {
                artifactLogs()
                error "OSH AIO deployment failed with exception $exception"
            }
        }
        stage('Run Helm tests'){
            runHelmTests()
        }
        stage('Parse test logs for failures'){
            status = parseTestLogs()
            if (status != 0) {
                artifactLogs()
                error "Helm tests failed.. see log $WORKSPACE/artifacts/helm_tests.log"
            } else {
                print "Helm tests passed"
            }
        }
    }
}
