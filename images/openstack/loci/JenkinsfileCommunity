import com.att.nccicd.config.conf

LOCI_REPO = 'https://git.openstack.org/openstack/loci.git'

LOCAL_WEB_PORT = '8080'
LOCAL_WEB_URL = "http://172.18.0.1:${LOCAL_WEB_PORT}"

PROJECT = JOB_BASE_NAME

ARTF_REPO = 'openstack'
if (env.GERRIT_EVENT_TYPE == 'patchset-created') {
    ARTF_REPO += '-patchset'
}

LOCI_BASE_IMAGE = conf.LOCI_BASE_IMAGE_XENIAL

if (env.GERRIT_REFSPEC) {
    PROJECT_REF = GERRIT_REFSPEC
    PROJECT_VERSION = GERRIT_PATCHSET_REVISION
    PROJECT_BRANCH = GERRIT_BRANCH
    DISPLAY_PREFIX = GERRIT_EVENT_TYPE
} else {
    PROJECT_VERSION = ""
    PROJECT_BRANCH = PROJECT_REF
    DISPLAY_PREFIX = "manual"
}

currentBuild.displayName = "#${BUILD_NUMBER} ${DISPLAY_PREFIX} ${PROJECT_BRANCH}"

PLUGIN_BRANCH = "-b ${PROJECT_BRANCH}"

// handle diffs in stable/<rel>, and <rel>-eol
if (PROJECT_BRANCH.contains('stable/')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('stable/', '')
    // use community release tag images for now
    // todo move to branch-specific requirements:latest
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstackhelm/requirements:$PROJECT_RELEASE"
} else if (PROJECT_BRANCH.contains('-eol')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('-eol', '')
    // use community release tag images for now
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstackhelm/requirements:$PROJECT_RELEASE"
} else if (PROJECT_BRANCH == 'master') {
    PROJECT_RELEASE = 'rocky'
    // use requirements:latest for master as community release image is not yet available
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstack/rocky/loci/community/requirements:latest"
    PLUGIN_BRANCH = ""
} else {
    error("Unsupported branch/tag: ${PROJECT_BRANCH}")
}

// openstack community repos by default
PROJECT_REPO = "https://git.openstack.org/openstack/${PROJECT}"
PLUGIN_BASE_PROJECT = loci.getPluginBaseProject(PROJECT)
PLUGIN_PROJECTS = loci.getPluginProjects(PROJECT)
BASE_PROJECT_REF = '${PROJECT_REF}'

if (${PLUGIN_BASE_PROJECT} != '') {
PROJECT_REPO = "https://git.openstack.org/openstack/${PLUGIN_BASE_PROJECT}"
BASE_PROJECT_REF = ''
} else {
PLUGIN_BASE_PROJECT = "${PROJECT}"
}

PROJECT_PREFIX = "loci/community"
IMAGE_BASE = "${ARTF_DOCKER_URL}/${ARTF_REPO}/${PROJECT_RELEASE}/${PROJECT_PREFIX}"
DEFAULT_ARGS = "--build-arg FROM=${LOCI_BASE_IMAGE}\
  --build-arg PROJECT=${PLUGIN_BASE_PROJECT}\
  --build-arg PROJECT_REF=${BASE_PROJECT_REF}\
  --build-arg NO_PROXY=${NO_PROXY}\
  --build-arg http_proxy=${HTTP_PROXY}\
  --build-arg https_proxy=${HTTPS_PROXY}\
  --build-arg PROJECT_REPO=${PROJECT_REPO}"

// cmd for running Docker in Docker
DIND_CONTAINER = "locibuildcont"
DIND = "sudo docker exec ${DIND_CONTAINER}"

PLUGINS_INSTALL_STR = ""
PLUGIN_PROJECTS.each { plugin ->
    PLUGIN_REPO = "https://git.openstack.org/openstack/${plugin}"
    PLUGINS_INSTALL_STR += "apt-get remove -y ${plugin} ;\ "
    PLUGINS_INSTALL_STR += "git clone ${PLUGIN_REPO} ${PLUGIN_BRANCH} /opt/${plugin} ;\ "
    PLUGINS_INSTALL_STR += "cd /opt/${plugin} ; pip install --editable . "
    if ( plugin != PLUGIN_PROJECTS.last() ) {
        PLUGINS_INSTALL_STR += " ;\ "
    }
}

def buildLoci(projConfArgs = '', wheelArgs = '') {

    def image_tag = "${IMAGE_BASE}/${PLUGIN_BASE_PROJECT}:${PROJECT_VERSION}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO} ${DEFAULT_ARGS} ${projConfArgs} ${wheelArgs} --tag ${image_tag}"

        sh "tee > /tmp/Dockerfile.plugins <<EOF
        FROM ${image_tag}
        RUN set -ex; echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ;\
            apt-get update ;\
            apt-get upgrade -y ;\
            apt-get install -y --no-install-recommends
                git \
                python \
                virtualenv ;\
            . /var/lib/openstack/bin/activate ;\
            ${PLUGINS_INSTALL_STR}
        EOF

        DOCKERFILE_PLUGINS = $(base64 -w0 /tmp/Dockerfile.plugins)
        sh '${DIND} sh -c "echo $DOCKERFILE_PLUGINS | base64 -d > /tmp/Dockerfile.plugins"'
        sh "${DIND} docker build --file /tmp/Dockerfile.plugins /tmp --no-cache --tag ${image_tag}"
    }

    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PLUGIN_BASE_PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }

    return image_tag
}

vm2('loci-bootstrap.sh',
         'cicd-ubuntu-16.04-server-cloudimg-amd64',
         'm1.medium',
         '',
         'loci',
         false){

    stage('Docker Setup') {
        loci.runDind(ARTF_DOCKER_URL, "jenkins-artifactory", DIND_CONTAINER)
    }

    stage('Get version') {
        if (!env.GERRIT_REFSPEC) {
            PROJECT_VERSION = gerrit.getVersion(PROJECT_REPO, PROJECT_REF)
        } else {
            print "Skipping for gerrit trigger"
        }
    }

    stage ("Build Project") {
        print "Building ${PROJECT.capitalize()}"
        if (PROJECT.contains('requirements')) {
            REQUIREMENTS_LOCI = buildLoci()
        } else {
            loci.runNginx(DIND_CONTAINER, LOCAL_WEB_PORT)
            loci.exportWheels(DIND_CONTAINER, WHEELS_LATEST)
            WHEELS_ARG = " --build-arg WHEELS=${LOCAL_WEB_URL}/images/wheels.tar"
            IMAGE_LOCI = buildLoci(loci.getDependencies(PLUGIN_BASE_PROJECT), WHEELS_ARG)
        }
    }
}

// deploy OSH only on merged events for ocata release
if (!PROJECT.contains('requirements') &&
    env.GERRIT_EVENT_TYPE == 'change-merged' &&
    PROJECT_RELEASE == 'ocata') {

    // pass ps image as env variable
    LOCI_IMAGE_VAR="${PLUGIN_BASE_PROJECT.toUpperCase()}_LOCI"
    print "Overriding default for $LOCI_IMAGE_VAR with $IMAGE_LOCI..."

    // OSH AIO requires min 8 cpus cores and 16 GB ram
    vm2('bootstrap.sh',
        'cicd-ubuntu-16.04-server-cloudimg-amd64',
        'm1.xlarge',
        'deploy-osh-aio',
        'basic',
        false) {

        stage('Setup proxy') {
            vm2.setproxy()
        }
        stage('Install docker-ce') {
            osh.installDockerCE()
        }
        stage('Authenticate docker repo') {
            osh.dockerAuth()
        }
        stage('Clone OpenstackHelm') {
            osh.cloneOSH()
        }
        stage('Update OSH proxy') {
            osh.updateProxy()
        }
        stage('Override images') {
            osh.imageOverrides(["$LOCI_IMAGE_VAR": "$IMAGE_LOCI"])
        }
        stage('Install OSH AIO') {
            try {
                withEnv(['OS_REGION_NAME=',
                  'OS_USERNAME=',
                  'OS_PASSWORD=',
                  'OS_PROJECT_NAME=',
                  'OS_PROJECT_DOMAIN_NAME=',
                  'OS_USER_DOMAIN_NAME=',
                  'OS_AUTH_URL=',
                  "OSH_EXTRA_HELM_ARGS=--values=./tools/overrides/releases/ocata/loci.yaml"]) {
                    osh.installOSHAIO()
                }
            } catch (Exception exception) {
                osh.artifactLogs()
                error "OSH AIO deployment failed with exception $exception"
            }
        }
        stage('Get openstack versions') {
            osh.serviceVersions(["$LOCI_IMAGE_VAR": "$IMAGE_LOCI"])
        }
        stage('Run Helm tests') {
            osh.runHelmTests()
        }
        stage('Parse test logs for failures') {
            status = osh.parseTestLogs()
            if (status != 0) {
                osh.artifactLogs()
                error "Helm tests failed... see log $WORKSPACE/artifacts/helm_tests.log"
            } else {
                print "Helm tests passed"
            }
        }
    }
}
