
LOCI_REPO = 'https://git.openstack.org/openstack/loci.git'

DIND_IMAGE = "${ARTF_DOCKER_URL}/docker:17.07.0-dind"
NGINX_IMAGE = "${ARTF_DOCKER_URL}/nginx"

LOCAL_WEB_PORT = '8080'
LOCAL_WEB_URL = "http://172.18.0.1:${LOCAL_WEB_PORT}"
NO_PROXY = 'localhost,127.0.0.1,172.18.0.1'

PROJECT = JOB_BASE_NAME

ARTF_REPO = 'openstack'
if (env.GERRIT_EVENT_TYPE == 'patchset-created') {
    ARTF_REPO += '-patchset'
}

if (env.GERRIT_REFSPEC) {
    PROJECT_REF = GERRIT_REFSPEC
    PROJECT_VERSION = GERRIT_CHANGE_ID
    PROJECT_BRANCH = GERRIT_BRANCH
    DISPLAY_PREFIX = GERRIT_EVENT_TYPE
} else {
    PROJECT_VERSION = ""
    PROJECT_BRANCH = PROJECT_REF
    DISPLAY_PREFIX = "manual"
}

PROJECT_CONFIG = [
  'keystone': ['profiles': '"fluent apache ldap"', 'packages': '"pycrypto python-openstackclient"', 'distpackages': ' '],
  'heat':     ['profiles': '"fluent apache"', 'packages': 'pycrypto', 'distpackages': 'curl'],
  'glance':   ['profiles': '"fluent glance ceph"', 'packages': '"pycrypto python-swiftclient"', 'distpackages': ' '],
  'horizon':  ['profiles': '"fluent horizon apache"', 'packages': 'pycrypto', 'distpackages': ' '],
  'cinder':   ['profiles': '"fluent cinder lvm ceph qemu"', 'packages': '"pycrypto python-swiftclient"', 'distpackages': ' '],
  'neutron':  ['profiles': '"fluent neutron linuxbridge openvswitch"', 'packages': 'pycrypto', 'distpackages': ' '],
  'barbican': ['profiles': 'fluent', 'packages': 'pycrypto', 'distpackages': ' '],
  'nova':     ['profiles': '"fluent nova ceph linuxbridge openvswitch configdrive qemu apache"',
               'packages': 'pycrypto', 'distpackages': ' ']
]

currentBuild.displayName = "#${BUILD_NUMBER} ${DISPLAY_PREFIX} ${PROJECT_BRANCH}"

// handle diffs in stable/<rel>, and <rel>-eol
if (PROJECT_BRANCH.contains('stable/')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('stable/', '')
    // use community release tag images for now
    // todo move to branch-specific requirements:latest
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstackhelm/requirements:$PROJECT_RELEASE"
} else if (PROJECT_BRANCH.contains('-eol')) {
    PROJECT_RELEASE = PROJECT_BRANCH.replace('-eol', '')
    // use community release tag images for now
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstackhelm/requirements:$PROJECT_RELEASE"
} else if (PROJECT_BRANCH == 'master') {
    PROJECT_RELEASE = 'rocky'
    // use requirements:latest for master as community release image is not yet available  
    WHEELS_LATEST = "${ARTF_DOCKER_URL}/openstack/test/rocky/loci/community/requirements:latest"
} else {
    error("Unsupported branch/tag: ${PROJECT_BRANCH}")
}

// openstack community repos by default
PROJECT_REPO = "https://git.openstack.org/openstack/${PROJECT}"
PROJECT_PREFIX = "loci/community"
IMAGE_BASE = "${ARTF_DOCKER_URL}/${ARTF_REPO}/${PROJECT_RELEASE}/${PROJECT_PREFIX}"
DEFAULT_ARGS = "--build-arg FROM=${LOCI_BASE_IMAGE}\
  --build-arg PROJECT=${PROJECT}\
  --build-arg PROJECT_REF=${PROJECT_REF}\
  --build-arg NO_PROXY=${NO_PROXY}\
  --build-arg http_proxy=${HTTP_PROXY}\
  --build-arg https_proxy=${HTTPS_PROXY}\
  --build-arg PROJECT_REPO=${PROJECT_REPO}"

if (!PROJECT.contains('requirements')) {
    PROJECT_CONFIG_ARGS = " --build-arg PROFILES=${PROJECT_CONFIG[PROJECT].profiles}\
      --build-arg PIP_PACKAGES=${PROJECT_CONFIG[PROJECT].packages}\
      --build-arg DIST_PACKAGES=${PROJECT_CONFIG[PROJECT].distpackages}"
    WHEELS_ARG = " --build-arg WHEELS=${LOCAL_WEB_URL}/images/wheels.tar"
}

// cmd for running Docker in Docker
DIND = 'sudo docker exec loci-build'

// docker within docker (to get latest docker version on Ubuntu 16.04)
// requires setting {"storage-driver": "overlay2"} option in docker.json
def docker_setup = {
    def opts = '--privileged --name loci-build -e HTTP_PROXY="${HTTP_PROXY}" -e HTTPS_PROXY="${HTTPS_PROXY}" '
    def mounts = '-v /var/lib/docker' +
        ' -v $(pwd):/opt/loci'

    sh "sudo docker run -d ${opts} ${mounts} ${DIND_IMAGE}"
    sh "${DIND} sh -cx 'apk update; apk add git'"

    withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
            usernameVariable: 'ARTIFACTORY_USER',
            passwordVariable: 'ARTIFACTORY_PASSWORD')]) {

        opts = '-u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD'
        sh "${DIND} docker login ${opts} ${ARTF_DOCKER_URL}"
    }
}

def version_resolve = {
    // use commit hash when triggered manually
    gerrit.cloneProject(PROJECT_REPO, PROJECT_REF, "", PROJECT)
    dir (PROJECT) {
        def cmd = "git rev-parse HEAD"
        PROJECT_VERSION = sh(returnStdout: true, script: cmd).trim()
    }
}

// local web server exposing mounted volume /opt/loci/web
// this enables localized use of git/docker artifacts
def nginx_setup = {
    sh "mkdir -p web"

    def opts = '-d -v /opt/loci/web:/usr/share/nginx/html:ro'
    def port = "-p ${LOCAL_WEB_PORT}:80"
    sh "${DIND} docker run ${opts} ${port} ${NGINX_IMAGE}"
}

def wheels_export = {
    sh "mkdir -p web/images"

    sh "${DIND} docker create --name loci-wheels ${WHEELS_LATEST} bash"
    sh "${DIND} docker export -o /opt/loci/web/images/wheels.tar loci-wheels"
    sh "${DIND} chmod +r /opt/loci/web/images/wheels.tar"
}

def wheels_build = {

    def image_tag = "${IMAGE_BASE}/${PROJECT}:${PROJECT_VERSION}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO} ${DEFAULT_ARGS} --tag ${image_tag}"
    }
    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }
}

def project_build = {

    def image_tag = "${IMAGE_BASE}/${PROJECT}:${PROJECT_VERSION}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO} ${DEFAULT_ARGS} ${PROJECT_CONFIG_ARGS} ${WHEELS_ARG} --tag ${image_tag}"
    }
    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge
    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }
}

vm2('loci-bootstrap.sh',
         'cicd-ubuntu-16.04-server-cloudimg-amd64',
         'm1.medium',
         '',
         'loci',
         false){

    stage('Docker Setup') {
        docker_setup()
    }

    if (!env.GERRIT_REFSPEC) {
        stage('Get version for manual run') {
            version_resolve()
        }
    }

    if (PROJECT.contains('requirements')) {
        stage('Build Requirements') {
            wheels_build()
        }
    } else {
        stage('Wheels Export') {
            nginx_setup()
            wheels_export()
        }
        stage ("Build ${PROJECT.capitalize()}") {
            project_build()
        }
    }
}
