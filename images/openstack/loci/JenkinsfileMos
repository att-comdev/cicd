import com.att.nccicd.config.conf

LOCI_REPO = 'https://git.openstack.org/openstack/loci.git'

LOCAL_WEB_PORT = '8080'
LOCAL_WEB_URL = "http://172.18.0.1:${LOCAL_WEB_PORT}"

PROJECT = JOB_BASE_NAME
SEMANTIC_RELEASE_VERSION = "0.9.0"

ARTF_REPO = 'openstack'
if (env.GERRIT_EVENT_TYPE == 'patchset-created' ||
    env.GERRIT_EVENT_TYPE == 'comment-added') {
    ARTF_REPO += '-patchset'
}

if (PROJECT == "mos-neutron-sriov" || PROJECT == "mos-nova-1804") {
    LOCI_BASE_IMAGE = conf.LOCI_SRIOV_BASE_IMAGE
} else {
    LOCI_BASE_IMAGE = conf.LOCI_BASE_IMAGE
}

if (env.GERRIT_REFSPEC) {
    PROJECT_REF = GERRIT_REFSPEC
    PROJECT_VERSION = GERRIT_PATCHSET_REVISION
    PROJECT_BRANCH = GERRIT_BRANCH
    DISPLAY_PREFIX = GERRIT_EVENT_TYPE
    PROJECT_URL = GERRIT_CHANGE_URL
} else {
    PROJECT_VERSION = ""
    // need to update url
    PROJECT_URL = ""
    PROJECT_BRANCH = PROJECT_REF
    DISPLAY_PREFIX = "manual"
}

currentBuild.displayName = "#${BUILD_NUMBER} ${DISPLAY_PREFIX} ${PROJECT_BRANCH}"

PLUGIN_BRANCH = "-b ${PROJECT_BRANCH}"

if (PROJECT_BRANCH == 'master') {
    PROJECT_RELEASE = 'ocata'
    PLUGIN_BRANCH = ""
}

PROJECT_SUFFIX = PROJECT.split('-')[1]
PROJECT_REPO = "${INTERNAL_GERRIT_SSH}/mos-${PROJECT_SUFFIX}"
WHEELS_LATEST = conf.MOS_REQUIREMENTS_LOCI
PLUGIN_BASE_PROJECT = loci.getPluginBaseProject(PROJECT_SUFFIX)
PLUGIN_PROJECTS = loci.getPluginProjects(PROJECT_SUFFIX)
BASE_PROJECT_REF = '${PROJECT_REF}'

if (${PLUGIN_BASE_PROJECT} != '') {
PROJECT_REPO = "${INTERNAL_GERRIT_SSH}/mos-${PLUGIN_BASE_PROJECT}"
BASE_PROJECT_REF = ''
} else {
PLUGIN_BASE_PROJECT = "${PROJECT_SUFFIX}"
}

PROJECT_PREFIX = "loci/mos"
IMAGE_BASE = "${ARTF_SECURE_DOCKER_URL}/${ARTF_REPO}/${PROJECT_RELEASE}/${PROJECT_PREFIX}"
DEFAULT_ARGS = " --build-arg FROM=${LOCI_BASE_IMAGE}\
  --build-arg PROJECT=${PLUGIN_BASE_PROJECT}\
  --build-arg PROJECT_REF=${BASE_PROJECT_REF}\
  --build-arg NO_PROXY=${NO_PROXY}\
  --build-arg http_proxy=${HTTP_PROXY}\
  --build-arg https_proxy=${HTTPS_PROXY}\
  --build-arg PROJECT_REPO=${LOCAL_WEB_URL}/repo/mos-${PLUGIN_BASE_PROJECT}"

// cmd for running Docker in Docker
DIND_CONTAINER = "locibuildcont"
DIND = "sudo docker exec ${DIND_CONTAINER}"

PLUGINS_INSTALL_STR = ""

// git clone mirror the project on local nginx server to allow passing http git url as build arg for loci builds
def repo_clone_mirror = {
    withCredentials([sshUserPrivateKey(credentialsId: INTERNAL_GERRIT_KEY,
                                       keyFileVariable: 'SSH_KEY')]) {
        // wrapper for custom git ssh key
        // ssh -i $SSH_KEY $@
        withEnv(["GIT_SSH=/usr/bin/git-ssh-wrapper"]) {
            sh 'mkdir -p web/repo'
            sh "ssh-keyscan -p ${INTERNAL_GERRIT_PORT} ${INTERNAL_GERRIT_URL} | tee -a ~/.ssh/known_hosts"
            dir ('web/repo') {
                // Setup mirror for base project
                sh "git clone --mirror ${PROJECT_REPO} mos-${PLUGIN_BASE_PROJECT}"
                sh "cd mos-${PLUGIN_BASE_PROJECT} && git update-server-info"

                // Setup mirrors for plugin projects
                PLUGIN_PROJECTS.each { plugin ->
                    PLUGIN_REPO = "${INTERNAL_GERRIT_SSH}/mos-${plugin}"
                    sh "git clone --mirror ${PLUGIN_REPO} mos-${plugin}"
                    sh "cd mos-${project} && git update-server-info"
                    PLUGINS_INSTALL_STR += "apt-get remove -y ${plugin} ;\ "
                    PLUGINS_INSTALL_STR += "git clone ${LOCAL_WEB_URL}/repo/mos-${plugin} ${PLUGIN_BRANCH} /opt/mos-${plugin} ;\ "
                    PLUGINS_INSTALL_STR += "cd /opt/mos-${plugin} ; pip install --editable . "
                    if ( plugin != PLUGIN_PROJECTS.last() ) {
                        PLUGINS_INSTALL_STR += " ;\ "
                    }
                }
            }
        }
    }
}

def buildLociMos(projConfArgs = '', wheelArgs = '') {

    sh "${DIND} docker pull ${LOCI_BASE_IMAGE}"
    def cmd="${DIND} docker inspect --format='{{index .RepoDigests 0}}' ${LOCI_BASE_IMAGE}"
    def base_sha256 = sh(returnStdout: true, script: cmd).trim()

    def loci_version = gerrit.getVersion(LOCI_REPO, "master")

    LOCI_REPO_PATH = "/tmp/loci"
    // Clone loci repo to apply cicd patch for tests deletion
    sh "${DIND} git clone ${LOCI_REPO} ${LOCI_REPO_PATH}"

    // Copy script for tests cleanup to docker
    data = libraryResource "cicd/remove_tests.sh"
    writeFile file: 'remove_tests.sh', text: data

    sh "sudo docker exec -e REMOVE_TESTS_FILE_DATA=\"\$(cat ${WORKSPACE}/remove_tests.sh)\" ${DIND_CONTAINER} sh -c 'echo \"\$REMOVE_TESTS_FILE_DATA\" > ${LOCI_REPO_PATH}/scripts/remove_tests.sh'"
    sh "${DIND} chmod +x ${LOCI_REPO_PATH}/scripts/remove_tests.sh"

    // Add tests deletion step into install scenario for loci
    sh "${DIND} sed  -i '/clone_project.sh/a \$(dirname \$0)/remove_tests.sh' ${LOCI_REPO_PATH}/scripts/install.sh"

    def labels = " --label org.label-schema.vcs-ref=${PROJECT_VERSION}\
      --label org.label-schema.vcs-url=${PROJECT_URL}\
      --label org.label-schema.loci-ref=${loci_version}\
      --label org.label-schema.base-image=${base_sha256}\
      --label org.label-schema.vendor=\"${conf.CUSTOM_LABEL}\"\
      --label org.label-schema.version=${SEMANTIC_RELEASE_VERSION}.${BUILD_NUMBER}"

    if (!PROJECT.contains('requirements')) {
        sh "${DIND} docker pull ${WHEELS_LATEST}"
        cmd="${DIND} docker inspect --format='{{index .RepoDigests 0}}' ${WHEELS_LATEST}"
        def requirements_sha256 = sh(returnStdout: true, script: cmd).trim()
        labels += " --label org.label-schema.requirements-image=${requirements_sha256}"
    }

    if (env.GERRIT_EVENT_TYPE == 'change-merged') {
       labels += " --label org.label-schema.vcs-event=${GERRIT_EVENT_TYPE}"
    }

    def image_tag = "${IMAGE_BASE}/${PLUGIN_BASE_PROJECT}:${PROJECT_VERSION}.${BUILD_TIMESTAMP}"
    ansiColor('xterm') {
        sh "${DIND} docker build --force-rm --no-cache ${LOCI_REPO_PATH} ${DEFAULT_ARGS} ${projConfArgs} ${wheelArgs} ${labels} --tag ${image_tag}"

        sh "tee > /tmp/Dockerfile.plugins <<EOF
        FROM ${image_tag}
        RUN set -ex; echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ;\
            apt-get update ;\
            apt-get upgrade -y ;\
            apt-get install -y --no-install-recommends
                git \
                python \
                virtualenv ;\
            . /var/lib/openstack/bin/activate ;\
            ${PLUGINS_INSTALL_STR}
        EOF

        DOCKERFILE_PLUGINS = $(base64 -w0 /tmp/Dockerfile.plugins)
        sh '${DIND} sh -c "echo $DOCKERFILE_PLUGINS | base64 -d > /tmp/Dockerfile.plugins"'
        sh "${DIND} docker build --file /tmp/Dockerfile.plugins /tmp --no-cache --tag ${image_tag}"
    }

    sh "${DIND} docker push ${image_tag}"

    //publish latest (branch) tag on merge for requirements
    if (PROJECT.contains('requirements') && env.GERRIT_EVENT_TYPE == 'change-merged') {
        def image_latest = "${IMAGE_BASE}/${PLUGIN_BASE_PROJECT}:latest"
        sh "${DIND} docker tag ${image_tag} ${image_latest}"
        sh "${DIND} docker push ${image_latest}"
    }

    return image_tag
}

vm2('loci-bootstrap.sh',
         'cicd-ubuntu-16.04-server-cloudimg-amd64',
         'm1.medium',
         '',
         'loci',
         false){

    stage('Docker Setup') {
        loci.runDind(ARTF_SECURE_DOCKER_URL, "jenkins-artifactory", DIND_CONTAINER)
    }

    stage('Local Repo Setup') {
        loci.runNginx(DIND_CONTAINER, LOCAL_WEB_PORT)
        repo_clone_mirror()
        if (!env.GERRIT_REFSPEC) {
            PROJECT_VERSION = gerrit.getVersion(PROJECT_REPO, PROJECT_REF, INTERNAL_GERRIT_KEY)
        }
    }

    stage ("Build Project") {
        print "Building ${PROJECT.capitalize()}"
        if (PROJECT.contains('requirements')) {
            IMAGE_LOCI = buildLociMos()
        } else {
            loci.exportWheels(DIND_CONTAINER, WHEELS_LATEST)
            WHEELS_ARG = " --build-arg WHEELS=${LOCAL_WEB_URL}/images/wheels.tar"
            IMAGE_LOCI = buildLociMos(loci.getDependencies(PLUGIN_BASE_PROJECT), WHEELS_ARG)
        }
        LOCI_IMAGE_VAR = "${PLUGIN_BASE_PROJECT.toUpperCase()}_LOCI"
        cmd = "${DIND} docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE_LOCI}"
        IMAGE_SHA = sh(returnStdout: true, script: cmd).trim()
        sh "mkdir -p ${WORKSPACE}/artifacts"
        sh "echo $IMAGE_SHA | tee -a ${WORKSPACE}/artifacts/loci_image.txt"
        archiveArtifacts 'artifacts/*'
    }
}

// deploy OSH only for ocata release
if (!PROJECT.contains('requirements') && PROJECT_RELEASE == 'ocata') {

    // OSH AIO requires min 8 cpus cores and 16 GB ram
    vm2('bootstrap.sh',
        'cicd-ubuntu-16.04-server-cloudimg-amd64',
        'm1.xlarge',
        'deploy-osh-aio',
        'basic',
        false) {

        stage('Setup proxy') {
            vm2.setproxy()
        }
        stage('Install docker-ce') {
            osh.installDockerCE()
        }
        stage('Authenticate docker repo') {
            osh.dockerAuth()
        }
        stage('Clone OpenstackHelm') {
            osh.cloneOSH()
        }
        stage('Update OSH proxy') {
            osh.updateProxy()
        }
        stage('Override images') {
            // pass ps image as a map
            print "Overriding default for $LOCI_IMAGE_VAR with $IMAGE_LOCI..."
            osh.imageOverrides(["$LOCI_IMAGE_VAR": "$IMAGE_LOCI"], true)
        }
        stage('Install OSH AIO') {
            try {
                withEnv(['OS_REGION_NAME=',
                  'OS_USERNAME=',
                  'OS_PASSWORD=',
                  'OS_PROJECT_NAME=',
                  'OS_PROJECT_DOMAIN_NAME=',
                  'OS_USER_DOMAIN_NAME=',
                  'OS_AUTH_URL=',
                  "OSH_EXTRA_HELM_ARGS=--values=./tools/overrides/releases/ocata/loci.yaml"]) {
                    osh.installOSHAIO()
                }
            } catch (Exception exception) {
                osh.artifactLogs()
                error "OSH AIO deployment failed with exception $exception"
            }
        }
        stage('Get openstack versions') {
            // pass ps image as a map
            osh.serviceVersions(["$LOCI_IMAGE_VAR": "$IMAGE_LOCI"], true)
        }
        stage('Run Helm tests') {
            osh.runHelmTests()
        }
        stage('Parse test logs for failures') {
            status = osh.parseTestLogs()
            if (status != 0) {
                osh.artifactLogs()
                error "Helm tests failed... see log $WORKSPACE/artifacts/helm_tests.log"
            } else {
                print "Helm tests passed"

                //publish latest (branch) tag on merge
                if (env.GERRIT_EVENT_TYPE == 'change-merged') {
                    print "Promoting $IMAGE_LOCI to latest..."
                    def image_latest = "${IMAGE_BASE}/${PLUGIN_BASE_PROJECT}:latest"
                    sh "sudo docker tag $IMAGE_LOCI ${image_latest}"
                    sh "sudo docker push ${image_latest}"
                }
            }
        }
    }
}
