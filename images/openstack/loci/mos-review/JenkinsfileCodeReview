ABORT_MESSAGE = "Job was aborted."
ABORT_ON = ["Aborted by", "Calling pipeline was cancelled", ABORT_MESSAGE]

/* Method to run downstream jobs to be used in combination with retrier. */
def runBuild(name, parameters, retries=1) {
    retrier (retries) {
        job = build(
            job: name,
            wait: true,
            propagate: false,
            parameters: parameters
        )
        if (job.result == 'SUCCESS') { return job }
        else if (job.result == 'ABORTED') { throw new Exception("'${name}': ${ABORT_MESSAGE}.")  }
        else { throw new Exception("'${name}': Job failed.") }
    }
}

/* Method that allows to retry enclosed body that respects jobs aborts,
   including upstream and downstream ones
      Usage:
         retrier(3) {
             ...
         }
*/
def retrier(int retries, Closure body) {
    def lastError
    for(int i=0; i<retries; i++) {
        lastError = null
        try {
            result = body.call()
            break
        } catch (err) {
            lastLog = currentBuild.rawBuild.getLog(20).join()
            if (lastLog.matches(ABORT_ON.join("|"))) {
                throw err
            }
            lastError = err
            echo "${err}"
            continue
        }
    }
    if (lastError) {
        throw lastError
    }
    return result
}


import groovy.json.JsonSlurperClassic

projectList = new JsonSlurperClassic().parseText(PROJECT_LIST)

def getRefParamName(String project) {
    project.toUpperCase().replace('-', '_') + "_REF"
}

def compileDependencies(Map dependencyMap) {
    res = []
    dependencyMap.each { name, ref -> res.add("${name}:${ref}") }
    res.join(" ")
}

if (projectList.contains(GERRIT_PROJECT)) {
    params = [
        stringParam(name: getRefParamName(GERRIT_PROJECT),
                    value: GERRIT_REFSPEC),
    ]
} else {
    params = [
        stringParam(
            name: 'DEPENDENCY_LIST',
            value: compileDependencies([(GERRIT_PROJECT): GERRIT_REFSPEC])
        ),
    ]
}
params.add(stringParam(name: 'EVENT_TYPE', value: GERRIT_EVENT_TYPE))

print "Building Generic Pipeline with ${params}"
stage("Generic Pipeline") {
    job = runBuild("${JOB_BASE}/GenericPipeline", params)
    currentBuild.description = job.getBuildVariables()["IMAGES"]
}
