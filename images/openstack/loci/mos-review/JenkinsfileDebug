import jenkins.model.Jenkins
import com.att.nccicd.config.conf as config
import groovy.json.JsonOutput
import groovy.json.JsonSlurperClassic

conf = new config(env).CONF
RETRY_COUNT = RETRY_COUNT.toInteger()

json = new JsonSlurperClassic()

projectList = json.parseText(PROJECT_LIST)

if (GERRIT_BRANCH == conf.OCATA_BRANCH) {
    RELEASE = 'ocata'
} else if (GERRIT_BRANCH == conf.STEIN_BRANCH) {
    RELEASE = 'stein'
} else {
    error("Unsupported branch: ${GERRIT_BRANCH}")
}

LABEL = "DebugDeployment-${GERRIT_CHANGE_NUMBER}"

def waitForNode(limit) {
    def i = 0
    while (!nodesByLabel(label: LABEL)) {
        if (i > limit) {
            return false
        }
        sleep 60
        i ++
    }
    return true
}

if (!waitForNode(4)) {
    build(
        job: "${JOB_BASE}/DebugDeploymentPipeline",
        parameters: [
            stringParam(name: 'RELEASE', value: RELEASE),
            stringParam(name: 'LABEL', value: LABEL)
        ],
        wait: false
    )
}

if (!waitForNode(7)) {
    error("Timeout expired in waiting for environment")
}


def setPubKey() {
    if (fileExists("key_set")) { return }
    cmd = ("unset NO_PROXY; unset no_proxy; " +
           "curl https://${INTERNAL_GERRIT_URL}/accounts/" +
           "${GERRIT_CHANGE_OWNER_EMAIL}|tail -n +2")
    accountId = json.parseText(
        sh(returnStdout: true, script: cmd)
    )._account_id.toString()
    sshagent ([INTERNAL_GERRIT_KEY]) {
        sh "git clone ${INTERNAL_GERRIT_SSH}/All-Users ||:"
        accountId = accountId[-2..-1] << "/" << accountId
        dir ("All-Users") {
            sh "git fetch origin refs/users/${accountId} && git checkout FETCH_HEAD"
            sh "echo \"${readFile('authorized_keys')}\" >> ${HOME}/.ssh/authorized_keys"
        }
    }
    sh "rm -rf All-Users; touch key_set"
}

node(LABEL) {
    setPubKey()
    dir("${WORKSPACE}/../DebugDeploymentPipeline") {
        while (!fileExists("config")) {
            sleep 60
        }
        while (fileExists('lock')) { sleep 1 }
        sh "touch lock"
        dir ("config") {
            data = [
                "deathTime": (System.currentTimeMillis() + 3600000).toString(),
                "config": [
                    [
                        "project": GERRIT_PROJECT,
                        "refspec": GERRIT_REFSPEC,
                    ],
                ]
            ]
            data = JsonOutput.toJson(data)
            writeFile(file: "config", text: data.bytes.encodeBase64().toString())
            sh "git add config; git commit -m 'Update from ${GERRIT_REFSPEC}'"
        }
        sh "rm lock"
    }
    sshagent ([INTERNAL_GERRIT_KEY]) {
        ip = getHost(LABEL)
        message = ("Environment for troubleshooting is deployed. " +
                   "Your changes are currently being processed and applied\n" +
                   "You may access node using your Gerrit key with:\n" +
                   "ssh ubuntu@${ip}")
        sh ("ssh -p ${GERRIT_PORT} ${INTERNAL_GERRIT_USER}@${GERRIT_HOST} " +
            "gerrit review --project \"${GERRIT_PROJECT}\" " +
            "--message '\"${message}\"' '${GERRIT_PATCHSET_REVISION}'")
    }
}


def getHost(name) {
  return Jenkins.getInstance().getComputer(name).getNode().getLauncher().getHost()
}
