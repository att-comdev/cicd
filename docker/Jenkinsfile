def comp = env.JOB_BASE_NAME
IMAGE_VERSION = "0.1.0-${env.BUILD_NUMBER}"
COMP_IMAGE = "cicd/att-comdev/${comp}:${IMAGE_VERSION}"
ARTF_URL = '10.24.20.19:30092'
ARTF_COMP_IMAGE = "${ARTF_URL}/cicd/att-comdev/${comp}:${IMAGE_VERSION}"
GIT_URL = 'https://review.gerrithub.io/att-comdev/dockerfiles'
NODE_NAME='armada-16.04-slavenode-'+env.BUILD_NUMBER

try{
    node('master-host'){
        stage('Create Jenkins Node'){
            dir("/home/jenkins/armada"){
                sh "source openrc && openstack stack create -t armada.yaml ${NODE_NAME} && sleep 30"
                NODE_IP=sh(returnStdout: true, script: "source openrc && openstack stack output show -f value -c output_value ${NODE_NAME} floating_ip")
            
                withCredentials([usernamePassword(credentialsId: 'jenkins-token',
                    usernameVariable: 'JENKINS_USER',
                    passwordVariable: 'JENKINS_TOKEN')]) {
                    sh "bash create-node ${NODE_NAME} ${NODE_IP}"                    
                }
            }
        }
    }
    node(NODE_NAME){                       
        dir(env.WORKSPACE){
            stage('Checkout'){
                checkout poll: false,
                         scm: [$class: 'GitSCM',
                            branches: [[name: 'master']],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'dockerfiles']],
                            submoduleCfg: [],
                            userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                                                 url: GIT_URL]]]
            }
        }        
        dir(env.WORKSPACE+"/dockerfiles/${comp}"){
			stage('Build-DockerImages'){ 
						sh "sudo systemctl status docker.service"                       
						sh '''sudo echo {\\"insecure-registries\\":[\\"10.24.20.19:30092\\"]} | sudo tee /etc/docker/daemon.json > /dev/null'''
						sh "sudo cat /etc/docker/daemon.json"
						sh "sudo systemctl restart docker.service"
						sh "sudo docker info"                         
						sh "sudo docker build -t ${COMP_IMAGE} ."     
						sh "sudo docker images"
						sh "sudo docker tag ${COMP_IMAGE} ${ARTF_COMP_IMAGE}"
			}       
			stage('Images Publish'){				
						withCredentials([usernamePassword(credentialsId: 'jenkins-artifactory',
						usernameVariable: 'ARTIFACTORY_USER',
						passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
						 dopts = "--username \$ARTIFACTORY_USER --password \$ARTIFACTORY_PASSWORD"
						 sh "sudo docker login ${dopts} ${ARTF_URL}/docker"
						 sh "sudo docker push ${ARTF_COMP_IMAGE}"
						}				
			}
		}
    }  
}
finally {
    stage('Delete Jenkins Node'){
        node('master-host') {
            dir("/home/jenkins/armada") {
               sh "source openrc && openstack stack delete -y $NODE_NAME"               
                withCredentials([usernamePassword(credentialsId: 'jenkins-token',
                    usernameVariable: 'JENKINS_USER',
                    passwordVariable: 'JENKINS_TOKEN')]) {   
                     sh "java -jar ${env.JENKINS_CLI} -s ${env.JENKINS_URL} -auth ${env.JENKINS_USER}:${JENKINS_TOKEN} delete-node $NODE_NAME"
                }
            }
        }
    }
}
