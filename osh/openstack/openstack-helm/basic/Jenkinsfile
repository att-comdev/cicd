import groovy.json.JsonSlurper

def chartsJson = '''{ "osh":[{
                        "repo":"openstack/openstack-helm",
                        "charts":[  "cinder",
                                    "heat",
                                    "glance",
                                    "horizon",
                                    "keystone",
                                    "magnum",
                                    "mistral",
                                    "neutron",
                                    "nova",
                                    "barbican",
                                    "ceph",
                                    "dns-helper",
                                    "etcd",
                                    "ingress",
                                    "mariadb",
                                    "memcached",
                                    "rabbitmq",
                                    "senlin"]
                        }]}'''

ARFT_URL = env.ARTF_DOCKER_URL
JENKINS_VM_LAUNCH='local-vm-launch'
NODE_NAME="openstack-helm-${env.BUILD_NUMBER}"
NODE_TMPL="osh/basic/ubuntu-16.04.yaml"
def funcs

try {
    stage('Create Jenkins Node'){
        node(JENKINS_VM_LAUNCH) {
            checkout poll: false,
                    scm: [$class: 'GitSCM',
                    branches: [[name: 'master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                        url: 'https://review.gerrithub.io/att-comdev/cicd']]]

            funcs = load "${WORKSPACE}/common/funcs.groovy"
            funcs.jenkins_slave_launch(NODE_NAME, "${env.HOME}/${NODE_TMPL}")
        } 
    }
    
    timeout (10) {
        node(NODE_NAME) {
            // shall come up else don't hang
        }
    }
    
    node(NODE_NAME) {
        ansiColor('xterm') {
            stage('Checkout') {
                checkout poll: false,
                scm: [$class: 'GitSCM',
                    branches: [[name: '$GERRIT_REFSPEC']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[refspec: 'refs/changes/*:refs/changes/*',
                        url: 'https://git.openstack.org/openstack/openstack-helm']]]
            }
        
            stage('Single Node Installation') {
        
                // artifactory renmote docker cache
            //    sh "find ./ -name values.yaml -exec sed -i 's|docker.io/kolla|${ARFT_URL}/kolla|g' {} \\;"
              //  sh "find ./ -name values.yaml -exec sed -i 's|quay.io/attcomdev|${ARFT_URL}/attcomdev|g' {} \\;"
            //    sh "find ./ -name values.yaml -exec sed -i 's|gcr.io/google_containers|${ARFT_URL}/google_containers|g' {} \\;"
             //   sh "find ./ -name values.yaml -exec sed -i 's|docker.io/mariadb|${ARFT_URL}/mariadb|g' {} \\;"
             //   sh "find ./ -name values.yaml -exec sed -i 's|docker.io/memcached|${ARFT_URL}/memcached|g' {} \\;"
        
                timeout(45) {
                    withEnv(["INTEGRATION=aio",
                             "INTEGRATION_TYPE=basic",
                              "POD_START_TIMEOUT=720"]) {
                        sh "./tools/gate/setup_gate.sh"
    
                    }
                }
                if ( "${GERRIT_EVENT_TYPE}" == 'change-merged' || "$GERRIT_EVENT_TYPE" =='change-merged' ){
                    echo 'Publish to Artifactory!'
                }
            }
        }
    }
}  finally {
         // this should NEVER be in finally => finally should only be cleanup
         // todo: its ok for now but this must never fail
         // refactor this section to somewhere else 
        stage('Publish Logs'){
            node(NODE_NAME){
                
                // todo kaspars: fix this nicely
                try {
                sh 'mkdir -p logs'
                sh 'tar -cf logs-basic-$BUILD_NUMBER.tgz logs'
                nexusArtifactUploader artifacts: [[ artifactId: 'org.openstack.helm', 
                                                        classifier: '', 
                                                        file: 'logs-basic-$BUILD_NUMBER.tgz', 
                                                        type: 'x-gtar']], 
                                        credentialsId: 'nexus3', 
                                        groupId: 'openstack-helm', 
                                        nexusUrl: '$NEXUS3_URL', 
                                        nexusVersion: 'nexus3', 
                                        protocol: 'http', 
                                        repository: 'att-comdev-jenkins-logs', 
                                        version: '$BUILD_NUMBER'
                } catch (Exception e) {
                   // ignore artifactory errors for now   
                }
                
            }
    }
    stage('Delete Jenkins Node'){
        node(JENKINS_VM_LAUNCH) {
        funcs.jenkins_slave_destroy(NODE_NAME)
        }
    }
}


